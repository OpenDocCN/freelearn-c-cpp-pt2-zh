["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\n#include <iostream>\nint main() {\n  std::cout << \"Hello World!\" << std::endl;\n  return 0;\n} \n```", "```cpp\n$ g++ hello.cpp -o hello \n```", "```cpp\n$ ./hello\nHello World! \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Hello)\nadd_executable(Hello hello.cpp) \n```", "```cpp\ncmake -B <build tree>\ncmake --build <build tree> \n```", "```cpp\n~/examples/ch01/01-hello# cmake -B ~/build_tree\n-- The C compiler identification is GNU 11.3.0\n-- The CXX compiler identification is GNU 11.3.0\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: /usr/bin/cc - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++ - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done (1.0s)\n-- Generating done (0.1s)\n-- Build files have been written to: /root/build_tree \n```", "```cpp\n~/examples/ch01/01-hello# cmake --build ~/build_tree\nScanning dependencies of target Hello\n[ 50%] Building CXX object CMakeFiles/Hello.dir/hello.cpp.o\n[100%] Linking CXX executable Hello\n[100%] Built target Hello \n```", "```cpp\n~/examples/ch01/01-hello# ~/build_tree/Hello\nHello World! \n```", "```cpp\n$ docker pull swidzinski/cmake2:examples\n$ docker run -it swidzinski/cmake2:examples\nroot@b55e271a85b2:root@b55e271a85b2:# \n```", "```cpp\ndevuser/examples/examples/ch<N>/<M>-<title> \n```", "```cpp\n$ sudo apt-get install cmake \n```", "```cpp\n$ yum install cmake \n```", "```cpp\n$ VER=3.26.0 && wget https://github.com/Kitware/CMake/releases/download/v$VER/cmake-$VER-linux-x86_64.sh && chmod +x cmake-$VER-linux-x86_64.sh && ./cmake-$VER-linux-x86_64.sh \n```", "```cpp\n$ VER=3.26.0 && wget https://github.com/Kitware/CMake/releases/download/v$VER/cmake-$VER-Linux-aarch64.sh && chmod +x cmake-$VER-Linux-aarch64.sh && ./cmake-$VER-Linux-aarch64.sh \n```", "```cpp\n$ sudo port install cmake \n```", "```cpp\n$ sudo port install cmake-devel \n```", "```cpp\n$ brew install cmake \n```", "```cpp\n$ wget https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0.tar.gz\n$ tar xzf cmake-3.26.0.tar.gz\n$ cd cmake-3.26.0\n$ ./bootstrap\n$ make\n$ make install \n```", "```cpp\ncmake [<options>] -S <source tree> -B <build tree>\ncmake [<options>] <source tree>\ncmake [<options>] <build tree> \n```", "```cpp\ncmake -S ./project -B ./build \n```", "```cpp\n<directory>: it will use the cached path to the sources and rebuild from there. Since we often invoke the same commands from the Terminal command history, we might get into trouble here; before using this form, always check whether your shell is currently working in the right directory.\n```", "```cpp\ncmake -S .. \n```", "```cpp\ncmake -B build \n```", "```cpp\ncmake -G <generator name> -S <source tree> -B <build tree> \n```", "```cpp\ncmake -G <generator name>\n      -T <toolset spec>\n      -A <platform name>\n      -S <source tree> -B <build tree> \n```", "```cpp\ncmake --help \n```", "```cpp\nVisual Studio 17 2022       \nVisual Studio 16 2019       \nVisual Studio 15 2017 [arch]\nVisual Studio 14 2015 [arch]\nVisual Studio 12 2013 [arch]\nVisual Studio 11 2012 [arch]\nVisual Studio 9 2008 [arch] \nBorland Makefiles           \nNMake Makefiles             \nNMake Makefiles JOM         \nMSYS Makefiles              \nMinGW Makefiles             \nGreen Hills MULTI           \nUnix Makefiles              \nNinja                       \nNinja Multi-Config          \nWatcom WMake                \nCodeBlocks - MinGW Makefiles\nCodeBlocks - NMake Makefiles\nCodeBlocks - NMake Makefiles JOM\nCodeBlocks - Ninja          \nCodeBlocks - Unix Makefiles \nCodeLite - MinGW Makefiles  \nCodeLite - NMake Makefiles  \nCodeLite - Ninja            \nCodeLite - Unix Makefiles   \nEclipse CDT4 - NMake Makefiles\nEclipse CDT4 - MinGW Makefiles\nEclipse CDT4 - Ninja        \nEclipse CDT4 - Unix Makefiles\nKate - MinGW Makefiles      \nKate - NMake Makefiles      \nKate - Ninja                \nKate - Unix Makefiles       \nSublime Text 2 - MinGW Makefiles\nSublime Text 2 - NMake Makefiles\nSublime Text 2 - Ninja      \nSublime Text 2 - Unix Makefiles \n```", "```cpp\ncmake -C <initial cache script> -S <source tree> -B <build tree> \n```", "```cpp\ncmake -D <var>[:<type>]=<value> -S <source tree> -B <build tree> \n```", "```cpp\ncmake -S . -B ../build -D CMAKE_BUILD_TYPE=Release \n```", "```cpp\ncmake -L -S <source tree> -B <build tree> \n```", "```cpp\ncmake -LH -S <source tree> -B <build tree>\ncmake -LAH -S <source tree> -B <build tree> \n```", "```cpp\ncmake -U <globbing_expr> -S <source tree> -B <build tree> \n```", "```cpp\ncmake --system-information [file] \n```", "```cpp\ncmake --log-level=<level> \n```", "```cpp\n[some.context.example] Debug message. \n```", "```cpp\ncmake --log-context <source tree> \n```", "```cpp\ncmake --trace \n```", "```cpp\ncmake --list-presets \n```", "```cpp\ncmake --preset=<preset> -S <source> -B <build tree> \n```", "```cpp\ncmake --fresh -S <source tree> -B <build tree> \n```", "```cpp\ncmake --build <build tree> [<options>] [-- <build-tool-options>] \n```", "```cpp\ncmake --build <build tree> \n```", "```cpp\ncmake --build <build tree> -- <build tool options> \n```", "```cpp\ncmake --build <build tree> --parallel [<number of jobs>]\ncmake --build <build tree> -j [<number of jobs>] \n```", "```cpp\ncmake --build <build tree> --target <target1> --target <target2> … \n```", "```cpp\ncmake --build <build tree> -t clean \n```", "```cpp\ncmake --build <build tree> --clean-first \n```", "```cpp\ncmake --build <build tree> --config <cfg> \n```", "```cpp\ncmake --build <build tree> --verbose\ncmake --build <build tree> -v \n```", "```cpp\ncmake --install <build tree> [<options>] \n```", "```cpp\ncmake --install <build tree> \n```", "```cpp\ncmake --install <build tree> --install-prefix <prefix> \n```", "```cpp\ncmake --install <build tree> --prefix <prefix> \n```", "```cpp\ncmake --install <build tree> --config <cfg> \n```", "```cpp\ncmake --install <build tree> --component <component> \n```", "```cpp\ncmake --install <build tree>\n      --default-directory-permissions <permissions> \n```", "```cpp\ncmake --install <build tree> --verbose\ncmake --install <build tree> -v \n```", "```cpp\ncmake [{-D <var>=<value>}...] -P <cmake script file>\n      [-- <unparsed options>...] \n```", "```cpp\ncmake -E <command> [<options>] \n```", "```cpp\ncmake ––workflow --list-presets \n```", "```cpp\ncmake --workflow --preset <name> \n```", "```cpp\ncmake --help \n```", "```cpp\n$ ctest\nTest project /tmp/build\nGuessing configuration Debug\n    Start 1: SystemInformationNew\n1/1 Test #1: SystemInformationNew .........   Passed 3.19 sec\n100% tests passed, 0 tests failed out of 1\nTotal Test time (real) =   3.24 sec \n```", "```cpp\nmyProject/CMakeLists.txt\nmyProject/api/CMakeLists.txt\nmyProject/api/api.h\nmyProject/api/api.cpp \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(app)\nmessage(\"Top level CMakeLists.txt\")\nadd_subdirectory(api) \n```", "```cpp\n# This is the CMakeCache file.\n# For build in directory: /root/build tree\n# It was generated by CMake: /usr/local/bin/cmake\n# The syntax for the file is as follows:\n# KEY:TYPE=VALUE\n# KEY is the name of a variable in the cache.\n# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT\n  #TYPE!.\n# VALUE is the current value for the KEY.\n########################\n# EXTERNAL cache entries\n########################\n# Flags used by the CXX compiler during DEBUG builds.\nCMAKE_CXX_FLAGS_DEBUG:STRING=/MDd /Zi /Ob0 /Od /RTC1\n# ... more variables here ...\n########################\n# INTERNAL cache entries\n########################\n# Minor version of cmake used to create the current loaded\n  cache\nCMAKE_CACHE_MINOR_VERSION:INTERNAL=19\n# ... more variables here ... \n```", "```cpp\n<build tree>/CMakeFiles/CMakeConfigureLog.yaml \n```", "```cpp\nCMakeUserPresets.json\n# If in-source builds are used, exclude their output like so:\nbuild_debug/\nbuild_release/\n# Generated and user files\n**/CMakeCache.txt\n**/CMakeUserPresets.json\n**/CTestTestfile.cmake\n**/CPackConfig.cmake\n**/cmake_install.cmake\n**/install_manifest.txt\n**/compile_commands.json \n```", "```cpp\n# An example of a script\ncmake_minimum_required(VERSION 3.26.0)\nmessage(\"Hello world\")\nfile(WRITE Hello.txt \"I am writing to a file\") \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(ModuleExample)\ninclude (TestBigEndian)\ntest_big_endian(IS_BIG_ENDIAN)\nif(IS_BIG_ENDIAN)\nmessage(\"BIG_ENDIAN\")\nelse()\nmessage(\"LITTLE_ENDIAN\")\nendif() \n```"]