["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Hello)\nadd_executable(Hello hello.cpp) \n```", "```cpp\nproject(<PROJECT-NAME> [<language-name>...]) \n```", "```cpp\nproject(<PROJECT-NAME>\n        [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n        [DESCRIPTION <project-description-string>]\n        [HOMEPAGE_URL <url-string>]\n        [LANGUAGES <language-name>...]) \n```", "```cpp\nPROJECT_NAME\nCMAKE_PROJECT_NAME (only in the top-level CMakeLists.txt)\nPROJECT_IS_TOP_LEVEL, <PROJECT-NAME>_IS_TOP_LEVEL\nPROJECT_SOURCE_DIR, <PROJECT-NAME>_SOURCE_DIR\nPROJECT_BINARY_DIR, <PROJECT-NAME>_BINARY_DIR \n```", "```cpp\nPROJECT_VERSION, <PROJECT-NAME>_VERSION\nCMAKE_PROJECT_VERSION (only in the top-level CMakeLists.txt)\nPROJECT_VERSION_MAJOR, <PROJECT-NAME>_VERSION_MAJOR\nPROJECT_VERSION_MINOR, <PROJECT-NAME>_VERSION_MINOR\nPROJECT_VERSION_PATCH, <PROJECT-NAME>_VERSION_PATCH\nPROJECT_VERSION_TWEAK, <PROJECT-NAME>_VERSION_TWEAK \n```", "```cpp\nPROJECT_DESCRIPTION, <PROJECT-NAME>_DESCRIPTION\nPROJECT_HOMEPAGE_URL, <PROJECT-NAME>_HOMEPAGE_URL \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(Rental CXX)\nadd_executable(Rental\n               main.cpp\n               **cars/car.cpp** \n               # more files in other directories\n) \n```", "```cpp\nset(sources\n    cars/car.cpp\n#   more files in other directories\n) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(Rental CXX)\n**include****(cars/cars.cmake)**\nadd_executable(Rental\n               main.cpp\n               ${sources} # for cars/\n) \n```", "```cpp\nadd_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) \n```", "```cpp\n├── CMakeLists.txt\n├── cars\n│   ├── CMakeLists.txt\n│   ├── car.cpp\n│   └── car.h\n└── main.cpp \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(Rental CXX)\nadd_executable(Rental main.cpp)\nadd_subdirectory(cars)\ntarget_link_libraries(Rental PRIVATE cars) \n```", "```cpp\nadd_library(cars OBJECT\n    car.cpp\n#   more files in other directories\n)\ntarget_include_directories(cars PUBLIC .) \n```", "```cpp\n#include \"car.h\" \n```", "```cpp\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  message(STATUS \"Doing things the usual way\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  message(STATUS \"Thinking differently\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  message(STATUS \"I'm supported here too.\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  message(STATUS \"I buy mainframes.\")\nelse()\n  message(STATUS \"This is ${CMAKE_SYSTEM_NAME} speaking.\")\nendif() \n```", "```cpp\ncmake_host_system_information(RESULT <VARIABLE> QUERY <KEY>...) \n```", "```cpp\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  message(STATUS \"Target is 64 bits\")\nendif() \n```", "```cpp\nset(CMAKE_CXX_STANDARD 23) \n```", "```cpp\nset_property(TARGET <target> PROPERTY CXX_STANDARD <version>) \n```", "```cpp\nset_target_properties(<targets> PROPERTIES CXX_STANDARD <version>) \n```", "```cpp\nset(CMAKE_CXX_STANDARD_REQUIRED ON) \n```", "```cpp\nTarget \"Standard\" requires the language dialect \"CXX23\" (with compiler extensions), but CMake does not know the compile flags to use to enable it. \n```", "```cpp\nset(CMAKE_CXX_EXTENSIONS OFF) \n```", "```cpp\ninclude(CheckIPOSupported)\ncheck_ipo_supported(RESULT ipo_supported)\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION ${ipo_supported}) \n```", "```cpp\nlist(FIND CMAKE_CXX_COMPILE_FEATURES cxx_variable_templates result)\nif(result EQUAL -1)\n  message(FATAL_ERROR \"Variable templates are required for compilation.\")\nendif() \n```", "```cpp\n#include <iostream>\nint main()\n{\n  std::cout << \"Quick check if things work.\" << std::endl;\n} \n```", "```cpp\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n**try_run****(run_result compile_result**\n        **${CMAKE_BINARY_DIR}****/test_output**\n        **${CMAKE_SOURCE_DIR}****/main.cpp**\n        **RUN_OUTPUT_VARIABLE output)**\nmessage(\"run_result: ${run_result}\")\nmessage(\"compile_result: ${compile_result}\")\nmessage(\"output:\\n\" ${output}) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(NoInSource CXX)\nif(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)\n  message(FATAL_ERROR \"In-source builds are not allowed\")\nendif()\nmessage(\"Build successful!\") \n```"]