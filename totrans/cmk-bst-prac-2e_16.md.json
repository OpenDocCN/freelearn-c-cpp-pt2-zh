["```cpp\nfunction(ProcessorCount var)\n  # Unknown:\n  set(count 0)\n  if(WIN32)\n    set(count \"$ENV{NUMBER_OF_PROCESSORS}\")\n  endif()\n  if(NOT count)\n    # Mac, FreeBSD, OpenBSD (systems with sysctl):\n    # … mac-specific approach … #\n  endif()\n  if(NOT count)\n    # Linux (systems with nproc):\n    # … linux-specific approach … #\n  endif()\n# … Other platforms, alternative fallback methods … #\n# Lastly:\nset(${var} ${count} PARENT_SCOPE)\nendfunction()\n```", "```cpp\n   include(ProcessorCount)\n   ProcessorCount(CORE_COUNT)\n   message(STATUS \"Core count: ${CORE_COUNT}\")\n```", "```cpp\nfunction(<name> [<arg1> ...])\n  <commands>\nendfunction()\n```", "```cpp\nfunction(git_get_branch_name result_var_name)\n  execute_process(\n        COMMAND git symbolic-ref -q --short HEAD\n        WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE git_current_branch_name\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n        ERROR_QUIET\n    )\n    set(${result_var_name} ${git_current_branch_name}\n      PARENT_SCOPE)\nendfunction()\n```", "```cpp\ngit_get_branch_name(branch_n)\nmessage(STATUS \"Current git branch name is: ${branch_n}\")\n```", "```cpp\nmacro(git_get_branch_name_m result_var_name)\n  execute_process(\n        COMMAND git symbolic-ref -q --short HEAD\n        WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE ${result_var_name}\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n        ERROR_QUIET\n    )\nendmacro()\n```", "```cpp\ngit_get_branch_name_m(branch_nn)\nmessage(STATUS \"Current git branch name is: ${branch_nn}\")\n```", "```cpp\n# …\ninclude_guard(DIRECTORY)\nmacro(git_get_branch_name result_var_name)\n    execute_process(\n        COMMAND git symbolic-ref -q --short HEAD\n        WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE ${result_var_name}\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n        ERROR_QUIET\n    )\nendmacro()\n# … git_get_head_commit_hash(), git_get_config_value()\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\nproject(\n  ch13_ex01_git_module\n  VERSION 1.0\n  DESCRIPTION \"Chapter 13 Example 01, git utility module\n    example\"\n  LANGUAGES CXX)\n# Include the git.cmake module.\n# Full relative path is given, since .cmake/ is not in the\n  CMAKE_MODULE_PATH\ninclude(.cmake/git.cmake)\ngit_get_branch_name(current_branch_name)\ngit_get_head_commit_hash(current_head)\ngit_get_config_value(\"user.name\" current_user_name)\ngit_get_config_value(\"user.email\" current_user_email)\nmessage(STATUS \"-----------------------------------------\")\nmessage(STATUS \"VCS (git) info:\")\nmessage(STATUS \"\\tBranch: ${current_branch_name}\")\nmessage(STATUS \"\\tCommit hash: ${current_head}\")\nmessage(STATUS \"\\tAuthor name: ${current_user_name}\")\nmessage(STATUS \"\\tAuthor e-mail: ${current_user_email}\")\nmessage(STATUS \"-----------------------------------------\")\n```", "```cpp\ncd chapter13/ex01_git_utility/\ncmake -S ./ -B ./build\n```", "```cpp\n-- The CXX compiler identification is GNU 9.4.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++ - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- -------------------------------------------\n-- VCS (git) info:\n--      Branch: chapter-development/chapter-13\n--      Commit hash: 1d5a32649e74e4132e7b66292ab23aae\n          ed327fdc\n--      Author name: Mustafa Kemal GILOR\n--      Author e-mail: mustafagilor@gmail.com\n-- -------------------------------------------\n-- Configuring done\n-- Generating done\n-- Build files have been written to:\n/home/toor/workspace/ CMake-Best-Practices---2nd-Edition/chapter13\n/ex01_git_utility/build\n```", "```cpp\nKEY1=\"Value1\"\nKEY2=\"Value2\"\n```", "```cpp\ninclude_guard(DIRECTORY)\nfunction(read_environment_file ENVIRONMENT_FILE_NAME)\n    file(STRINGS ${ENVIRONMENT_FILE_NAME} KVP_LIST ENCODING\n      UTF-8)\n    foreach(ENV_VAR_DECL IN LISTS KVP_LIST)\n        string(STRIP ENV_VAR_DECL ${ENV_VAR_DECL})\n        string(LENGTH ENV_VAR_DECL ENV_VAR_DECL_LEN)\n        if(ENV_VAR_DECL_LEN EQUAL 0)\n            continue()\n        endif()\n        string(SUBSTRING ${ENV_VAR_DECL} 0 1\n          ENV_VAR_DECL_FC)\n        if(ENV_VAR_DECL_FC STREQUAL \"#\")\n            continue()\n        endif()\n        string(REPLACE \"=\" \";\" ENV_VAR_SPLIT\n          ${ENV_VAR_DECL})\n        list(GET ENV_VAR_SPLIT 0 ENV_VAR_NAME)\n        list(GET ENV_VAR_SPLIT 1 ENV_VAR_VALUE)\n        string(REPLACE \"\\\"\" \"\" ENV_VAR_VALUE\n          ${ENV_VAR_VALUE})\n        set(${ENV_VAR_NAME} ${ENV_VAR_VALUE} PARENT_SCOPE)\n    endforeach()\nendfunction()\n```", "```cpp\n# Add .cmake folder to the module path, so subsequent\n  include() calls\n# can directly include modules under .cmake/ folder by\n  specifying the name only.\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\n  ${PROJECT_SOURCE_DIR}/.cmake/)\nadd_subdirectory(test-executable)\n```", "```cpp\n# ....\n# Include the module by name\ninclude(envfile-utils)\nread_environment_file(\"${PROJECT_SOURCE_DIR}/\n  variables.env\")\nadd_executable(ch13_ex02_envfile_utility_test)\ntarget_sources(ch13_ex02_envfile_utility_test PRIVATE\n  test.cpp)\ntarget_compile_features(ch13_ex02_envfile_utility_test\n  PRIVATE cxx_std_11)\ntarget_compile_definitions(ch13_ex02_envfile_utility_test\n  PRIVATE TEST_PROJECT_VERSION=\"${TEST_PROJECT_VERSION}\"\n    TEST_PROJECT_AUTHOR=\"${TEST_PROJECT_AUTHOR}\")\n```", "```cpp\n# This file contains some metadata about the project\nTEST_PROJECT_VERSION=\"1.0.2\"\nTEST_PROJECT_AUTHOR=\"CBP Authors\"\n```", "```cpp\n#include <cstdio>\nint main(void) {\n    std::printf(\"Version `%s`, author `%s`\\n\",\n      TEST_PROJECT_VERSION, TEST_PROJECT_AUTHOR);\n}\n```", "```cpp\ncd chapter13/ex02_envfile_utility\ncmake -S ./ -B ./build\ncmake --build build\n./build/test-executable/ch13_ex02_envfile_utility_test\n# Will output: Version `1.0.2`, author `CBP Authors`\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(hadouken\n    GIT_REPOSITORY https://github.com/mustafakemalgilor\n      /hadouken.git\n    GIT_TAG        7d0447fcadf8e93d25f242b9bb251ecbcf67f8cb\n    SOURCE_DIR \"${CMAKE_CURRENT_LIST_DIR}/.hadouken\"\n)\nFetchContent_MakeAvailable(hadouken)\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/.hadouken/cmake/modules)\ninclude(core/MakeTarget)\n```"]