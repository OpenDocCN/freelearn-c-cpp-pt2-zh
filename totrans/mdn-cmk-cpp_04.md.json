["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\ntarget_...(<target name> <INTERFACE|PUBLIC|PRIVATE>\n  <value>)\n```", "```cpp\ntarget_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE>\n                        <feature> [...])\n```", "```cpp\nfile(GLOB helloworld_SRC \"*.h\" \"*.cpp\")\nadd_executable(helloworld ${helloworld_SRC})\n```", "```cpp\nadd_executable(main main.cpp)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  target_sources(main PRIVATE gui_linux.cpp)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  target_sources(main PRIVATE gui_windows.cpp)\nendif()\n```", "```cpp\ntarget_include_directories(<target> [SYSTEM] [AFTER|BEFORE]\n  <INTERFACE|PUBLIC|PRIVATE> [item1...]\n  [<INTERFACE|PUBLIC|PRIVATE> [item2...] ...])\n```", "```cpp\n#include <iostream>\nint main() {\n#if defined(ABC)\n    std::cout << \"ABC is defined!\" << std::endl;\n#endif\n#if (DEF < 2*4-3)\n    std::cout << \"DEF is greater than 5!\" << std::endl;\n#endif\n}\n```", "```cpp\n#define ABC\n#define DEF 8\n```", "```cpp\nABC is defined!\nDEF is greater than 5!\n```", "```cpp\nset(VAR 8)\nadd_executable(defined definitions.cpp)\ntarget_compile_definitions(defined PRIVATE ABC\n  \"DEF=${VAR}\")\n```", "```cpp\nclass X {\n#ifndef UNIT_TEST\n private: \n#endif\n  int x_;\n}\n```", "```cpp\nadd_executable(print_commit print_commit.cpp)\nexecute_process(COMMAND git log -1 --pretty=format:%h\n                OUTPUT_VARIABLE SHA)\ntarget_compile_definitions(print_commit PRIVATE\n  \"SHA=${SHA}\")\n```", "```cpp\n#include <iostream>\n// special macros to convert definitions into c-strings:\n#define str(s) #s\n#define xstr(s) str(s)\nint main()\n{\n#if defined(SHA)\n    std::cout << \"GIT commit: \" << xstr(SHA) << std::endl;\n#endif\n}\n```", "```cpp\n#cmakedefine FOO_ENABLE\n#cmakedefine FOO_STRING1 \"@FOO_STRING@\"\n#cmakedefine FOO_STRING2 \"${FOO_STRING}\"\n#cmakedefine FOO_UNDEFINED \"@FOO_UNDEFINED@\"\n```", "```cpp\nadd_executable(configure configure.cpp)\nset(FOO_ENABLE ON)\nset(FOO_STRING1 \"abc\")\nset(FOO_STRING2 \"def\")\nconfigure_file(configure.h.in configured/configure.h)\ntarget_include_directories(configure PRIVATE \n                           ${CMAKE_CURRENT_BINARY_DIR})\n```", "```cpp\n#define FOO_ENABLE\n#define FOO_STRING1 \"abc\"\n#define FOO_STRING2 \"def\"\n/* #undef FOO_UNDEFINED \"@FOO_UNDEFINED@\" */\n```", "```cpp\n#include <iostream>\n#include \"configured/configure.h\"\n// special macros to convert definitions into c-strings:\n#define str(s) #s\n#define xstr(s) str(s)\nusing namespace std;\nint main()\n{\n#ifdef FOO_ENABLE\n  cout << \"FOO_ENABLE: ON\" << endl;\n#endif\n  cout << \"FOO_ENABLE1: \" << xstr(FOO_ENABLE1) << endl;\n  cout << \"FOO_ENABLE2: \" << xstr(FOO_ENABLE2) << endl;\n  cout << \"FOO_UNDEFINED: \" << xstr(FOO_UNDEFINED) << endl;\n}\n```", "```cpp\nFOO_ENABLE: ON\nFOO_ENABLE1: FOO_ENABLE1\nFOO_ENABLE2: FOO_ENABLE2\nFOO_UNDEFINED: FOO_UNDEFINED\n```", "```cpp\ntarget_compile_options(<target> [BEFORE]\n  <INTERFACE|PUBLIC|PRIVATE> [items1...]\n  [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\n```", "```cpp\nstruct X {\n  void im_inlined(){ cout << \"hi\\n\"; }; \n  void me_too();\n};\ninline void X::me_too() { cout << \"bye\\n\"; };\n```", "```cpp\nint main() {\n  X x;\n  x.im_inlined();\n  x.me_too();\n  return 0;\n}\n```", "```cpp\nint main() {\n  X x;\n  cout << \"hi\\n\";\n  cout << \"bye\\n\";\n  return 0;\n}\n```", "```cpp\nvoid func() {\n  for(int i = 0; i < 3; i++)\n    cout << \"hello\\n\";\n}\n```", "```cpp\nvoid func() {\n    cout << \"hello\\n\";\n    cout << \"hello\\n\";\n    cout << \"hello\\n\";\n} \n```", "```cpp\nint a[128];\nint b[128];\n// initialize b\nfor (i = 0; i<128; i++)\n  a[i] = b[i] + 5;\n```", "```cpp\nfor (i = 0; i<32; i+=4) {\n  a[ i ] = b[ i ] + 5;\n  a[i+1] = b[i+1] + 5;\n  a[i+2] = b[i+2] + 5;\n  a[i+3] = b[i+3] + 5;\n}\n```", "```cpp\ntarget_precompile_headers(<target>\n  <INTERFACE|PUBLIC|PRIVATE> [header1...]\n  [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])\n```", "```cpp\nadd_executable(precompiled hello.cpp)\ntarget_precompile_headers(precompiled PRIVATE <iostream>)\n```", "```cpp\nint main() {\n  std::cout << \"hello world\" << std::endl;\n} \n```", "```cpp\ntarget_precompile_headers(<target> REUSE_FROM\n  <other_target>)\n```", "```cpp\n#include \"source_a.cpp\"\n#include \"source_b.cpp\"\n```", "```cpp\nset_target_properties(<target1> <target2> ... \n                      PROPERTIES UNITY_BUILD true)\n```", "```cpp\nset_property(SOURCE <src1> <src2>... \n             PROPERTY UNITY_GROUP \"GroupA\") \n```", "```cpp\nexport module hello_world;\nimport <iostream>; \nexport void hello() {\n    std::cout << \"Hello world!\\n\";\n}\n```", "```cpp\nimport hello_world;\nint main() {\n    hello();\n}\n```", "```cpp\nadd_executable(debug hello.cpp)\ntarget_compile_options(debug PRIVATE -save-temps=obj)\n```", "```cpp\n    # 1 \"/root/examples/chapter05/06-debug/hello.cpp\"\n    # 1 \"<built-in>\"\n    # 1 \"<command-line>\"\n    # 1 \"/usr/include/stdc-predef.h\" 1 3 4\n    # / / / ... removed for brevity ... / / /\n    # 252 \"/usr/include/x86_64-linux-\n      gnu/c++/9/bits/c++config.h\" 3\n    namespace std\n    {\n      typedef long unsigned int size_t;\n      typedef long int ptrdiff_t;\n      typedef decltype(nullptr) nullptr_t;\n    }\n    ...\n    ```", "```cpp\n            .file   \"hello.cpp\"\n            .text\n            .section        .rodata\n            .type   _ZStL19piecewise_construct, @object\n            .size   _ZStL19piecewise_construct, 1\n    _ZStL19piecewise_construct:\n            .zero   1\n            .local  _ZStL8__ioinit\n            .comm   _ZStL8__ioinit,1,1\n    .LC0:\n            .string \"hello world\"\n            .text\n            .globl  main\n            .type   main, @function\n    main:\n    ( ... )\n    ```", "```cpp\nadd_executable(debug hello.cpp)\ntarget_compile_options(debug PRIVATE -H)\n```", "```cpp\n[ 25%] Building CXX object \n  CMakeFiles/inclusion.dir/hello.cpp.o\n. /usr/include/c++/9/iostream\n.. /usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h\n... /usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h\n.... /usr/include/features.h\n-- removed for brevity --\n.. /usr/include/c++/9/ostream\n```", "```cpp\nMultiple include guards may be useful for:\n/usr/include/c++/9/clocale\n/usr/include/c++/9/cstdio\n/usr/include/c++/9/cstdlib\n```", "```cpp\nint main(void)\n{\n    bool my_boolean = false;\n    assert(my_boolean); \n    std::cout << \"This shouldn't run. \\n\"; \n    return 0;\n}\n```", "```cpp\n#undef NDEBUG\n#include <assert.h>\n```"]