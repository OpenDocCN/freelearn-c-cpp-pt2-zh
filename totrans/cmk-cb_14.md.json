["```cpp\n$ cmake -G \"Visual Studio 15 2017\"\n```", "```cpp\n$ cmake -G\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nconst std::string cmake_system_name = SYSTEM_NAME;\n\nint main() {\n  std::cout << \"Hello from \" << cmake_system_name << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(GNUInstallDirs)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n\n# define executable and its source file\nadd_executable(hello-world hello-world.cpp)\n\n# we will print the system name in the code\ntarget_compile_definitions(hello-world\n  PUBLIC\n    \"SYSTEM_NAME=\\\"${CMAKE_SYSTEM_NAME}\\\"\"\n  )\n\ninstall(\n  TARGETS\n    hello-world\n  DESTINATION\n    ${CMAKE_INSTALL_BINDIR}\n  )\n```", "```cpp\n$ ./hello-world.exe\n\nHello from Windows\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nconst std::string cmake_system_name = SYSTEM_NAME;\n\nint main() {\n  std::cout << \"Hello from \" << cmake_system_name << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(GNUInstallDirs)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n\n# define executable and its source file\nadd_executable(hello-world hello-world.cpp)\n\n# we will print the system name in the code\ntarget_compile_definitions(hello-world\n  PUBLIC\n    \"SYSTEM_NAME=\\\"${CMAKE_SYSTEM_NAME}\\\"\"\n  )\n\ninstall(\n  TARGETS\n    hello-world\n  DESTINATION\n    ${CMAKE_INSTALL_BINDIR}\n  )\n```", "```cpp\n# the name of the target operating system\nset(CMAKE_SYSTEM_NAME Windows)\n\n# which compilers to use\nset(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)\n\n# adjust the default behaviour of the find commands:\n# search headers and libraries in the target environment\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n# search programs in the host environment\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -D CMAKE_TOOLCHAIN_FILE=toolchain.cmake .. \n-- The CXX compiler identification is GNU 5.4.0\n-- Check for working CXX compiler: /home/user/mxe/usr/bin/i686-w64-mingw32.static-g++\n-- Check for working CXX compiler: /home/user/mxe/usr/bin/i686-w64-mingw32.static-g++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/cmake-recipes/chapter-13/recipe-01/cxx-example/build\n```", "```cpp\n$ cmake --build .\n\nScanning dependencies of target hello-world\n[ 50%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.obj\n[100%] Linking CXX executable bin/hello-world.exe\n[100%] Built target hello-world\n```", "```cpp\nHello from Windows\n```", "```cpp\nset(CMAKE_SYSTEM_NAME Windows)\n```", "```cpp\nset(CMAKE_C_COMPILER i686-w64-mingw32-gcc)\nset(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)\nset(CMAKE_Fortran_COMPILER i686-w64-mingw32-gfortran)\n```", "```cpp\nset(CMAKE_FIND_ROOT_PATH /path/to/target/environment)\n```", "```cpp\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n```", "```cpp\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n```", "```cpp\n#include <iostream>\n#include <omp.h>\n#include <string>\n\nint main(int argc, char *argv[]) {\n  std::cout << \"number of available processors: \" << omp_get_num_procs()\n            << std::endl;\n  std::cout << \"number of threads: \" << omp_get_max_threads() << std::endl;\n\n  auto n = std::stol(argv[1]);\n  std::cout << \"we will form sum of numbers from 1 to \" << n << std::endl;\n\n  // start timer\n  auto t0 = omp_get_wtime();\n\n  auto s = 0LL;\n#pragma omp parallel for reduction(+ : s)\n  for (auto i = 1; i <= n; i++) {\n    s += i;\n  }\n\n  // stop timer\n  auto t1 = omp_get_wtime();\n\n  std::cout << \"sum: \" << s << std::endl;\n  std::cout << \"elapsed wall clock time: \" << t1 - t0 << \" seconds\" << std::endl;\n\n  return 0;\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.9 FATAL_ERROR)\n\n# project name and language\nproject(recipe-02 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(GNUInstallDirs)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n\nfind_package(OpenMP REQUIRED)\n\nadd_executable(example example.cpp)\n\ntarget_link_libraries(example\n  PUBLIC\n    OpenMP::OpenMP_CXX\n  )\n\ninstall(\n  TARGETS\n    example\n  DESTINATION\n    ${CMAKE_INSTALL_BINDIR}\n  )\n```", "```cpp\n# the name of the target operating system\nset(CMAKE_SYSTEM_NAME Windows)\n\n# which compilers to use\nset(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)\n\n# adjust the default behaviour of the find commands:\n# search headers and libraries in the target environment\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n# search programs in the host environment\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -D CMAKE_TOOLCHAIN_FILE=toolchain.cmake .. \n-- The CXX compiler identification is GNU 5.4.0\n-- Check for working CXX compiler: /home/user/mxe/usr/bin/i686-w64-mingw32.static-g++\n-- Check for working CXX compiler: /home/user/mxe/usr/bin/i686-w64-mingw32.static-g++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Found OpenMP_CXX: -fopenmp (found version \"4.0\")\n-- Found OpenMP: TRUE (found version \"4.0\")\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/cmake-recipes/chapter-13/recipe-02/cxx-example/build\n```", "```cpp\n$ cmake --build .\n\nScanning dependencies of target example\n[ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.obj\n[100%] Linking CXX executable bin/example.exe\n[100%] Built target example\n```", "```cpp\n$ set OMP_NUM_THREADS=1\n$ example.exe 1000000000\n\nnumber of available processors: 2\nnumber of threads: 1\nwe will form sum of numbers from 1 to 1000000000\nsum: 500000000500000000\nelapsed wall clock time: 2.641 seconds\n\n$ set OMP_NUM_THREADS=2\n$ example.exe 1000000000\n\nnumber of available processors: 2\nnumber of threads: 2\nwe will form sum of numbers from 1 to 1000000000\nsum: 500000000500000000\nelapsed wall clock time: 1.328 seconds\n```"]