["```cpp\n.\n├── cmake\n│   ├── coffee.icns\n│   ├── Info.plist.in\n│   └── messageConfig.cmake.in\n├── CMakeCPack.cmake\n├── CMakeLists.txt\n├── INSTALL.md\n├── LICENSE\n├── src\n│   ├── CMakeLists.txt\n│   ├── hello-world.cpp\n│   ├── Message.cpp\n│   └── Message.hpp\n└── tests\n    ├── CMakeLists.txt\n    └── use_target\n        ├── CMakeLists.txt\n        └── use_message.cpp\n```", "```cpp\nset(CPACK_PACKAGE_NAME \"${PROJECT_NAME}\")\n```", "```cpp\nset(CPACK_PACKAGE_VENDOR \"CMake Cookbook\")\n```", "```cpp\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/INSTALL.md\")\n```", "```cpp\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"message: a small messaging library\")\n```", "```cpp\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n```", "```cpp\nset(CPACK_PACKAGING_INSTALL_PREFIX \"/opt/${PROJECT_NAME}\")\n```", "```cpp\nset(CPACK_PACKAGE_VERSION_MAJOR \"${PROJECT_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\n```", "```cpp\nset(CPACK_SOURCE_IGNORE_FILES \"${PROJECT_BINARY_DIR};/.git/;.gitignore\")\n```", "```cpp\nset(CPACK_SOURCE_GENERATOR \"ZIP;TGZ\")\n```", "```cpp\nset(CPACK_GENERATOR \"ZIP;TGZ\")\n```", "```cpp\nif(UNIX)\n  if(CMAKE_SYSTEM_NAME MATCHES Linux)\n    list(APPEND CPACK_GENERATOR \"DEB\")\n    set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"robertodr\")\n    set(CPACK_DEBIAN_PACKAGE_SECTION \"devel\")\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"uuid-dev\")\n\n    list(APPEND CPACK_GENERATOR \"RPM\")\n    set(CPACK_RPM_PACKAGE_RELEASE \"1\")\n    set(CPACK_RPM_PACKAGE_LICENSE \"MIT\")\n    set(CPACK_RPM_PACKAGE_REQUIRES \"uuid-devel\")\n  endif()\nendif()\n```", "```cpp\nif(WIN32 OR MINGW)\n  list(APPEND CPACK_GENERATOR \"NSIS\")\n  set(CPACK_NSIS_PACKAGE_NAME \"message\")\n  set(CPACK_NSIS_CONTACT \"robertdr\")\n  set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)\nendif()\n```", "```cpp\nif(APPLE)\n  list(APPEND CPACK_GENERATOR \"Bundle\")\n  set(CPACK_BUNDLE_NAME \"message\")\n  configure_file(${PROJECT_SOURCE_DIR}/cmake/Info.plist.in Info.plist @ONLY)\n  set(CPACK_BUNDLE_PLIST ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)\n  set(CPACK_BUNDLE_ICON ${PROJECT_SOURCE_DIR}/cmake/coffee.icns)\nendif()\n```", "```cpp\nmessage(STATUS \"CPack generators: ${CPACK_GENERATOR}\")\n```", "```cpp\ninclude(CPack)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```", "```cpp\n$ cmake --build . --target help\n\nThe following are some of the valid targets for this Makefile:\n... all (the default if no target is provided)\n... clean\n... depend\n... install/strip\n... install\n... package_source\n... package\n... install/local\n... test\n... list_install_components\n... edit_cache\n... rebuild_cache\n... hello-world\n... message\n```", "```cpp\n$ cmake --build . --target package_source\n\nRun CPack packaging tool for source...\nCPack: Create package using ZIP\nCPack: Install projects\nCPack: - Install directory: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example\nCPack: Create package\nCPack: - package: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example/build/recipe-01-1.0.0-Source.zip generated.\nCPack: Create package using TGZ\nCPack: Install projects\nCPack: - Install directory: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example\nCPack: Create package\nCPack: - package: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example/build/recipe-01-1.0.0-Source.tar.gz generated.\n```", "```cpp\n$ cmake --build . --target package\n```", "```cpp\nmessage-1.0.0-Linux.deb\nmessage-1.0.0-Linux.rpm\nmessage-1.0.0-Linux.tar.gz\nmessage-1.0.0-Linux.zip\n```", "```cpp\n$ cd build\n$ cpack -G RPM\n\nCPack: Create package using RPM\nCPack: Install projects\nCPack: - Run preinstall target for: recipe-01\nCPack: - Install project: recipe-01\nCPack: Create package\nCPackRPM: Will use GENERATED spec file: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example/build/_CPack_Packages/Linux/RPM/SPECS/recipe-01.spec\nCPack: - package: /home/user/cmake-cookbook/chapter-11/recipe-01/cxx-example/build/recipe-01-1.0.0-Linux.rpm generated.\n```", "```cpp\nset(CPACK_SOURCE_IGNORE_FILES \"${PROJECT_BINARY_DIR};/.git/;.gitignore\")\n```", "```cpp\n$ tar tzf recipe-01-1.0.0-Source.tar.gz\n\nrecipe-01-1.0.0-Source/opt/\nrecipe-01-1.0.0-Source/opt/recipe-01/\nrecipe-01-1.0.0-Source/opt/recipe-01/cmake/\nrecipe-01-1.0.0-Source/opt/recipe-01/cmake/coffee.icns\nrecipe-01-1.0.0-Source/opt/recipe-01/cmake/Info.plist.in\nrecipe-01-1.0.0-Source/opt/recipe-01/cmake/messageConfig.cmake.in\nrecipe-01-1.0.0-Source/opt/recipe-01/CMakeLists.txt\nrecipe-01-1.0.0-Source/opt/recipe-01/src/\nrecipe-01-1.0.0-Source/opt/recipe-01/src/Message.hpp\nrecipe-01-1.0.0-Source/opt/recipe-01/src/CMakeLists.txt\nrecipe-01-1.0.0-Source/opt/recipe-01/src/Message.cpp\nrecipe-01-1.0.0-Source/opt/recipe-01/src/hello-world.cpp\nrecipe-01-1.0.0-Source/opt/recipe-01/LICENSE\nrecipe-01-1.0.0-Source/opt/recipe-01/tests/\nrecipe-01-1.0.0-Source/opt/recipe-01/tests/CMakeLists.txt\nrecipe-01-1.0.0-Source/opt/recipe-01/tests/use_target/\nrecipe-01-1.0.0-Source/opt/recipe-01/tests/use_target/CMakeLists.txt\nrecipe-01-1.0.0-Source/opt/recipe-01/tests/use_target/use_message.cpp\nrecipe-01-1.0.0-Source/opt/recipe-01/INSTALL.md\n```", "```cpp\n$ tar tzf recipe-01-1.0.0-Linux.tar.gz\n\nrecipe-01-1.0.0-Linux/opt/\nrecipe-01-1.0.0-Linux/opt/recipe-01/\nrecipe-01-1.0.0-Linux/opt/recipe-01/bin/\nrecipe-01-1.0.0-Linux/opt/recipe-01/bin/hello-world\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageConfig.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageTargets-hello-world.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageConfigVersion.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageTargets-hello-world-release.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageTargets-release.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/share/cmake/recipe-01/messageTargets.cmake\nrecipe-01-1.0.0-Linux/opt/recipe-01/include/\nrecipe-01-1.0.0-Linux/opt/recipe-01/include/message/\nrecipe-01-1.0.0-Linux/opt/recipe-01/include/message/Message.hpp\nrecipe-01-1.0.0-Linux/opt/recipe-01/include/message/messageExport.h\nrecipe-01-1.0.0-Linux/opt/recipe-01/lib64/\nrecipe-01-1.0.0-Linux/opt/recipe-01/lib64/libmessage.so\nrecipe-01-1.0.0-Linux/opt/recipe-01/lib64/libmessage.so.1\n```", "```cpp\nif(UNIX)\n  if(CMAKE_SYSTEM_NAME MATCHES Linux)\n    list(APPEND CPACK_GENERATOR \"DEB\")\n    set(CPACK_DEBIAN_PACKAGE_MAINTAINER \"robertodr\")\n    set(CPACK_DEBIAN_PACKAGE_SECTION \"devel\")\n    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"uuid-dev\")\n\n    list(APPEND CPACK_GENERATOR \"RPM\")\n    set(CPACK_RPM_PACKAGE_RELEASE \"1\")\n    set(CPACK_RPM_PACKAGE_LICENSE \"MIT\")\n    set(CPACK_RPM_PACKAGE_REQUIRES \"uuid-devel\")\n  endif()\nendif()\n```", "```cpp\nif(WIN32 OR MINGW)\n  list(APPEND CPACK_GENERATOR \"NSIS\")\n  set(CPACK_NSIS_PACKAGE_NAME \"message\")\n  set(CPACK_NSIS_CONTACT \"robertdr\")\n  set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)\nendif()\n```", "```cpp\nif(APPLE)\n  list(APPEND CPACK_GENERATOR \"Bundle\")\n  set(CPACK_BUNDLE_NAME \"message\")\n  configure_file(${PROJECT_SOURCE_DIR}/cmake/Info.plist.in Info.plist @ONLY)\n  set(CPACK_BUNDLE_PLIST ${CMAKE_CURRENT_BINARY_DIR}/Info.plist)\n  set(CPACK_BUNDLE_ICON ${PROJECT_SOURCE_DIR}/cmake/coffee.icns)\nendif()\n```", "```cpp\n.\n├── account\n│   ├── account.cpp\n│   ├── account.hpp\n│   ├── CMakeLists.txt\n│   └── test.py\n└── CMakeLists.txt\n```", "```cpp\nExample project\n===============\n\nProject description in here ...\n```", "```cpp\ninclude README.rst CMakeLists.txt\nrecursive-include account *.cpp *.hpp CMakeLists.txt\n```", "```cpp\nimport distutils.command.build as _build\nimport os\nimport sys\nfrom distutils import spawn\nfrom distutils.sysconfig import get_python_lib\n\nfrom setuptools import setup\n\ndef extend_build():\n    class build(_build.build):\n        def run(self):\n            cwd = os.getcwd()\n            if spawn.find_executable('cmake') is None:\n                sys.stderr.write(\"CMake is required to build this package.\\n\")\n                sys.exit(-1)\n            _source_dir = os.path.split(__file__)[0]\n            _build_dir = os.path.join(_source_dir, 'build_setup_py')\n            _prefix = get_python_lib()\n            try:\n                cmake_configure_command = [\n                    'cmake',\n                    '-H{0}'.format(_source_dir),\n                    '-B{0}'.format(_build_dir),\n                    '-DCMAKE_INSTALL_PREFIX={0}'.format(_prefix),\n                ]\n                _generator = os.getenv('CMAKE_GENERATOR')\n                if _generator is not None:\n                    cmake_configure_command.append('-\nG{0}'.format(_generator))\n                spawn.spawn(cmake_configure_command)\n                spawn.spawn(\n                    ['cmake', '--build', _build_dir, '--target', 'install'])\n                os.chdir(cwd)\n            except spawn.DistutilsExecError:\n                sys.stderr.write(\"Error while building with CMake\\n\")\n                sys.exit(-1)\n            _build.build.run(self)\n\n    return build\n\n_here = os.path.abspath(os.path.dirname(__file__))\n\nif sys.version_info[0] < 3:\n    with open(os.path.join(_here, 'README.rst')) as f:\n        long_description = f.read()\nelse:\n    with open(os.path.join(_here, 'README.rst'), encoding='utf-8') as f:\n        long_description = f.read()\n\n_this_package = 'account'\n\nversion = {}\nwith open(os.path.join(_here, _this_package, 'version.py')) as f:\n    exec(f.read(), version)\n\nsetup(\n    name=_this_package,\n    version=version['__version__'],\n    description='Description in here.',\n    long_description=long_description,\n    author='Bruce Wayne',\n    author_email='bruce.wayne@example.com',\n    url='http://example.com',\n    license='MIT',\n    packages=[_this_package],\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Science/Research',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6'\n    ],\n    cmdclass={'build': extend_build()})\n```", "```cpp\nfrom .version import __version__\nfrom .account import Account\n\n__all__ = [\n    '__version__',\n    'Account',\n]\n```", "```cpp\n__version__ = '0.0.0'\n```", "```cpp\n.\n├── account\n│   ├── account.cpp\n│   ├── account.hpp\n│   ├── CMakeLists.txt\n│   ├── __init__.py\n│   ├── test.py\n│   └── version.py\n├── CMakeLists.txt\n├── MANIFEST.in\n├── README.rst\n└── setup.py\n```", "```cpp\ninstall(\n  TARGETS\n    account\n  LIBRARY\n    DESTINATION account\n  )\n```", "```cpp\n$ pipenv install /path/to/cxx-example\n```", "```cpp\n$ pipenv run python\n```", "```cpp\n>>> from account import Account\n>>> account1 = Account()\n>>> account1.deposit(100.0)\n>>> account1.deposit(100.0)\n>>> account1.withdraw(50.0)\n>>> print(account1.get_balance())\n150.0\n```", "```cpp\ninstall(\n  TARGETS\n    account\n  LIBRARY\n    DESTINATION account\n  )\n```", "```cpp\nsetup(\n    name=_this_package,\n    version=version['__version__'],\n    description='Description in here.',\n    long_description=long_description,\n    author='Bruce Wayne',\n    author_email='bruce.wayne@example.com',\n    url='http://example.com',\n    license='MIT',\n    packages=[_this_package],\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Science/Research',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6'\n    ],\n    cmdclass={'build': extend_build()})\n```", "```cpp\ndef extend_build():\n    class build(_build.build):\n        def run(self):\n            cwd = os.getcwd()\n            if spawn.find_executable('cmake') is None:\n                sys.stderr.write(\"CMake is required to build this package.\\n\")\n                sys.exit(-1)\n            _source_dir = os.path.split(__file__)[0]\n            _build_dir = os.path.join(_source_dir, 'build_setup_py')\n            _prefix = get_python_lib()\n            try:\n                cmake_configure_command = [\n                    'cmake',\n                    '-H{0}'.format(_source_dir),\n                    '-B{0}'.format(_build_dir),\n                    '-DCMAKE_INSTALL_PREFIX={0}'.format(_prefix),\n                ]\n                _generator = os.getenv('CMAKE_GENERATOR')\n                if _generator is not None:\n                    cmake_configure_command.append('-G{0}'.format(_generator))\n                spawn.spawn(cmake_configure_command)\n                spawn.spawn(\n                    ['cmake', '--build', _build_dir, '--target', 'install'])\n                os.chdir(cwd)\n            except spawn.DistutilsExecError:\n                sys.stderr.write(\"Error while building with CMake\\n\")\n                sys.exit(-1)\n            _build.build.run(self)\n\n    return build\n```", "```cpp\ncmake_configure_command = [\n    'cmake',\n    '-H{0}'.format(_source_dir),\n    '-B{0}'.format(_build_dir),\n    '-DCMAKE_INSTALL_PREFIX={0}'.format(_prefix),\n]\n_generator = os.getenv('CMAKE_GENERATOR')\nif _generator is not None:\n    cmake_configure_command.append('-G{0}'.format(_generator))\nspawn.spawn(cmake_configure_command)\nspawn.spawn(\n    ['cmake', '--build', _build_dir, '--target', 'install'])\n```", "```cpp\n_prefix = get_python_lib()\n```", "```cpp\n[distutils]account\nindex-servers=\n    pypi\n    pypitest\n\n[pypi]\nusername = yourusername\npassword = yourpassword\n\n[pypitest]\nrepository = https://test.pypi.org/legacy/\nusername = yourusername\npassword = yourpassword\n```", "```cpp\n$ python setup.py sdist\n```", "```cpp\n$ pipenv run twine upload dist/* -r pypitest\n\nUploading distributions to https://test.pypi.org/legacy/\nUploading yourpackage-0.0.0.tar.gz\n```", "```cpp\n$ pipenv shell\n$ pip install --index-url https://test.pypi.org/simple/ yourpackage\n```", "```cpp\n$ pipenv run twine upload dist/* -r pypi\n```", "```cpp\n.\n├── account\n│   ├── account.h\n│   ├── CMakeLists.txt\n│   ├── implementation\n│   │   └── fortran_implementation.f90\n│   ├── __init__.py\n│   ├── interface_file_names.cfg.in\n│   ├── test.py\n│   └── version.py\n├── CMakeLists.txt\n├── MANIFEST.in\n├── README.rst\n└── setup.py\n```", "```cpp\n# ... up to this line the script is unchanged\n\nsetup(\n    name=_this_package,\n    version=version['__version__'],\n    description='Description in here.',\n    long_description=long_description,\n    author='Bruce Wayne',\n    author_email='bruce.wayne@example.com',\n    url='http://example.com',\n    license='MIT',\n    packages=[_this_package],\n    install_requires=['cffi'],\n    include_package_data=True,\n    classifiers=[\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Science/Research',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.6'\n    ],\n    cmdclass={'build': extend_build()})\n```", "```cpp\ninclude README.rst CMakeLists.txt\nrecursive-include account *.h *.f90 CMakeLists.txt\n```", "```cpp\n__version__ = '0.0.0'\n```", "```cpp\n[configuration]\nheader_file_name = account.h\nlibrary_file_name = $<TARGET_FILE_NAME:account>\n```", "```cpp\nfile(\n  GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/interface_file_names.cfg\n  INPUT ${CMAKE_CURRENT_SOURCE_DIR}/interface_file_names.cfg.in\n  )\n\nset_target_properties(account\n  PROPERTIES\n    PUBLIC_HEADER \"account.h;${CMAKE_CURRENT_BINARY_DIR}/account_export.h\"\n    RESOURCE \"${CMAKE_CURRENT_BINARY_DIR}/interface_file_names.cfg\"\n  )\n\ninstall(\n  TARGETS\n    account\n  LIBRARY\n    DESTINATION account/lib\n  RUNTIME\n    DESTINATION account/lib\n  PUBLIC_HEADER\n    DESTINATION account/include\n  RESOURCE\n    DESTINATION account\n  )\n```", "```cpp\n$ pipenv install /path/to/fortran-example\n```", "```cpp\n$ pipenv run python\n```", "```cpp\n>>> import account\n>>> account1 = account.new()\n>>> account.deposit(account1, 100.0)\n>>> account.deposit(account1, 100.0)\n>>> account.withdraw(account1, 50.0)\n>>> print(account.get_balance(account1))\n150.0\n```", "```cpp\ninclude README.rst CMakeLists.txt\nrecursive-include account *.h *.f90 CMakeLists.txt\n```", "```cpp\n[configuration]\nheader_file_name = account.h\nlibrary_file_name = $<TARGET_FILE_NAME:account>\n```", "```cpp\nfile(\n  GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/interface_file_names.cfg\n  INPUT ${CMAKE_CURRENT_SOURCE_DIR}/interface_file_names.cfg.in\n  )\n```", "```cpp\nset_target_properties(account\n  PROPERTIES\n    PUBLIC_HEADER \"account.h;${CMAKE_CURRENT_BINARY_DIR}/account_export.h\"\n    RESOURCE \"${CMAKE_CURRENT_BINARY_DIR}/interface_file_names.cfg\"\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    account\n  LIBRARY\n    DESTINATION account/lib\n  RUNTIME\n    DESTINATION account/lib\n  PUBLIC_HEADER\n    DESTINATION account/include\n  RESOURCE\n    DESTINATION account\n  )\n```", "```cpp\n# this interface requires the header file and library file\n# and these can be either provided by interface_file_names.cfg\n# in the same path as this file\n# or if this is not found then using environment variables\n_this_path = Path(os.path.dirname(os.path.realpath(__file__)))\n_cfg_file = _this_path / 'interface_file_names.cfg'\nif _cfg_file.exists():\n    config = ConfigParser()\n    config.read(_cfg_file)\n    header_file_name = config.get('configuration', 'header_file_name')\n    _header_file = _this_path / 'include' / header_file_name\n    _header_file = str(_header_file)\n    library_file_name = config.get('configuration', 'library_file_name')\n    _library_file = _this_path / 'lib' / library_file_name\n    _library_file = str(_library_file)\nelse:\n    _header_file = os.getenv('ACCOUNT_HEADER_FILE')\n    assert _header_file is not None\n    _library_file = os.getenv('ACCOUNT_LIBRARY_FILE')\n    assert _library_file is not None\n```", "```cpp\n#include <iostream>\n\nint main() {\n  std::cout << \"hello from your conda package!\" << std::endl;\n\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nadd_executable(hello-conda \"\")\n\ntarget_sources(hello-conda\n  PRIVATE\n    example.cpp\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    hello-conda\n  DESTINATION\n    bin\n  )\n```", "```cpp\n.\n├── CMakeLists.txt\n├── conda-recipe\n│   └── meta.yaml\n└── example.cpp\n```", "```cpp\npackage:\n  name: conda-example-simple\n  version: \"0.0.0\"\n\nsource:\n  path: ../ # this can be changed to git-url\n\nbuild:\n  number: 0\n  binary_relocation: true\n  script:\n    - cmake -H. -Bbuild_conda -G \"${CMAKE_GENERATOR}\" -DCMAKE_INSTALL_PREFIX=${PREFIX} # [not win]\n    - cmake -H. -Bbuild_conda -G \"%CMAKE_GENERATOR%\" -DCMAKE_INSTALL_PREFIX=\"%LIBRARY_PREFIX%\" # [win]\n    - cmake --build build_conda --target install\n\nrequirements:\n  build:\n    - cmake >=3.5\n    - {{ compiler('cxx') }}\n\nabout:\n  home: http://www.example.com\n  license: MIT\n  summary: \"Summary in here ...\"\n```", "```cpp\n$ conda build conda-recipe\n```", "```cpp\n$ conda install --use-local conda-example-simple\n```", "```cpp\n$ hello-conda \nhello from your conda package!\n```", "```cpp\n$ conda remove conda-example-simple\n```", "```cpp\ninstall(\n  TARGETS\n    hello-conda\n  DESTINATION\n    bin\n  )\n```", "```cpp\nbuild:\n  number: 0\n  binary_relocation: true\n  script:\n    - cmake -H. -Bbuild_conda -G \"${CMAKE_GENERATOR}\" \n-DCMAKE_INSTALL_PREFIX=${PREFIX} # [not win]\n    - cmake -H. -Bbuild_conda -G \"%CMAKE_GENERATOR%\" \n-DCMAKE_INSTALL_PREFIX=\"%LIBRARY_PREFIX%\" # [win]\n    - cmake --build build_conda --target install\n```", "```cpp\n.\n├── CMakeLists.txt\n├── conda-recipe\n│   └── meta.yaml\n└── example.cpp\n```", "```cpp\n#include \"mkl.h\"\n\n#include <cassert>\n#include <cmath>\n#include <iostream>\n#include <random>\n\nint main() {\n  // generate a uniform distribution of real number between -1.0 and 1.0\n  std::random_device rd;\n  std::mt19937 mt(rd());\n  std::uniform_real_distribution<double> dist(-1.0, 1.0);\n\n  int m = 500;\n  int k = 1000;\n  int n = 2000;\n\n  double *A = (double *)mkl_malloc(m * k * sizeof(double), 64);\n  double *B = (double *)mkl_malloc(k * n * sizeof(double), 64);\n  double *C = (double *)mkl_malloc(m * n * sizeof(double), 64);\n  double *D = new double[m * n];\n\n  for (int i = 0; i < (m * k); i++) {\n    A[i] = dist(mt);\n  }\n\n  for (int i = 0; i < (k * n); i++) {\n    B[i] = dist(mt);\n  }\n\n  for (int i = 0; i < (m * n); i++) {\n    C[i] = 0.0;\n  }\n\n  double alpha = 1.0;\n  double beta = 0.0;\n  cblas_dgemm(CblasRowMajor,\n              CblasNoTrans,\n              CblasNoTrans,\n              m,\n              n,\n              k,\n              alpha,\n              A,\n              k,\n              B,\n              n,\n              beta,\n              C,\n              n);\n\n  // D_mn = A_mk B_kn\n  for (int r = 0; r < m; r++) {\n    for (int c = 0; c < n; c++) {\n      D[r * n + c] = 0.0;\n      for (int i = 0; i < k; i++) {\n        D[r * n + c] += A[r * k + i] * B[i * n + c];\n      }\n    }\n  }\n\n  // compare the two matrices\n  double r = 0.0;\n  for (int i = 0; i < (m * n); i++) {\n    r += std::pow(C[i] - D[i], 2.0);\n  }\n  assert(r < 1.0e-12 && \"ERROR: matrices C and D do not match\");\n\n  mkl_free(A);\n  mkl_free(B);\n  mkl_free(C);\n  delete[] D;\n\n  std::cout << \"MKL DGEMM example worked!\" << std::endl;\n\n  return 0;\n}\n```", "```cpp\npackage:\n  name: conda-example-dgemm\n  version: \"0.0.0\"\n\nsource:\n  path: ../ # this can be changed to git-url\n\nbuild:\n  number: 0\n  script:\n    - cmake -H. -Bbuild_conda -G \"${CMAKE_GENERATOR}\" \n-DCMAKE_INSTALL_PREFIX=${PREFIX} # [not win]\n    - cmake -H. -Bbuild_conda -G \"%CMAKE_GENERATOR%\" \n-DCMAKE_INSTALL_PREFIX=\"%LIBRARY_PREFIX%\" # [win]\n    - cmake --build build_conda --target install\n\nrequirements:\n  build:\n    - cmake >=3.5\n    - {{ compiler('cxx') }}\n  host:\n    - mkl-devel 2018\n\nabout:\n  home: http://www.example.com\n  license: MIT\n  summary: \"Summary in here ...\"\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-05 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nadd_executable(dgemm-example \"\")\n\ntarget_sources(dgemm-example\n  PRIVATE\n    example.cpp\n  )\n```", "```cpp\nadd_library(IntelMKL INTERFACE)\n\ntarget_compile_options(IntelMKL\n  INTERFACE\n    $<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:AppleClang>>:-m64>\n  )\n```", "```cpp\nfind_path(_mkl_h\n  NAMES\n    mkl.h\n  HINTS\n    ${CMAKE_INSTALL_PREFIX}/include\n  )\ntarget_include_directories(IntelMKL\n  INTERFACE\n    ${_mkl_h}\n  )\nmessage(STATUS \"MKL header file FOUND: ${_mkl_h}\")\n```", "```cpp\nfind_library(_mkl_libs\n  NAMES\n    mkl_rt\n  HINTS\n    ${CMAKE_INSTALL_PREFIX}/lib\n  )\nmessage(STATUS \"MKL single dynamic library FOUND: ${_mkl_libs}\")\n\nfind_package(Threads QUIET)\ntarget_link_libraries(IntelMKL\n  INTERFACE\n    ${_mkl_libs}\n    $<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:AppleClang>>:Threads::Threads>\n    $<$<OR:$<CXX_COMPILER_ID:GNU>,$<CXX_COMPILER_ID:AppleClang>>:m>\n  )\n```", "```cpp\ninclude(CMakePrintHelpers)\ncmake_print_properties(\n  TARGETS\n    IntelMKL\n  PROPERTIES\n    INTERFACE_COMPILE_OPTIONS\n    INTERFACE_INCLUDE_DIRECTORIES\n    INTERFACE_LINK_LIBRARIES\n  )\n```", "```cpp\ntarget_link_libraries(dgemm-example\n  PRIVATE\n    IntelMKL\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    dgemm-example\n  DESTINATION\n    bin\n  )\n```", "```cpp\n$ conda build conda-recipe\n```", "```cpp\n$ conda install --use-local conda-example-dgemm\n```", "```cpp\n$ dgemm-example \nMKL DGEMM example worked!\n```", "```cpp\n$ conda remove conda-example-dgemm\n```", "```cpp\ntarget_link_libraries(dgemm-example\n  PRIVATE\n    IntelMKL\n  )\n```"]