["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\n[ 33%] Linking CXX static library libmy_static.a\n[ 66%] Linking CXX shared library libmy_shared.so\n[100%] Linking CXX shared module libmy_module.so\n[100%] Built target module_gui \n```", "```cpp\nadd_library(<name> [<source>...]) \n```", "```cpp\nadd_library(<name> STATIC [<source>...]) \n```", "```cpp\nadd_library(<name> SHARED [<source>...]) \n```", "```cpp\nadd_library(<name> MODULE [<source>...]) \n```", "```cpp\nset_target_properties(dependency\n                      PROPERTIES POSITION_INDEPENDENT_CODE ON) \n```", "```cpp\nint i; \n```", "```cpp\n#include <iostream>\n#include \"shared.h\"\nint main() {\n  std::cout << i << std::endl;\n} \n```", "```cpp\n#include \"shared.h\" \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(ODR CXX)\nset(CMAKE_CXX_STANDARD 20)\nadd_executable(odr one.cpp two.cpp) \n```", "```cpp\n/usr/bin/ld:\nCMakeFiles/odr.dir/two.cpp.o:(.bss+0x0): multiple definition of 'i';\nCMakeFiles/odr.dir/one.cpp.o:(.bss+0x0): first defined here\ncollect2: error: ld returned 1 exit status \n```", "```cpp\nstruct shared {\n  static inline int i = 1;\n}; \n```", "```cpp\n#include <iostream>\n#include \"shared.h\"\nint main() {\n  std::cout << shared::i << std::endl;\n} \n```", "```cpp\n[ 33%] Building CXX object CMakeFiles/odr.dir/one.cpp.o\n[ 66%] Building CXX object CMakeFiles/odr.dir/two.cpp.o\n[100%] Linking CXX executable odr\n[100%] Built target odr \n```", "```cpp\nstatic int i; \n```", "```cpp\n#include <iostream>\nvoid a() {\n  std::cout << \"A\" << std::endl;\n}\nvoid duplicated() {\n  std::cout << \"duplicated A\" << std::endl;\n} \n```", "```cpp\n#include <iostream>\nvoid b() {\n  std::cout << \"B\" << std::endl;\n}\nvoid duplicated() {\n  std::cout << \"duplicated B\" << std::endl;\n} \n```", "```cpp\nextern void a();\nextern void b();\nextern void duplicated();\nint main() {\n  a();\n  b();\n  duplicated();\n} \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Dynamic CXX)\nadd_library(a SHARED a.cpp)\nadd_library(b SHARED b.cpp)\nadd_executable(main_1 main.cpp)\ntarget_link_libraries(main_1 a b)\nadd_executable(main_2 main.cpp)\ntarget_link_libraries(main_2 b a) \n```", "```cpp\nroot@ce492a7cd64b:/root/examples/ch08/05-dynamic# b/main_1\nA\nB\nduplicated A\nroot@ce492a7cd64b:/root/examples/ch08/05-dynamic# b/main_2\nA\nB\nduplicated B \n```", "```cpp\nouter.cpp:(.text+0x1f): undefined reference to 'b' \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Order CXX)\nadd_library(outer outer.cpp)\nadd_library(nested nested.cpp)\nadd_executable(main main.cpp)\ntarget_link_libraries(main **nested** outer) \n```", "```cpp\n#include <iostream>\nextern int a;\nint main() {\n  std::cout << a << std::endl;\n} \n```", "```cpp\nextern int b;\nint a = b; \n```", "```cpp\nint b = 123; \n```", "```cpp\ntarget_link_libraries(main **nested** outer) \n```", "```cpp\ntarget_link_libraries(main outer **nested**) \n```", "```cpp\ntarget_link_libraries(main nested outer nested) \n```", "```cpp\ntarget_link_libraries(main \"$<LINK_GROUP:RESCAN,nested,outer>\") \n```", "```cpp\ntarget_link_options(tgt INTERFACE\n  -Wl,--whole-archive $<TARGET_FILE:lib1> -Wl,--no-whole-archive\n) \n```", "```cpp\ntarget_link_libraries(tgt INTERFACE\n  \"$<LINK_LIBRARY:WHOLE_ARCHIVE,lib1>\"\n) \n```", "```cpp\nextern int start_program(int, const char**);\nint main(int argc, const char** argv) {\n  return **start_program****(argc, argv);**\n} \n```", "```cpp\n#include <iostream>\nint **start_program**(int argc, const char** argv) {\n  if (argc <= 1) {\n    std::cout << \"Not enough arguments\" << std::endl;\n    return 1;\n  }\n  return 0;\n} \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Testing CXX)\nadd_library(program program.cpp)\nadd_executable(main main.cpp)\n**target_link_libraries****(main program)** \n```", "```cpp\n#include <iostream>\nextern int start_program(int, const char**);\nusing namespace std;\nint main()\n{\n  cout << \"Test 1: Passing zero arguments to start_program:\\n\";\n  auto exit_code = start_program(0, nullptr);\n  if (exit_code == 0)\n    cout << \"Test FAILED: Unexpected zero exit code.\\n\";\n  else\n    cout << \"Test PASSED: Non-zero exit code returned.\\n\"; \n  cout << endl;\n  cout << \"Test 2: Passing 2 arguments to start_program:\\n\";\n  const char *arguments[2] = {\"hello\", \"world\"};\n  exit_code = start_program(2, arguments);\n  if (exit_code != 0)\n    cout << \"Test FAILED: Unexpected non-zero exit code\\n\";\n  else\n    cout << \"Test PASSED\\n\";\n} \n```", "```cpp\n./test\nTest 1: Passing zero arguments to start_program:\nNot enough arguments\nTest PASSED: Non-zero exit code returned\nTest 2: Passing 2 arguments to start_program:\nTest PASSED \n```", "```cpp\nadd_executable(test test.cpp)\ntarget_link_libraries(test program) \n```"]