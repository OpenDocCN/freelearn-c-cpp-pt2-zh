- en: 'Appendix: Miscellaneous Commands'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every language has utility commands that come in handy on a myriad of occasions.
    CMake is no different in that matter: it provides tools for simple arithmetic,
    bitwise operations, string manipulations, and operations on lists and on files.
    Interestingly enough, the occasions when they are necessary are relatively rare
    (thanks to all the enhancements and modules written over the years), but can still
    be required in more automated projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Hence this appendix, which is a short summary of miscellaneous commands and
    their multiple modes. Treat this as a handy offline reference or a simplified
    version of the official documentation. If you need more information, visit the
    provided links.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `string()` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `list()` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `file()` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `math()` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The string() command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `string()` command is used to manipulate strings. It comes with a variety
    of modes that perform different actions on the string: search and replace, manipulation,
    comparison, hashing, generation, and JSON operations (the last one available since
    CMake 3.19).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full details can be found in the online documentation: [https://cmake.org/cmake/help/latest/command/string.html](https://cmake.org/cmake/help/latest/command/string.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '`string()` modes that accept the `<input>` argument will accept multiple `<input>`
    values and concatenate them before the execution of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the equivalent of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's explore all available `string()` modes.
  prefs: []
  type: TYPE_NORMAL
- en: Search and replace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string(FIND <haystack> <pattern> <out> [REVERSE])` searches for `<pattern>`
    in the `<haystack>` string and writes the position found as an integer to the
    `<out>` variable. If the `REVERSE` flag was used, it searches from the end of
    the string to the beginning. This works only for ASCII strings (multibyte support
    isn''t provided).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(REPLACE <pattern> <replace> <out> <input>)` replaces all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(REGEX MATCH <pattern> <out> <input>)` regex-matches the first occurrence
    of `<pattern>` in `<input>` with `<replace>` and stores it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(REGEX MATCHALL <pattern> <out> <input>)` regex-matches all occurrences
    of `<pattern>` in `<input>` with `<replace>` and stores them in the `<out>` variable
    as a comma-separated list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(REGEX REPLACE <pattern> <replace> <out> <input>)` regex-replaces all
    occurrences of `<pattern>` in `<input>` with the `<replace>` expression and stores
    them in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regular expression operations follow C++ syntax as defined in the standard
    library in the `<regex>` header. You can use capturing groups to add matches to
    the `<replace>` expression with numeric placeholders: `\\1`, `\\2`... (double
    backslashes are required so arguments are parsed correctly).'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string(APPEND <out> <input>)` mutates strings stored in `<out>` by appending
    the `<input>` string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(PREPEND <out> <input>)` mutates strings stored in `<out>` by prepending
    the `<input>` string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(CONCAT <out> <input>)` concatenates all provided `<input>` strings
    and stores them in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(JOIN <glue> <out> <input>)` interleaves all provided `<input>` strings
    with a `<glue>` value and stores them as a concatenated string in the `<out>`
    variable (don''t use this mode for list variables).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(TOLOWER <string> <out>)` converts `<string>` to lowercase and stores
    it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(TOUPPER <string> <out>)` converts `<string>` to uppercase and stores
    it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(LENGTH <string> <out>)` counts the bytes of `<string>` and stores the
    result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(SUBSTRING <string> <begin> <length> <out>)` extracts a substring of
    `<string>` of `<length>` bytes starting at the `<begin>` byte, and stores it in
    the `<out>` variable. Providing `-1` as the length is understood as "till the
    end of the string."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(STRIP <string> <out>)` removes trailing and leading whitespace from
    `<string>` and stores the result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(GENEX_STRIP <string> <out>)` removes all generator expressions used
    in `<string>` and stores the result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(REPEAT <string> <count> <out>)` generates a string containing `<count>`
    repetitions of `<string>` and stores it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A comparison of strings takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<operation>` argument is one of the following: `LESS`, `GREATER`, `EQUAL`,
    `NOTEQUAL`, `LESS_EQUAL`, or `GREATER_EQUAL`. It will be used to compare `<stringA>`
    with `<stringB>` and the result (`true` or `false`) will be stored in the `<out>`
    variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Hashing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hashing mode has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It hashes `<string>` with `<algorithm>` and stores the result in the `<out>`
    variable. The following algorithms are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MD5`: Message-Digest Algorithm 5, RFC 1321'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA1`: US Secure Hash Algorithm 1, RFC 3174'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA224`: US Secure Hash Algorithms, RFC 4634'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA256`: US Secure Hash Algorithms, RFC 4634'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA384`: US Secure Hash Algorithms, RFC 4634'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA512`: US Secure Hash Algorithms, RFC 4634'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA3_224`: Keccak SHA-3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA3_256`: Keccak SHA-3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA3_384`: Keccak SHA-3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHA3_512`: Keccak SHA-3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string(ASCII <number>... <out>)` stores ASCII characters of given `<number>`
    in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(HEX <string> <out>)` converts `<string>` to its hexadecimal representation
    and stores it in the `<out>` variable (since CMake 3.18).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(CONFIGURE <string> <out> [@ONLY] [ESCAPE_QUOTES])`works exactly like
    `configure_file()` but for strings. The result is stored in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(MAKE_C_IDENTIFIER <string> <out>)` converts non-alphanumeric characters
    in `<string>` to underscores and stores the result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(RANDOM [LENGTH <len>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <out>)`generates
    a random string of `<len>` characters (default `5`) using the optional `<alphabet>`
    from the random seed, `<seed>,` and stores the result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(TIMESTAMP <out> [<format>] [UTC])` generates a string representing
    the current date and time and stores it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string(UUID <out> ...)` generates a universally unique identifier. This mode
    is a bit involved to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Operations on JSON-formatted strings use the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Several operations are available. They all store their results in the `<out>`
    variable, and errors in the `<error>` variable. Operations and their arguments
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET <json> <member|index>...` returns the value of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TYPE <json> <member|index>...` returns the type of one or more elements from
    a `<json>` string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MEMBER <json> <member|index>... <array-index>` returns the member name of
    one or more array-typed elements on the `<array-index>` position from the `<json>`
    string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LENGTH <json> <member|index>...` returns the element count of one or more
    array-typed elements from the `<json>` string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REMOVE <json> <member|index>...` returns the result of removal of one or more
    elements from the `<json>` string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SET <json> <member|index>... <value>` returns the result of upsertion of `<value>`
    to one or more elements from a `<json>` string using the `<member>` path or `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EQUAL <jsonA> <jsonB>` evaluates whether `<jsonA>` and `<jsonB>` are equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list() command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command provides basic operations on lists: reading, searching, modification,
    and ordering. Some modes will change list (mutate the original value). Be sure
    to copy the original value if you''ll need it later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full details can be found in the online documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cmake.org/cmake/help/latest/command/list.html](https://cmake.org/cmake/help/latest/command/list.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list(LENGTH <list> <out>)` counts the elements in the `<list>` variable and
    stores the result in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(GET <list> <index>... <out>)` copies the `<list>` elements specified
    with the list of `<index>` indexes to the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(JOIN <list> <glue> <out>)` interleaves `<list>` elements with the `<glue>`
    delimiter and stores the resulting string in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(SUBLIST <list> <begin> <length> <out>)` works like the `GET` mode, but
    operates on range instead of explicit indexes. If `<length>` is `-1`, elements
    from `<begin>` index to the end of the list provided in the `<list>` variable
    will be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This mode simply finds the index of the `<needle>` element in the `<list>`
    variable and stores the result in the `<out>` variable (or `-1` if the element
    wasn''t found):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Modification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list(APPEND <list> <element>...)` adds one or more `<element>` value to the
    end of the `<list>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(PREPEND <list> [<element>...])` works like `APPEND`, but adds elements
    to the beginning of the `<list> variable`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <pattern>)` filters the `<list>`
    variable to `INCLUDE` or `EXCLUDE` the elements matching the `<pattern> value`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(INSERT <list> <index> [<element>...])` adds one or more `<element>` values
    to the `<list>` variable at the given `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(POP_BACK <list> [<out>...])` removes an element from the end of the `<list>`
    variable and stores it in the optional `<out>` variable. If multiple `<out>` variables
    were provided, more elements will be removed to fill them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(POP_FRONT <list> [<out>...])` works like `POP_BACK` but removes an element
    from the beginning of the `<list> variable`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(REMOVE_ITEM <list> <value>...)` shorthand for `FILTER EXCLUDE`, but without
    the support of regular expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(REMOVE_AT <list> <index>...)` removes elements from `<list>` at a specific
    `<index>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(REMOVE_DUPLICATES <list>)` removes duplicates from `<list>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(TRANSFORM <list> <action> [<selector>] [OUTPUT_VARIABLE <out>])` applies
    a specific transformation to the `<list>` elements. By default, the action is
    applied to all elements, but we may limit the effect by adding a `<selector>`.
    Provided list will be mutated (changed in place) unless the `OUTPUT_VARIABLE`
    keyword was provided, in which case, the result is stored in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following selectors are available: `AT <index>`, `FOR <start> <stop> [<step>]`,
    and `REGEX <pattern>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Actions include `APPEND <string>`, `PREPEND <string>`, `TOLOWER`, `TOUPPER`,
    `STRIP`, `GENEX_STRIP`, and `REPLACE <pattern> <expression>`. They work exactly
    like the `string()` modes with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`list(REVERSE <list>)` simply reverses the order of `<list>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list(SORT <list>)` sorts the list alphabetically. Refer to the online manual
    for more advanced options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file() command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command provides all kinds of operations related to files: reading, transferring,
    locking, and archiving. It also provides modes to inspect the filesystem and operations
    on strings representing paths.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full details can be found in the online documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cmake.org/cmake/help/latest/command/file.html](https://cmake.org/cmake/help/latest/command/file.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file(READ <filename> <out> [OFFSET <o>] [LIMIT <max>] [HEX])` reads the file
    from `<filename>` to the `<out>` variable. The read optionally starts at offset
    `<o>` and follows the optional limit of `<max>` bytes. The `HEX flag` specifies
    that output should be converted to hexadecimal representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(STRINGS <filename> <out>)` reads strings from the file at `<filename>`
    to the `<out> variable`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(<algorithm> <filename> <out>)` computes the `<algorithm>` hash from the
    file at `<filename>` and stores the result in the `<out>` variable. Available
    algorithms are the same as for the `string()` hashing function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(TIMESTAMP <filename> <out> [<format>])` generates a string representation
    of a timestamp of the file at `<filename>` and stores it in the `<out>` variable.
    Optionally accepts a `<format>` string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(GET_RUNTIME_DEPENDENCIES [...])` gets runtime dependencies for specified
    files. This is an advanced command to be used only in `install(CODE)` or `install(SCRIPT)`
    scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file({WRITE | APPEND} <filename> <content>...)` writes or appends all `<content>`
    arguments to the file at `<filename>`. If the provided system path doesn''t exist,
    it will be recursively created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file({TOUCH | TOUCH_NOCREATE} [<filename>...])` updates the timestamp of the
    `<filename>`. If the file doesn''t exist, it will only be created in the `TOUCH`
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(GENERATE OUTPUT <output-file> [...])` is an advanced mode that generates
    an output file for each build configuration of the current CMake Generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(CONFIGURE OUTPUT <output-file> CONTENT <content> [...])` works like `GENERATE_OUTPUT`,
    but also configures the generated files by substituting variable placeholders
    with values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file({GLOB | GLOB_RECURSE} <out> [...] [<globbing-expression>...])` generates
    a list of files matching `<globbing-expression>` and stores it in the `<out>`
    variable. `GLOB_RECURSE` mode will also scan nested directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(RENAME <oldname> <newname>)` moves a file from `<oldname>` to `<newname>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file({REMOVE | REMOVE_RECURSE } [<files>...])` deletes `<files>`. `REMOVE_RECURSE`
    will also remove directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(MAKE_DIRECTORY [<dir>...])` creates a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(COPY <file>... DESTINATION <dir> [...])` copies `files` to the `<dir>`
    destination. Offers options for filtering, setting permissions, symlink chain
    following, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(SIZE <filename> <out>)` reads the size of `<filename>` in bytes and stores
    it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(READ_SYMLINK <linkname> <out>)` reads the destination path of the `<linkname>`
    symlink and stores it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(CREATE_LINK <original> <linkname> [...])` creates a symlink to `<original>`
    at `<linkname>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file({CHMOD|CHMOD_RECURSE} <files>... <directories>... PERMISSIONS <permissions>...
    [...])` sets permissions on files and directories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file(REAL_PATH <path> <out> [BASE_DIRECTORY <dir>])` computes the absolute
    path from the relative path and stores it in the `<out>` variable. Optionally
    accepts the `<dir>` base directory. It''s been available since CMake 3.19.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(RELATIVE_PATH <out> <directory> <file>)` computes the `<file>` path relative
    to `<directory>` and stores it in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out>)` converts `<path>` to
    a CMake path (directories separated with a forward slash) to the native path of
    the platform and back. The result is stored in the `<out>` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following modes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`file(DOWNLOAD <url> [<path>] [...])` downloads a file from `<url>` and stores
    it in path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file(UPLOAD <file> <url> [...])` uploads `<file>` to an URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Locking mode places an advisory lock on the `<path>` resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This lock can be optionally scoped to `FUNCTION`, `FILE`, or `PROCESS` and limited
    with a timeout of `<seconds>`. To release the lock, provide the `RELEASE` keyword.
    The result will be stored in the `<out>` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Archiving
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The creation of archives is provided with the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It creates an archive at the `<destination>` path comprising `<source>` files
    in one of the supported formats: `7zip`, `gnutar`, `pax`, `paxr`, `raw`, or `zip`
    (`paxr` is the default). If the chosen format supports the compression level,
    it can be provided as a single-digit integer `0-9`, with `0` being the default.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The extraction mode has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It extracts files matching optional `<patterns>` values from `<archive>` to
    the destination `<dir>`. If the `LIST_ONLY` keyword is provided, files won't be
    extracted, but only listed instead.
  prefs: []
  type: TYPE_NORMAL
- en: The math() command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CMake also supports some simple arithmetical operations. See the online documentation
    for full details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cmake.org/cmake/help/latest/command/math.html](https://cmake.org/cmake/help/latest/command/math.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To evaluate a mathematical expression and store it in the `<out>` variable
    as the string in an optional `<format>` (`HEXADECIMAL` or `DECIMAL`), use the
    following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`The <expression>` value is a string that supports operators present in C code
    (they have the same meaning here):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arithmetical: `+`, `-`, `*`, `/`, `%` modulo division'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bitwise: `|` or, `&` and, `^` xor, `~` not, `<<` shift left, `>>` shift right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parenthesis (...)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant values can be provided in decimal or hexadecimal format.
  prefs: []
  type: TYPE_NORMAL
