["```cpp\n#include \"sum_integers.hpp\"\n\n#include <numeric>\n#include <vector>\n\nint main() {\n  // creates vector {1, 2, 3, ..., 999, 1000}\n  std::vector<int> integers(1000);\n  std::iota(integers.begin(), integers.end(), 1);\n\n  if (sum_integers(integers) == 500500) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n```", "```cpp\n.\n├── CMakeLists.txt\n├── CTestConfig.cmake\n├── src\n│   ├── CMakeLists.txt\n│   ├── main.cpp\n│   ├── sum_integers.cpp\n│   └── sum_integers.hpp\n└── tests\n    ├── CMakeLists.txt\n    ├── test_long.cpp\n    └── test_short.cpp\n```", "```cpp\n# example library\nadd_library(sum_integers \"\")\n\ntarget_sources(sum_integers\n  PRIVATE\n    sum_integers.cpp\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}/sum_integers.hpp\n  )\n\ntarget_include_directories(sum_integers\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}\n  )\n\n# main code\nadd_executable(sum_up main.cpp)\n\ntarget_link_libraries(sum_up sum_integers)\n```", "```cpp\nadd_executable(test_short test_short.cpp)\ntarget_link_libraries(test_short sum_integers)\n\nadd_executable(test_long test_long.cpp)\ntarget_link_libraries(test_long sum_integers)\n\nadd_test(\n  NAME\n    test_short\n  COMMAND\n    $<TARGET_FILE:test_short>\n  )\n\nadd_test(\n  NAME\n    test_long\n  COMMAND\n    $<TARGET_FILE:test_long>\n  )\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-01 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# process src/CMakeLists.txt\nadd_subdirectory(src)\n\nenable_testing()\n\n# allow to report to a cdash dashboard\ninclude(CTest)\n\n# process tests/CMakeLists.txt\nadd_subdirectory(tests)\n```", "```cpp\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=cmake-cookbook\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n```", "```cpp\n$ ctest --dashboard Experimental\n\n Site: larry\n Build name: Linux-c++\nCreate new tag: 20180408-1449 - Experimental\nConfigure project\n Each . represents 1024 bytes of output\n . Size of output: 0K\nBuild project\n Each symbol represents 1024 bytes of output.\n '!' represents an error and '*' a warning.\n . Size of output: 0K\n 0 Compiler errors\n 0 Compiler warnings\nTest project /home/user/cmake-recipes/chapter-15/recipe-01/cxx-example/build\n Start 1: test_short\n1/2 Test #1: test_short ....................... Passed 0.00 sec\n Start 2: test_long\n2/2 Test #2: test_long ........................ Passed 0.00 sec\n\n100% tests passed, 0 tests failed out of 2\n\nTotal Test time (real) = 0.01 sec\nPerforming coverage\n Cannot find any coverage files. Ignoring Coverage request.\nSubmit files (using http)\n Using HTTP submit method\n Drop site:http://my.cdash.org/submit.php?project=cmake-cookbook\n Uploaded: /home/user/cmake-recipes/chapter-14/recipe-01/cxx-example/build/Testing/20180408-1449/Build.xml\n Uploaded: /home/user/cmake-recipes/chapter-14/recipe-01/cxx-example/build/Testing/20180408-1449/Configure.xml\n Uploaded: /home/user/cmake-recipes/chapter-14/recipe-01/cxx-example/build/Testing/20180408-1449/Test.xml\n Submission successful\n```", "```cpp\nset(CTEST_NIGHTLY_START_TIME \"00:00:00 UTC\")\n```", "```cpp\n#include \"sum_integers.hpp\"\n\n#include <vector>\n\nint sum_integers(const std::vector<int> integers) {\n  auto sum = 0;\n  for (auto i : integers) {\n    sum += i;\n  }\n  return sum;\n}\n\nint sum_integers_unused(const std::vector<int> integers) {\n  auto sum = 0;\n  for (auto i : integers) {\n    sum += i;\n  }\n  return sum;\n}\n```", "```cpp\noption(ENABLE_COVERAGE \"Enable coverage\" ON)\n\nif(ENABLE_COVERAGE)\n  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n    message(STATUS \"Coverage analysis with gcov enabled\") \n    target_compile_options(sum_integers\n      PUBLIC\n        -fprofile-arcs -ftest-coverage -g\n      )\n    target_link_libraries(sum_integers\n      PUBLIC\n        gcov\n      )\n  else()\n    message(WARNING \"Coverage not supported for this compiler\")\n  endif()\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build . --target Experimental\n```", "```cpp\nPerforming coverage\n   Processing coverage (each . represents one file):\n    ...\n   Accumulating results (each . represents one file):\n    ...\n        Covered LOC: 14\n        Not covered LOC: 7\n        Total LOC: 21\n        Percentage Coverage: 66.67%\nSubmit files (using http)\n   Using HTTP submit method\n   Drop site:http://my.cdash.org/submit.php?project=cmake-cookbook\n   Uploaded: /home/user/cmake-recipes/chapter-14/recipe-02/cxx-example/build/Testing/20180408-1530/Build.xml\n   Uploaded: /home/user/cmake-recipes/chapter-14/recipe-02/cxx-example/build/Testing/20180408-1530/Configure.xml\n   Uploaded: /home/user/cmake-recipes/chapter-14/recipe-02/cxx-example/build/Testing/20180408-1530/Coverage.xml\n   Uploaded: /home/user/cmake-recipes/chapter-14/recipe-02/cxx-example/build/Testing/20180408-1530/CoverageLog-0.xml\n   Uploaded: /home/user/cmake-recipes/chapter-14/recipe-02/cxx-example/build/Testing/20180408-1530/Test.xml\n   Submission successful\n```", "```cpp\n.\n├── CMakeLists.txt\n├── CTestConfig.cmake\n├── dashboard.cmake\n├── src\n│   ├── buggy.cpp\n│   ├── buggy.hpp\n│   └── CMakeLists.txt\n└── tests\n    ├── CMakeLists.txt\n    ├── leaky.cpp\n    └── use_after_free.cpp\n```", "```cpp\n#include \"buggy.hpp\"\n\n#include <iostream>\n\nint function_leaky() {\n\n  double *my_array = new double[1000];\n\n  // do some work ...\n\n  // we forget to deallocate the array\n  // delete[] my_array;\n\n  return 0;\n}\n\nint function_use_after_free() {\n\n  double *another_array = new double[1000];\n\n  // do some work ...\n\n  // deallocate it, good!\n  delete[] another_array;\n\n  // however, we accidentally use the array\n  // after it has been deallocated\n  std::cout << \"not sure what we get: \" << another_array[123] << std::endl;\n\n  return 0;\n}\n```", "```cpp\n#pragma once\n\nint function_leaky();\nint function_use_after_free();\n```", "```cpp\n#include \"buggy.hpp\"\n\nint main() {\n  int return_code = function_leaky();\n  return return_code;\n}\n```", "```cpp\n#include \"buggy.hpp\"\n\nint main() {\n  int return_code = function_use_after_free();\n  return return_code;\n}\n```", "```cpp\nadd_library(buggy \"\")\n\ntarget_sources(buggy\n  PRIVATE\n    buggy.cpp\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}/buggy.hpp\n  )\n\ntarget_include_directories(buggy\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}\n  )\n```", "```cpp\noption(ENABLE_ASAN \"Enable AddressSanitizer\" OFF)\n\nif(ENABLE_ASAN)\n  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n    message(STATUS \"AddressSanitizer enabled\")\n    target_compile_options(buggy\n      PUBLIC\n        -g -O1 -fsanitize=address -fno-omit-frame-pointer\n      )\n    target_link_libraries(buggy\n      PUBLIC\n        asan\n      )\n  else()\n    message(WARNING \"AddressSanitizer not supported for this compiler\")\n  endif()\nendif()\n```", "```cpp\nforeach(_test IN ITEMS leaky use_after_free)\n  add_executable(${_test} ${_test}.cpp)\n  target_link_libraries(${_test} buggy)\n\n  add_test(\n    NAME\n      ${_test}\n    COMMAND\n      $<TARGET_FILE:${_test}>\n    )\nendforeach()\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-03 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# process src/CMakeLists.txt\nadd_subdirectory(src)\n\nenable_testing()\n\n# allow to report to a cdash dashboard\ninclude(CTest)\n\n# process tests/CMakeLists.txt\nadd_subdirectory(tests)\n```", "```cpp\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=cmake-cookbook\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n```", "```cpp\nset(CTEST_PROJECT_NAME \"example\")\ncmake_host_system_information(RESULT _site QUERY HOSTNAME)\nset(CTEST_SITE ${_site})\nset(CTEST_BUILD_NAME \"${CMAKE_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n\nset(CTEST_SOURCE_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}\")\nset(CTEST_BINARY_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}/build\")\n\ninclude(ProcessorCount)\nProcessorCount(N)\nif(NOT N EQUAL 0)\n  set(CTEST_BUILD_FLAGS -j${N})\n  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})\nendif()\n\nctest_start(Experimental)\n\nctest_configure(\n  OPTIONS\n    -DENABLE_ASAN:BOOL=ON\n  )\n\nctest_build()\nctest_test()\n\nset(CTEST_MEMORYCHECK_TYPE \"AddressSanitizer\")\nctest_memcheck()\n\nctest_submit()\n```", "```cpp\n$ ctest -S dashboard.cmake -D CTEST_CMAKE_GENERATOR=\"Unix Makefiles\"\n\n   Each . represents 1024 bytes of output\n    . Size of output: 0K\n   Each symbol represents 1024 bytes of output.\n   '!' represents an error and '*' a warning.\n    . Size of output: 1K\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -DENABLE_ASAN=ON ..\n$ cmake --build .\n$ cmake --build . --target test\n\n    Start 1: leaky\n1/2 Test #1: leaky ............................***Failed 0.07 sec\n    Start 2: use_after_free\n2/2 Test #2: use_after_free ...................***Failed 0.04 sec\n\n0% tests passed, 2 tests failed out of 2\n```", "```cpp\n$ ./build/tests/leaky\n\n=================================================================\n==18536==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 8000 byte(s) in 1 object(s) allocated from:\n    #0 0x7ff984da1669 in operator new[](unsigned long) /build/gcc/src/gcc/libsanitizer/asan/asan_new_delete.cc:82\n    #1 0x564925c93fd2 in function_leaky() /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/src/buggy.cpp:7\n    #2 0x564925c93fb2 in main /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/tests/leaky.cpp:4\n    #3 0x7ff98403df49 in __libc_start_main (/usr/lib/libc.so.6+0x20f49)\n\nSUMMARY: AddressSanitizer: 8000 byte(s) leaked in 1 allocation(s).\n```", "```cpp\n$ ./build/tests/use_after_free\n\n=================================================================\n==18571==ERROR: AddressSanitizer: heap-use-after-free on address 0x6250000004d8 at pc 0x557ffa8b0102 bp 0x7ffe8c560200 sp 0x7ffe8c5601f0\nREAD of size 8 at 0x6250000004d8 thread T0\n #0 0x557ffa8b0101 in function_use_after_free() /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/src/buggy.cpp:28\n #1 0x557ffa8affb2 in main /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/tests/use_after_free.cpp:4\n #2 0x7ff1d6088f49 in __libc_start_main (/usr/lib/libc.so.6+0x20f49)\n #3 0x557ffa8afec9 in _start (/home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/build/tests/use_after_free+0xec9)\n\n0x6250000004d8 is located 984 bytes inside of 8000-byte region [0x625000000100,0x625000002040)\nfreed by thread T0 here:\n #0 0x7ff1d6ded5a9 in operator delete[](void*) /build/gcc/src/gcc/libsanitizer/asan/asan_new_delete.cc:128\n #1 0x557ffa8afffa in function_use_after_free() /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/src/buggy.cpp:24\n #2 0x557ffa8affb2 in main /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/tests/use_after_free.cpp:4\n #3 0x7ff1d6088f49 in __libc_start_main (/usr/lib/libc.so.6+0x20f49)\n\npreviously allocated by thread T0 here:\n #0 0x7ff1d6dec669 in operator new[](unsigned long) /build/gcc/src/gcc/libsanitizer/asan/asan_new_delete.cc:82\n #1 0x557ffa8affea in function_use_after_free() /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/src/buggy.cpp:19\n #2 0x557ffa8affb2 in main /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/tests/use_after_free.cpp:4\n #3 0x7ff1d6088f49 in __libc_start_main (/usr/lib/libc.so.6+0x20f49)\n\nSUMMARY: AddressSanitizer: heap-use-after-free /home/user/cmake-recipes/chapter-14/recipe-03/cxx-example/src/buggy.cpp:28 in function_use_after_free()\nShadow bytes around the buggy address:\n 0x0c4a7fff8040: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff8050: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff8060: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff8070: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff8080: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n=>0x0c4a7fff8090: fd fd fd fd fd fd fd fd fd fd fd[fd]fd fd fd fd\n 0x0c4a7fff80a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff80b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff80c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff80d0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n 0x0c4a7fff80e0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n Addressable: 00\n Partially addressable: 01 02 03 04 05 06 07\n Heap left redzone: fa\n Freed heap region: fd\n Stack left redzone: f1\n Stack mid redzone: f2\n Stack right redzone: f3\n Stack after return: f5\n Stack use after scope: f8\n Global redzone: f9\n Global init order: f6\n Poisoned by user: f7\n Container overflow: fc\n Array cookie: ac\n Intra object redzone: bb\n ASan internal: fe\n Left alloca redzone: ca\n Right alloca redzone: cb\n==18571==ABORTING\n```", "```cpp\n$ mkdir -p build_no_asan\n$ cd build_no_asan\n$ cmake ..\n$ cmake --build .\n$ cmake --build . --target test\n\n    Start 1: leaky\n1/2 Test #1: leaky ............................ Passed 0.00 sec\n    Start 2: use_after_free\n2/2 Test #2: use_after_free ................... Passed 0.00 sec\n\n100% tests passed, 0 tests failed out of 2\n```", "```cpp\nset(CTEST_PROJECT_NAME \"example\")\ncmake_host_system_information(RESULT _site QUERY HOSTNAME)\nset(CTEST_SITE ${_site})\nset(CTEST_BUILD_NAME \"${CMAKE_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n```", "```cpp\nset(CTEST_SOURCE_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}\")\nset(CTEST_BINARY_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}/build\")\n```", "```cpp\nset(CTEST_CMAKE_GENERATOR \"Unix Makefiles\")\n```", "```cpp\n$ ctest -S dashboard.cmake -D CTEST_CMAKE_GENERATOR=\"Unix Makefiles\"\n```", "```cpp\ninclude(ProcessorCount)\nProcessorCount(N)\nif(NOT N EQUAL 0)\n  set(CTEST_BUILD_FLAGS -j${N})\n  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})\nendif()\n```", "```cpp\nctest_start(Experimental)\n\nctest_configure(\n  OPTIONS\n    -DENABLE_ASAN:BOOL=ON\n  )\n```", "```cpp\nctest_build()\nctest_test()\n\nset(CTEST_MEMORYCHECK_TYPE \"AddressSanitizer\")\nctest_memcheck()\n\nctest_submit()\n```", "```cpp\n#include <chrono>\n#include <iostream>\n#include <thread>\n\nstatic const int num_threads = 16;\n\nvoid increase(int i, int &s) {\n  std::this_thread::sleep_for(std::chrono::seconds(1));\n  std::cout << \"thread \" << i << \" increases \" << s++ << std::endl;\n}\n\nint main() {\n  std::thread t[num_threads];\n\n  int s = 0;\n\n  // start threads\n  for (auto i = 0; i < num_threads; i++) {\n    t[i] = std::thread(increase, i, std::ref(s));\n  }\n\n  // join threads with main thread\n  for (auto i = 0; i < num_threads; i++) {\n    t[i].join();\n  }\n\n  std::cout << \"final s: \" << s << std::endl;\n\n  return 0;\n}\n```", "```cpp\n$ ./example\n\nthread thread 0 increases 01 increases 1\nthread 9 increases 2\nthread 4 increases 3\nthread 10 increases 4\nthread 2 increases 5\nthread 3 increases 6\nthread 13 increases 7\nthread thread 7 increases 8\nthread 14 increases 9\nthread 8 increases 10\nthread 12 increases 11\nthread 15 increases 12\nthread 11 increases 13\n```", "```cpp\n5 increases 14\nthread 6 increases 15\n\nfinal s: 16\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(Threads REQUIRED)\n\nadd_executable(example example.cpp)\n\ntarget_link_libraries(example\n  PUBLIC\n    Threads::Threads\n  )\n```", "```cpp\noption(ENABLE_TSAN \"Enable ThreadSanitizer\" OFF)\n\nif(ENABLE_TSAN)\n  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n    message(STATUS \"ThreadSanitizer enabled\")\n    target_compile_options(example\n      PUBLIC\n        -g -O1 -fsanitize=thread -fno-omit-frame-pointer -fPIC\n      )\n    target_link_libraries(example\n      PUBLIC\n        tsan\n      )\n  else()\n    message(WARNING \"ThreadSanitizer not supported for this compiler\")\n  endif()\nendif()\n```", "```cpp\nenable_testing()\n\n# allow to report to a cdash dashboard\ninclude(CTest)\n\nadd_test(\n  NAME\n    example\n  COMMAND\n    $<TARGET_FILE:example>\n  )\n```", "```cpp\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=cmake-cookbook\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n```", "```cpp\nset(CTEST_PROJECT_NAME \"example\")\ncmake_host_system_information(RESULT _site QUERY HOSTNAME)\nset(CTEST_SITE ${_site})\nset(CTEST_BUILD_NAME \"${CMAKE_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n\nset(CTEST_SOURCE_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}\")\nset(CTEST_BINARY_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}/build\")\n\ninclude(ProcessorCount)\nProcessorCount(N)\nif(NOT N EQUAL 0)\n  set(CTEST_BUILD_FLAGS -j${N})\n  set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})\nendif()\n\nctest_start(Experimental)\n\nctest_configure(\n  OPTIONS\n    -DENABLE_TSAN:BOOL=ON\n  )\n\nctest_build()\nctest_test()\n\nset(CTEST_MEMORYCHECK_TYPE \"ThreadSanitizer\")\nctest_memcheck()\n\nctest_submit()\n```", "```cpp\n$ ctest -S dashboard.cmake -D CTEST_CMAKE_GENERATOR=\"Unix Makefiles\"\n\n   Each . represents 1024 bytes of output\n    . Size of output: 0K\n   Each symbol represents 1024 bytes of output.\n   '!' represents an error and '*' a warning.\n    . Size of output: 0K\n```", "```cpp\noption(ENABLE_TSAN \"Enable ThreadSanitizer\" OFF)\n\nif(ENABLE_TSAN)\n  if(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n    message(STATUS \"ThreadSanitizer enabled\")\n    target_compile_options(example\n      PUBLIC\n        -g -O1 -fsanitize=thread -fno-omit-frame-pointer -fPIC\n      )\n    target_link_libraries(example\n      PUBLIC\n        tsan\n      )\n  else()\n    message(WARNING \"ThreadSanitizer not supported for this compiler\")\n  endif()\nendif()\n```", "```cpp\n# ...\n\nctest_start(Experimental)\n\nctest_configure(\n  OPTIONS\n    -DENABLE_TSAN:BOOL=ON\n  )\n\nctest_build()\nctest_test()\n\nset(CTEST_MEMORYCHECK_TYPE \"ThreadSanitizer\")\nctest_memcheck()\n\nctest_submit()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -DENABLE_TSAN=ON ..\n$ cmake --build .\n$ cmake --build . --target test\n\n Start 1: example\n1/1 Test #1: example ..........................***Failed 1.07 sec\n\n0% tests passed, 1 tests failed out of 1\n\n$ ./build/example \n\nthread 0 increases 0\n==================\nWARNING: ThreadSanitizer: data race (pid=24563)\n\n... lots of output ...\n\nSUMMARY: ThreadSanitizer: data race /home/user/cmake-recipes/chapter-14/recipe-04/cxx-example/example.cpp:9 in increase(int, int&)\n```"]