["```cpp\nadd_custom_target(Name [ALL] [command1 [args1...]]\n                  [COMMAND command2 [args2...] ...]\n                  [DEPENDS depend depend depend ... ]\n                  [BYPRODUCTS [files...]]\n                  [WORKING_DIRECTORY dir]\n                  [COMMENT comment]\n                  [JOB_POOL job_pool]\n                  [VERBATIM] [USES_TERMINAL]\n                  [COMMAND_EXPAND_LISTS]\n                  [SOURCES src1 [src2...]])\n```", "```cpp\nadd_executable(SomeExe)\nadd_custom_target(CreateHash ALL\n                  COMMAND Somehasher $<TARGET_FILE:SomeExe>\n)\n```", "```cpp\nadd_custom_command(TARGET <target>\n                   PRE_BUILD | PRE_LINK | POST_BUILD\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [BYPRODUCTS [files...]]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [VERBATIM] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS])\n```", "```cpp\nadd_executable(MyExecutable)\nadd_custom_command(TARGET MyExecutable\n   POST_BUILD\n  COMMAND hasher $<TARGET_FILE:ch8_custom_command_example>\n    ${CMAKE_CURRENT_BINARY_DIR}/MyExecutable.sha256\nCOMMENT \"Creating hash for MyExecutable\"\n)\n```", "```cpp\nadd_custom_command(OUTPUT output1 [output2 ...]\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [MAIN_DEPENDENCY depend]\n                   [DEPENDS [depends...]]\n                   [BYPRODUCTS [files...]]\n                   [IMPLICIT_DEPENDS <lang1> depend1\n                                    [<lang2> depend2] ...]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [DEPFILE depfile]\n                   [JOB_POOL job_pool]\n                   [VERBATIM] [APPEND] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS])\n```", "```cpp\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/main.cpp\nCOMMAND sourceFileGenerator ${CMAKE_CURRENT_SOURCE_DIR}/message.txt\n  ${CMAKE_CURRENT_BINARY_DIR}/main.cpp\nCOMMENT \"Creating main.cpp frommessage.txt\"\nDEPENDS message.txt\nVERBATIM\n)\nadd_executable(\nch8_create_source_file_example\n${CMAKE_CURRENT_BINARY_DIR}/main.cpp\n)\n```", "```cpp\nadd_custom_command(OUTPUT archive.tar.gz\nCOMMAND cmake -E tar czf ${CMAKE_CURRENT_BINARY_DIR}/archive.tar.gz\n  $<TARGET_FILE:MyTarget>\nCOMMENT \"Creating Archive for MyTarget\"\nVERBATIM\n)\nadd_custom_command(OUTPUT archive.tar.gz\nCOMMAND cmake -E tar czf ${CMAKE_CURRENT_BINARY_DIR}/archive.tar.gz\n  ${CMAKE_CURRENT_SOURCE_DIR}/SomeFile.txt\nAPPEND\n)\n```", "```cpp\nCMake Error at CMakeLists.txt:30 (add_custom_command):\n  Attempt to add a custom rule to output\n     /create_hash_example/build/hash_example.md5.rule\n   which already has a custom rule.\n```", "```cpp\nadd_custom_target(create_archive ALL DEPENDS\n    ${CMAKE_CURRENT_BINARY_DIR}/archive.tar.gz\n)\n```", "```cpp\nexecute_process(COMMAND <cmd1> [<arguments>]\n                [COMMAND <cmd2> [<arguments>]]...\n                [WORKING_DIRECTORY <directory>]\n                [TIMEOUT <seconds>]\n                [RESULT_VARIABLE <variable>]\n                [RESULTS_VARIABLE <variable>]\n                [OUTPUT_VARIABLE <variable>]\n                [ERROR_VARIABLE <variable>]\n                [INPUT_FILE <file>]\n                [OUTPUT_FILE <file>]\n                [ERROR_FILE <file>]\n                [OUTPUT_QUIET]\n                [ERROR_QUIET]\n                [COMMAND_ECHO <where>]\n                [OUTPUT_STRIP_TRAILING_WHITESPACE]\n                [ERROR_STRIP_TRAILING_WHITESPACE]\n                [ENCODING <name>]\n                [ECHO_OUTPUT_VARIABLE]\n                [ECHO_ERROR_VARIABLE]\n                [COMMAND_ERROR_IS_FATAL <ANY|LAST>])\n```", "```cpp\nexecute_process(\n   COMMAND SomeExecutable\n   COMMAND AnotherExecutable\n   COMMAND_ERROR_IS_FATAL_ANY\n)\n```", "```cpp\nfind_package(Git REQUIRED)\nexecute_process(COMMAND ${GIT_EXECUTABLE} \"rev-parse\" \"--short\"\n  \"HEAD\"\nOUTPUT_VARIABLE GIT_REVISION\nOUTPUT_STRIP_TRAILING_WHITESPACE\nCOMMAND_ERROR_IS_FATAL ANY\nWORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nadd_executable(SomeExe src/main.cpp)\ntarget_compile_definitions(SomeExe PRIVATE VERSION=\n  \\\"${GIT_REVISION}\\\")\n```", "```cpp\nfile(COPY_FILE old_file new_file)\n```", "```cpp\nconfigure_file(<input> <output>\n               [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS |\n                FILE_PERMISSIONS <permissions>...]\n               [COPYONLY] [ESCAPE_QUOTES] [@ONLY]\n               [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])\n```", "```cpp\nHello ${GUEST} from @GREETER@\n```", "```cpp\nset(GUEST \"World\")\nset(GREETER \"The Universe\")\nconfigure_file(hello.txt.in hello.txt)\n```", "```cpp\n#define CMAKE_BEST_PRACTICES_VERSION \"@GIT_REVISION@\"\nThe CMakeLists.txt could look something like this:\nexecute_process(\n    COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD\n    OUTPUT_VARIABLE GIT_REVISION\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    COMMAND_ERROR_IS_FATAL ANY\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nconfigure_file(version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/src\n  /version.h @ONLY)\n```", "```cpp\n#cmakedefine GIT_VERSION_ENABLE\n#cmakedefine GIT_VERSION \"@GIT_REVISION@\"\n```", "```cpp\noption(GIT_VERSION_ENABLE \"Define revision in a header file\" ON)\nif(GIT_VERSION_ENABLE)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD\n    OUTPUT_VARIABLE GIT_REVISION\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\nendif()\nconfigure_file(version.h.in ${CMAKE_CURRENT_SOURCE_DIR}/src/version.h @ONLY)\n```", "```cpp\n#define GIT_VERSION_ENABLE\n#define CMAKE_BEST_PRACTICES_VERSION \"c030d83\"\n```", "```cpp\n/* #undef GIT_VERSION_ENABLE */\n/* #undef GIT_REVISION */\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\nif(CMAKE_ARGC LESS 5)\n    message(FATAL_ERROR \"Usage: cmake -P CreateSha256.cmake\n      file_to_hash target_file\")\nendif()\nset(FILE_TO_HASH ${CMAKE_ARGV3})\nset(TARGET_FILE ${CMAKE_ARGV4})\n# Read the source file and generate the hash for it\nfile(SHA256 \"${FILE_TO_HASH}\" GENERATED_HASH)\n# write the hash to a new file\nfile(WRITE \"${TARGET_FILE}\" \"${GENERATED_HASH}\")\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\nif(NOT FILE_TO_HASH OR NOT TARGET_FILE)\n   message(FATAL_ERROR \"Usage: cmake –DFILE_TO_HASH=<intput_file> \\\n-DTARGET_FILE=<target file> -P CreateSha256.cmake\")\nendif()\n# Read the source file and generate the hash for it\nfile(SHA256 \"${FILE_TO_HASH}\" GENERATED_HASH)\n# write the hash to a new file\nfile(WRITE \"${TARGET_FILE}\" \"${GENERATED_HASH}\")\n```", "```cpp\ncmake –DFILE_TO_HASH=<input>\n      -DTARGET_FILE=<target> -P CreateSha256.cmake\n```", "```cpp\nadd_custom_target(Create_hash_target ALL\nCOMMAND cmake -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake/\n  CreateSha256.cmake $<TARGET_FILE:SomeTarget>\n   ${CMAKE_CURRENT_BINARY_DIR}/hash_example.sha256\n)\nadd_custom_command(TARGET SomeTarget\nPOST_BUILD\nCOMMAND cmake -P ${CMAKE_CURRENT_SOURCE_DIR}/cmake\n  /CreateSha256.cmake $<TARGET_FILE:SomeTarget>\n    ${CMAKE_CURRENT_BINARY_DIR}/hash_example.sha256\n)\n```"]