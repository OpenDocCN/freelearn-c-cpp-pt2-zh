["```cpp\n./configure make\n```", "```cpp\nmake install\n```", "```cpp\ncmake --version\n```", "```cpp\ncmake version 3.23.2\nCMake suite is maintained and supported by Kitware (kitware.com/cmake).\n```", "```cpp\ngit clone   https://github.com/PacktPublishing/CMake-Best-Practices---2nd-Edition.git\ncd CMake-Best-Practices---2nd-Edition/chapter01/simple_executable\ncmake -S . -B build\ncmake -–build ./build\n```", "```cpp\n.\n├── CMakeLists.txt\n└── src\n    └── main.cpp\n```", "```cpp\nmkdir build\ncd build\ncmake ..\ncmake --build\n```", "```cpp\ncmake_minimum_required(VERSION 3.23)\nproject(\n  \"chapter1\"\n  VERSION 1.0\n  DESCRIPTION \"A simple project to demonstrate basic CMake usage\"\n  LANGUAGES CXX)\nadd_executable(ch1_simple_executable)\ntarget_sources(ch1_simple_executable PRIVATE src/main.cpp)\n```", "```cpp\ncmake .. -G Ninja\n```", "```cpp\n├── chapter_1\n│   ├── CMakeLists.txt\n│   └── src\n│       └── main.cpp\n├── CMakeLists.txt\n```", "```cpp\n├── build\n│   ├── chapter_1\n│   │   └── CMakeFiles\n│   │   ├── CMakeCache.txt\n│   └── CMakeFiles\n```", "```cpp\ntarget_sources(MyLibrary\n                PUBLIC include/api.h\n                PRIVATE src/internals.cpp src/foo.cpp)\n```", "```cpp\n project(\n\"chapter1\"\nVERSION 1.0\nDESCRIPTION \"A simple C++ project to demonstrate basic CMake usage\"\nLANGUAGES CXX\n)\n```", "```cpp\n.\n├── CMakeLists.txt #defines project(\"CMakeBestPractices\n\"...)\n├── chapter_1\n│   ├── CMakeLists.txt # defines project(\"Chapter 1\"...)\n```", "```cpp\nset(MYVAR \"1234\")\n```", "```cpp\nunset(MYVAR)\n```", "```cpp\nmessage(STATUS \"The content of MYVAR are ${MYVAR}\")\n```", "```cpp\n${outer_${inner_variable}_variable}\n```", "```cpp\nset(MYLIST abc def ghi)\n set(MYLIST \"abc;def;ghi\")\n```", "```cpp\nlist(FIND MYLIST abc ABC_INDEX)\nlist(GET MYLIST ${ABC_INDEX} ABC)\n```", "```cpp\nlist(APPEND MYLIST \"xyz\")\n```", "```cpp\n set(ch1_MYVAR foo CACHE STRING \"Variable foo that configures bar\")\n```", "```cpp\noption(CHAPTER1_PRINT_LANGUAGE_EXAMPLES \"Print examples for each\n  language\" OFF)\ninclude(CMakeDependentOption)\ncmake_dependent_option(CHAPTER1_PRINT_HELLO_WORLD \"print a greeting\n  from chapter1 \" ON CHAPTER1_PRINT_LANGUAGE_EXAMPLES ON)\n```", "```cpp\nset_property(<Scope> <EntityName>\n              [APPEND] [APPEND_STRING]\n              PROPERTY <propertyName> [<values>])\n```", "```cpp\n if(DEFINED MY_VAR)\n```", "```cpp\nif(MYVAR STREQUAL \"FOO\")\n```", "```cpp\n set(MYVAR 0)\nwhile(MYVAR LESS \"5\")\n  message(STATUS \"Chapter1: MYVAR is '${MYVAR}'\")\n  math(EXPR MYVAR \"${MYVAR}+1\")\nendwhile()\n```", "```cpp\nforeach(ITEM IN LISTS MYLIST)\n# do something with ${ITEM}\nendforeach()\n```", "```cpp\nforeach(ITEM RANGE 0 10)\n# do something with ${ITEM}\nendforeach()\n```", "```cpp\nfunction(foo ARG1)\n# do something\nendfunction()\n# invoke foo with parameter bar\nfoo(\"bar\")\n```", "```cpp\ntarget_compile_definitions(my_target PRIVATE\n    $<$<CONFIG:Debug>:MY_DEBUG_FLAG>\n    $<$<CONFIG:Release>:MY_RELEASE_FLAG>\n)\n```", "```cpp\n$<LOWER_CASE:CMake>\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\ncmake_policy(SET CMP0121 OLD)\nlist(APPEND MYLIST \"abc;def;ghi\")\nlist(GET MYLIST \"any\" OUT_VAR)\n```", "```cpp\nCXX=g++-7 cmake /path/to/the/source\n```", "```cpp\ncmake -D CMAKE_CXX_COMPILER=g++-7 /path/to/source\n```", "```cpp\n{\n\"version\": 6,\n\"cmakeMinimumRequired\": {\n\"major\": 3,\n\"minor\": 23,\n\"patch\": 0\n},\n\"configurePresets\": [...],\n\"buildPresets\": [...],\n\"testPresets\": [...],\n\"packagePresets \": [...],\n\"workflowPresets\": [...],}\n```", "```cpp\n    cmake -build /path/to/build\n    ```", "```cpp\n    ctest\n    ```", "```cpp\n    cpack\n    ```"]