["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\nctest [<options>]\n```", "```cpp\nctest --build-and-test <path-to-source> <path-to-build>\n      --build-generator <generator> [<options>...]\n      [--build-options <opts>...] \n      [--test-command <command> [<args>...]]\n```", "```cpp\nctest --build-and-test project/source-tree /tmp/build-tree --build-generator \"Unix Makefiles\" --test-command ctest\n```", "```cpp\n# ctest -N\nTest project /tmp/b\n  Test #1: SumAddsTwoInts\n  Test #2: MultiplyMultipliesTwoInts\nTotal Tests: 2\n```", "```cpp\nset_tests_properties(<name> PROPERTIES LABELS \"<label>\")\n```", "```cpp\n- CMakeLists.txt\n- src\n  |- CMakeLists.txt\n  |- calc.cpp\n  |- calc.h\n  |- main.cpp\n- test\n  |- CMakeLists.txt\n  |- calc_test.cpp\n```", "```cpp\n#include <iostream>\n#include \"calc.h\"\nusing namespace std;\nint main() {\n  Calc c;\n  cout << \"2 + 2 = \" << c.Sum(2, 2) << endl;\n  cout << \"3 * 3 = \" << c.Multiply(3, 3) << endl;\n}\n```", "```cpp\n#pragma once\nclass Calc {\n public:\n   int Sum(int a, int b);\n   int Multiply(int a, int b);\n};\n```", "```cpp\n#include \"calc.h\"\nint Calc::Sum(int a, int b) {\n  return a + b;\n}\nint Calc::Multiply(int a, int b) {\n  return a * a; // a mistake!\n}\n```", "```cpp\n#include \"calc.h\"\n#include <cstdlib>\nvoid SumAddsTwoIntegers() {\n  Calc sut;\n  if (4 != sut.Sum(2, 2))\n    std::exit(1);\n}\nvoid MultiplyMultipliesTwoIntegers() {\n  Calc sut;\n  if(3 != sut.Multiply(1, 3))\n    std::exit(1);\n}\n```", "```cpp\n#include <string>\nvoid SumAddsTwoIntegers();\nvoid MultiplyMultipliesTwoIntegers();\nint main(int argc, char *argv[]) {\n  if (argc < 2 || argv[1] == std::string(\"1\"))\n    SumAddsTwoIntegers();\n  if (argc < 2 || argv[1] == std::string(\"2\"))\n    MultiplyMultipliesTwoIntegers();\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(NoFrameworkTests CXX)\nenable_testing()\nadd_subdirectory(src bin)\nadd_subdirectory(test)\n```", "```cpp\nadd_executable(main main.cpp calc.cpp)\n```", "```cpp\nadd_executable(unit_tests\n               unit_tests.cpp\n               calc_test.cpp\n               ../src/calc.cpp)\ntarget_include_directories(unit_tests PRIVATE ../src)\nadd_test(NAME SumAddsTwoInts COMMAND unit_tests 1)\nadd_test(NAME MultiplyMultipliesTwoInts COMMAND unit_tests 2)\n```", "```cpp\n# ctest\nTest project /tmp/b\n    Start 1: SumAddsTwoInts\n1/2 Test #1: SumAddsTwoInts ...................   Passed    0.00 sec\n    Start 2: MultiplyMultipliesTwoInts\n2/2 Test #2: MultiplyMultipliesTwoInts ........***Failed    0.00 sec\n50% tests passed, 1 tests failed out of 2\nTotal Test time (real) =   0.00 sec\nThe following tests FAILED:\n          2 - MultiplyMultipliesTwoInts (Failed)\nErrors while running CTest\nOutput from these tests are in: /tmp/b/Testing/Temporary/LastTest.log\nUse \"--rerun-failed --output-on-failure\" to re-run the failed cases verbosely.\n```", "```cpp\n#include <iostream>\n#include \"calc.h\"\nusing namespace std;\nint run() {\n  Calc c;\n  cout << \"2 + 2 = \" << c.Sum(2, 2) << endl;\n  cout << \"3 * 3 = \" << c.Multiply(3, 3) << endl;\n  return 0;\n}\n```", "```cpp\nint run(); // declaration\nint main() {\n  run();\n}\n```", "```cpp\nadd_library(sut STATIC calc.cpp run.cpp)\ntarget_include_directories(sut PUBLIC .)\nadd_executable(bootstrap bootstrap.cpp)\ntarget_link_libraries(bootstrap PRIVATE sut)\n```", "```cpp\nadd_executable(unit_tests\n               unit_tests.cpp\n               calc_test.cpp\n               run_test.cpp)\ntarget_link_libraries(unit_tests PRIVATE sut)\n```", "```cpp\nadd_test(NAME SumAddsTwoInts COMMAND unit_tests 1)\nadd_test(NAME MultiplyMultipliesTwoInts COMMAND unit_tests 2)\nadd_test(NAME RunOutputsCorrectEquations COMMAND unit_tests 3)\n```", "```cpp\n#include <catch2/catch_test_macros.hpp>\n#include \"calc.h\"\nTEST_CASE(\"SumAddsTwoInts\", \"[calc]\") {\n  Calc sut;\n  CHECK(4 == sut.Sum(2, 2));\n}\nTEST_CASE(\"MultiplyMultipliesTwoInts\", \"[calc]\") {\n  Calc sut;\n  CHECK(12 == sut.Multiply(3, 4));\n}\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  Catch2\n  GIT_REPOSITORY https://github.com/catchorg/Catch2.git\n  GIT_TAG        v3.0.0\n)\nFetchContent_MakeAvailable(Catch2)\n```", "```cpp\nadd_executable(unit_tests \n               calc_test.cpp \n               run_test.cpp)\ntarget_link_libraries(unit_tests PRIVATE \n                      sut Catch2::Catch2WithMain)\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH ${catch2_SOURCE_DIR}/extras)\ninclude(Catch)\ncatch_discover_tests(unit_tests)\n```", "```cpp\n# ./test/unit_tests\nunit_tests is a Catch v3.0.0 host application.\nRun with -? for options\n--------------------------------------------------------------\nMultiplyMultipliesTwoInts\n--------------------------------------------------------------\nexamples/chapter08/03-catch2/test/calc_test.cpp:9\n..............................................................\nexamples/chapter08/03-catch2/test/calc_test.cpp:11: FAILED:\n  CHECK( 12 == sut.Multiply(3, 4) )\nwith expansion:\n  12 == 9\n==============================================================\ntest cases: 3 | 2 passed | 1 failed\nassertions: 3 | 2 passed | 1 failed\n```", "```cpp\n#include <gtest/gtest.h>\n#include \"calc.h\"\nclass CalcTestSuite : public ::testing::Test {\n protected:\n  Calc sut_;\n};\nTEST_F(CalcTestSuite, SumAddsTwoInts) {\n  EXPECT_EQ(4, sut_.Sum(2, 2));\n}\nTEST_F(CalcTestSuite, MultiplyMultipliesTwoInts) {\n  EXPECT_EQ(12, sut_.Multiply(3, 4));\n}\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG master\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n```", "```cpp\nadd_executable(unit_tests\n               calc_test.cpp\n               run_test.cpp)\ntarget_link_libraries(unit_tests PRIVATE sut gtest_main)\ninclude(GoogleTest)\ngtest_discover_tests(unit_tests)\n```", "```cpp\n# ./test/unit_tests --gtest_brief=1\n~/examples/chapter08/04-gtest/test/calc_test.cpp:15: Failure\nExpected equality of these values:\n  12\n  sut_.Multiply(3, 4)\n    Which is: 9\n[  FAILED  ] CalcTestSuite.MultiplyMultipliesTwoInts (0 ms)\n[==========] 3 tests from 2 test suites ran. (0 ms total)\n[  PASSED  ] 2 tests.\n```", "```cpp\n#pragma once\nclass RandomNumberGenerator {\n public:\n  virtual int Get() = 0;\n  virtual ~RandomNumberGenerator() = default;\n};\n```", "```cpp\n#pragma once\n#include \"rng.h\"\nclass Calc {\n  RandomNumberGenerator* rng_;\n public:\n   Calc(RandomNumberGenerator* rng);\n   int Sum(int a, int b);\n   int Multiply(int a, int b);\n   int AddRandomNumber(int a);\n};\n```", "```cpp\n#include \"calc.h\"\nCalc::Calc(RandomNumberGenerator* rng) {\n  rng_ = rng;\n}\nint Calc::Sum(int a, int b) {\n  return a + b;\n}\nint Calc::Multiply(int a, int b) {\n  return a * b; // now corrected\n}\nint Calc::AddRandomNumber(int a) {\n  return a + rng_->Get();\n}\n```", "```cpp\n#include <random>\n#include \"rng_mt19937.h\"\nint RandomNumberGeneratorMt19937::Get() {\n  std::random_device rd;\n  std::mt19937 gen(rd());\n  std::uniform_int_distribution<> distrib(1, 6);\n  return distrib(gen);\n}\n```", "```cpp\n#include \"rng.h\"\nclass RandomNumberGeneratorMt19937\n      : public RandomNumberGenerator {\n public:\n  int Get() override;\n};\n```", "```cpp\n#include <iostream>\n#include \"calc.h\"\n#include \"rng_mt19937.h\"\nusing namespace std;\nint run() {\n  auto rng = new RandomNumberGeneratorMt19937();\n  Calc c(rng);\n  cout << \"Random dice throw + 1 = \" \n       << c.AddRandomNumber(1) << endl;\n  delete rng;\n  return 0; \n}\n```", "```cpp\n#pragma once\n#include \"gmock/gmock.h\"\nclass RandomNumberGeneratorMock : public\n RandomNumberGenerator {\n public:\n  MOCK_METHOD(int, Get, (), (override));\n};\n```", "```cpp\nMOCK_METHOD(<return type>, <method name>, \n           (<argument list>), (<keywords>))\n```", "```cpp\n#include <gtest/gtest.h>\n#include \"calc.h\"\n#include \"mocks/rng_mock.h\"\nusing namespace ::testing;\nclass CalcTestSuite : public Test {\n protected:\n  RandomNumberGeneratorMock rng_mock_;\n  Calc sut_{&rng_mock_};\n};\nTEST_F(CalcTestSuite, AddRandomNumberAddsThree) {\n  EXPECT_CALL(rng_mock_,\nGet()).Times(1).WillOnce(Return(3));\n  EXPECT_EQ(4, sut_.AddRandomNumber(1));\n}\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.11.0\n)\n# For Windows: Prevent overriding the parent project's\n  compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\nadd_executable(unit_tests\n               calc_test.cpp\n               run_test.cpp)\ntarget_link_libraries(unit_tests PRIVATE sut gtest_main\ngmock)\ninclude(GoogleTest)\ngtest_discover_tests(unit_tests)\n```", "```cpp\nadd_library(sut STATIC calc.cpp run.cpp rng_mt19937.cpp)\ntarget_include_directories(sut PUBLIC .)\nif (CMAKE_BUILD_TYPE STREQUAL Debug)\n  target_compile_options(sut PRIVATE --coverage)\n  target_link_options(sut PUBLIC --coverage)\n  add_custom_command(TARGET sut PRE_BUILD COMMAND\n                     find ${CMAKE_BINARY_DIR} -type f\n                     -name '*.gcda' -exec rm {} +)\nendif()\nadd_executable(bootstrap bootstrap.cpp)\ntarget_link_libraries(bootstrap PRIVATE sut)\n```", "```cpp\nfunction(AddCoverage target)\n  find_program(LCOV_PATH lcov REQUIRED)\n  find_program(GENHTML_PATH genhtml REQUIRED)\n  add_custom_target(coverage\n    COMMENT \"Running coverage for ${target}...\"\n    COMMAND ${LCOV_PATH} -d . --zerocounters\n    COMMAND $<TARGET_FILE:${target}>\n    COMMAND ${LCOV_PATH} -d . --capture -o coverage.info\n    COMMAND ${LCOV_PATH} -r coverage.info '/usr/include/*' \n                         -o filtered.info\n    COMMAND ${GENHTML_PATH} -o coverage filtered.info \n      --legend\n    COMMAND rm -rf coverage.info filtered.info\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\nendfunction()\n```", "```cpp\n#!/bin/bash\nexec llvm-cov gcov \"$@\"\n```", "```cpp\n--gcov-tool ${CMAKE_SOURCE_DIR}/cmake/gcov-llvm-wrapper.sh\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Coverage CXX)\nenable_testing()\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\nadd_subdirectory(src bin)\nadd_subdirectory(test)\n```", "```cpp\n# ... skipped unit_tests target declaration for brevity\ninclude(Coverage)\nAddCoverage(unit_tests)\ninclude(GoogleTest)\ngtest_discover_tests(unit_tests)\n```", "```cpp\n# cmake -B <binary_tree> -S <source_tree> \n  -DCMAKE_BUILD_TYPE=Debug\n# cmake --build <binary_tree> -t coverage\n```", "```cpp\nWriting directory view page.\nOverall coverage rate:\n  lines......: 95.2% (20 of 21 lines)\n  functions..: 75.0% (6 of 8 functions)\n[100%] Built target coverage\n```"]