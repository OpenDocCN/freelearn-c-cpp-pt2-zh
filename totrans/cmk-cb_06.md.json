["```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nadd_custom_target(unpack-eigen\n  ALL\n  COMMAND\n    ${CMAKE_COMMAND} -E tar xzf ${CMAKE_CURRENT_SOURCE_DIR}/eigen-eigen-5a0156e40feb.tar.gz\n  COMMAND\n    ${CMAKE_COMMAND} -E rename eigen-eigen-5a0156e40feb eigen-3.3.4\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  COMMENT\n    \"Unpacking Eigen3 in ${CMAKE_CURRENT_BINARY_DIR}/eigen-3.3.4\"\n  )\n```", "```cpp\nadd_executable(linear-algebra linear-algebra.cpp)\n```", "```cpp\nadd_dependencies(linear-algebra unpack-eigen)\n```", "```cpp\ntarget_include_directories(linear-algebra\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/eigen-3.3.4\n  )\n```", "```cpp\nadd_custom_target(unpack-eigen\n  ALL\n  COMMAND\n    ${CMAKE_COMMAND} -E tar xzf ${CMAKE_CURRENT_SOURCE_DIR}/eigen-eigen-5a0156e40feb.tar.gz\n  COMMAND\n    ${CMAKE_COMMAND} -E rename eigen-eigen-5a0156e40feb eigen-3.3.4\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  COMMENT\n    \"Unpacking Eigen3 in ${CMAKE_CURRENT_BINARY_DIR}/eigen-3.3.4\"\n  )\n```", "```cpp\nUsage: cmake -E <command> [arguments...]\nAvailable commands: \n  capabilities - Report capabilities built into cmake in JSON format\n  chdir dir cmd [args...] - run command in a given directory\n  compare_files file1 file2 - check if file1 is same as file2\n  copy <file>... destination - copy files to destination (either file or directory)\n  copy_directory <dir>... destination - copy content of <dir>... directories to 'destination' directory\n  copy_if_different <file>... destination - copy files if it has changed\n  echo [<string>...] - displays arguments as text\n  echo_append [<string>...] - displays arguments as text but no new line\n  env [--unset=NAME]... [NAME=VALUE]... COMMAND [ARG]...\n                            - run command in a modified environment\n  environment - display the current environment\n  make_directory <dir>... - create parent and <dir> directories\n  md5sum <file>... - create MD5 checksum of files\n  remove [-f] <file>... - remove the file(s), use -f to force it\n  remove_directory dir - remove a directory and its contents\n  rename oldname newname - rename a file or directory (on one volume)\n  server - start cmake in server mode\n  sleep <number>... - sleep for given number of seconds\n  tar [cxt][vf][zjJ] file.tar [file/dir1 file/dir2 ...]\n                            - create or extract a tar or zip archive\n  time command [args...] - run command and return elapsed time\n  touch file - touch a file.\n  touch_nocreate file - touch a file but do not create it.\nAvailable on UNIX only:\n  create_symlink old new - create a symbolic link new -> old\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-02 LANGUAGES NONE)\n```", "```cpp\nfind_package(PythonInterp REQUIRED)\n```", "```cpp\n# this is set as variable to prepare\n# for abstraction using loops or functions\nset(_module_name \"cffi\")\n\nexecute_process(\n  COMMAND\n    ${PYTHON_EXECUTABLE} \"-c\" \"import ${_module_name}; print(${_module_name}.__version__)\"\n  OUTPUT_VARIABLE _stdout\n  ERROR_VARIABLE _stderr\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  ERROR_STRIP_TRAILING_WHITESPACE\n  )\n```", "```cpp\nif(_stderr MATCHES \"ModuleNotFoundError\")\n  message(STATUS \"Module ${_module_name} not found\")\nelse()\n  message(STATUS \"Found module ${_module_name} v${_stdout}\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n-- Found PythonInterp: /home/user/cmake-cookbook/chapter-05/recipe-02/example/venv/bin/python (found version \"3.6.5\") \n-- Found module cffi v1.11.5\n```", "```cpp\nset(_module_name \"cffi\")\n\nexecute_process(\n  COMMAND\n    ${PYTHON_EXECUTABLE} \"-c\" \"import ${_module_name}; print(${_module_name}.__version__)\"\n  OUTPUT_VARIABLE _stdout\n  ERROR_VARIABLE _stderr\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  ERROR_STRIP_TRAILING_WHITESPACE\n  )\n\nif(_stderr MATCHES \"ModuleNotFoundError\")\n  message(STATUS \"Module ${_module_name} not found\")\nelse()\n  message(STATUS \"Found module ${_module_name} v${_stdout}\")\nendif()\n```", "```cpp\nmessage(STATUS \"Found module ${_module_name} v${_stdout}\")\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03 LANGUAGES CXX Fortran)\n```", "```cpp\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(BLAS REQUIRED)\nfind_package(LAPACK REQUIRED)\n```", "```cpp\nset(wrap_BLAS_LAPACK_sources\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.hpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.hpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.cpp\n  )\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${wrap_BLAS_LAPACK_sources}\n  COMMAND\n    ${CMAKE_COMMAND} -E tar xzf ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  COMMAND\n```", "```cpp\n    ${CMAKE_COMMAND} -E touch ${wrap_BLAS_LAPACK_sources}\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS\n    ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  COMMENT\n    \"Unpacking C++ wrappers for BLAS/LAPACK\"\n  VERBATIM\n  )\n```", "```cpp\nadd_library(math \"\")\n\ntarget_sources(math\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.cpp\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.hpp\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.hpp\n  )\n\ntarget_include_directories(math\n  INTERFACE\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK\n  )\n\ntarget_link_libraries(math\n  PUBLIC\n    ${LAPACK_LIBRARIES}\n  )\n```", "```cpp\nadd_executable(linear-algebra linear-algebra.cpp)\n\ntarget_link_libraries(linear-algebra\n  PRIVATE\n    math\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./linear-algebra 1000\n\nC_DSCAL done\nC_DGESV done\ninfo is 0\ncheck is 4.35597e-10\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${wrap_BLAS_LAPACK_sources}\n  COMMAND\n    ${CMAKE_COMMAND} -E tar xzf ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  COMMAND\n    ${CMAKE_COMMAND} -E touch ${wrap_BLAS_LAPACK_sources}\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS\n    ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  COMMENT\n    \"Unpacking C++ wrappers for BLAS/LAPACK\"\n  VERBATIM\n  )\n```", "```cpp\nadd_library(math \"\")\n\ntarget_sources(math\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.cpp\n  PUBLIC\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.hpp\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.hpp\n  )\n\ntarget_include_directories(math\n  INTERFACE\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK\n  )\n\ntarget_link_libraries(math\n  PUBLIC\n    ${LAPACK_LIBRARIES}\n  )\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 LANGUAGES CXX Fortran)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nadd_subdirectory(deps)\n```", "```cpp\nfind_package(BLAS REQUIRED)\nfind_package(LAPACK REQUIRED)\n```", "```cpp\nset(MATH_SRCS\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.hpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.hpp\n  )\n```", "```cpp\nadd_custom_target(BLAS_LAPACK_wrappers\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS\n    ${MATH_SRCS}\n  COMMENT\n    \"Intermediate BLAS_LAPACK_wrappers target\"\n  VERBATIM\n  )\n\nadd_custom_command(\n  OUTPUT\n    ${MATH_SRCS}\n  COMMAND\n    ${CMAKE_COMMAND} -E tar xzf ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_BINARY_DIR}\n  DEPENDS\n    ${CMAKE_CURRENT_SOURCE_DIR}/wrap_BLAS_LAPACK.tar.gz\n  COMMENT\n    \"Unpacking C++ wrappers for BLAS/LAPACK\"\n  )\n```", "```cpp\nadd_library(math \"\")\n\ntarget_sources(math\n  PRIVATE\n    ${MATH_SRCS}\n  )\n\ntarget_include_directories(math\n  INTERFACE\n    ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK\n  )\n\n# BLAS_LIBRARIES are included in LAPACK_LIBRARIES\ntarget_link_libraries(math\n  PUBLIC\n    ${LAPACK_LIBRARIES} \n  )\n```", "```cpp\nadd_executable(linear-algebra linear-algebra.cpp)\n\ntarget_link_libraries(linear-algebra\n  PRIVATE\n    math\n  )\n```", "```cpp\nset(MATH_SRCS\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.cpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxBLAS.hpp\n  ${CMAKE_CURRENT_BINARY_DIR}/wrap_BLAS_LAPACK/CxxLAPACK.hpp\n  )\n\n# ...\n\nadd_library(math \"\")\n\ntarget_sources(math\n  PRIVATE\n    ${MATH_SRCS}\n  )\n\n# ...\n```", "```cpp\nprogram example\n\n  implicit none\n\n  real(8) :: array(20000000)\n  real(8) :: r\n  integer :: i\n\n  do i = 1, size(array)\n    call random_number(r)\n    array(i) = r\n  end do\n\n  print *, sum(array)\n\nend program\n```", "```cpp\nimport subprocess\nimport sys\n\n# for simplicity we do not check number of\n# arguments and whether the file really exists\nfile_path = sys.argv[-1]\n\ntry:\n    output = subprocess.check_output(['size', file_path]).decode('utf-8')\nexcept FileNotFoundError:\n    print('command \"size\" is not available on this platform')\n    sys.exit(0)\n\nsize = 0.0\nfor line in output.split('\\n'):\n    if file_path in line:\n        # we are interested in the 4th number on this line\n        size = int(line.split()[3])\n\nprint('{0:.3f} MB'.format(size/1.0e6))\n```", "```cpp\nimport sys\n\n# for simplicity we do not verify the number and\n# type of arguments\nfile_path = sys.argv[-1]\n\ntry:\n    with open(file_path, 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('ERROR: file {0} not found'.format(file_path))\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-05 LANGUAGES Fortran)\n```", "```cpp\nfind_package(PythonInterp REQUIRED)\n```", "```cpp\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n```", "```cpp\nadd_executable(example \"\")\n\ntarget_sources(example\n  PRIVATE\n    example.f90\n  )\n```", "```cpp\nadd_custom_command(\n  TARGET\n    example\n  PRE_LINK\n```", "```cpp\n  COMMAND\n    ${PYTHON_EXECUTABLE}\n      ${CMAKE_CURRENT_SOURCE_DIR}/echo-file.py\n      ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/example.dir/link.txt\n  COMMENT\n    \"link line:\"\n  VERBATIM\n  )\n```", "```cpp\nadd_custom_command(\n  TARGET\n    example\n  POST_BUILD\n  COMMAND\n    ${PYTHON_EXECUTABLE}\n      ${CMAKE_CURRENT_SOURCE_DIR}/static-size.py\n      $<TARGET_FILE:example>\n  COMMENT\n    \"static size of executable:\"\n  VERBATIM\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n\nScanning dependencies of target example\n[ 50%] Building Fortran object CMakeFiles/example.dir/example.f90.o\n[100%] Linking Fortran executable example\nlink line:\n/usr/bin/f95 -O3 -DNDEBUG -O3 CMakeFiles/example.dir/example.f90.o -o example \n\nstatic size of executable:\n160.003 MB\n[100%] Built target example\n```", "```cpp\nlink line:\n/usr/bin/f95 -O3 -DNDEBUG -O3 CMakeFiles/example.dir/example.f90.o -o example\n```", "```cpp\nstatic size of executable:\n160.003 MB\n```", "```cpp\ncmake_minimum_required(VERSION 3.9 FATAL_ERROR)\n\nproject(recipe-06 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(OpenMP)\n\nif(OpenMP_FOUND)\n  # ... <- the steps below will be placed here\nelse()\n  message(STATUS \"OpenMP not found: no test for taskloop is run\")\nendif()\n```", "```cpp\nset(_scratch_dir ${CMAKE_CURRENT_BINARY_DIR}/omp_try_compile)\n```", "```cpp\ntry_compile(\n  omp_taskloop_test_1\n  ${_scratch_dir}\n  SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/taskloop.cpp\n  LINK_LIBRARIES\n    OpenMP::OpenMP_CXX\n  ) \nmessage(STATUS \"Result of try_compile: ${omp_taskloop_test_1}\")\n```", "```cpp\ninclude(CheckCXXSourceCompiles)\n```", "```cpp\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/taskloop.cpp _snippet)\n```", "```cpp\nset(CMAKE_REQUIRED_LIBRARIES OpenMP::OpenMP_CXX)\n```", "```cpp\ncheck_cxx_source_compiles(\"${_snippet}\" omp_taskloop_test_2)\n```", "```cpp\nunset(CMAKE_REQUIRED_LIBRARIES)\nmessage(STATUS \"Result of check_cxx_source_compiles: ${omp_taskloop_test_2}\"\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n-- ...\n-- Found OpenMP_CXX: -fopenmp (found version \"4.5\") \n-- Found OpenMP: TRUE (found version \"4.5\") \n-- Result of try_compile: TRUE\n-- Performing Test omp_taskloop_test_2\n-- Performing Test omp_taskloop_test_2 - Success\n-- Result of check_cxx_source_compiles: 1\n```", "```cpp\n$ cmake -U <variable-name>\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-07 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nlist(APPEND CXX_BASIC_FLAGS \"-g3\" \"-O1\")\n```", "```cpp\ninclude(CheckCXXCompilerFlag)\n```", "```cpp\nset(ASAN_FLAGS \"-fsanitize=address -fno-omit-frame-pointer\")\nset(CMAKE_REQUIRED_FLAGS ${ASAN_FLAGS})\n```", "```cpp\ncheck_cxx_compiler_flag(${ASAN_FLAGS} asan_works)\nunset(CMAKE_REQUIRED_FLAGS)\n```", "```cpp\nif(asan_works)\n  string(REPLACE \" \" \";\" _asan_flags ${ASAN_FLAGS})\n```", "```cpp\n  add_executable(asan-example asan-example.cpp)\n```", "```cpp\n  target_compile_options(asan-example\n    PUBLIC\n      ${CXX_BASIC_FLAGS}\n      ${_asan_flags}\n    )\n```", "```cpp\n  target_link_libraries(asan-example PUBLIC ${_asan_flags})\nendif()\n```", "```cpp\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\nproject(recipe-08 LANGUAGES CXX C)\n\n```", "```cpp\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(PkgConfig REQUIRED QUIET)\npkg_search_module(UUID REQUIRED uuid IMPORTED_TARGET)\nif(TARGET PkgConfig::UUID)\n  message(STATUS \"Found libuuid\")\nendif()\n```", "```cpp\ninclude(CheckCSourceRuns)\n```", "```cpp\nset(_test_uuid\n  \"\n#include <uuid/uuid.h>\n\nint main(int argc, char * argv[]) {\n  uuid_t uuid;\n\n  uuid_generate(uuid);\n\n  return 0;\n}\n  \")\n```", "```cpp\nset(CMAKE_REQUIRED_LIBRARIES PkgConfig::UUID)\ncheck_c_source_runs(\"${_test_uuid}\" _runs)\nunset(CMAKE_REQUIRED_LIBRARIES)\n```", "```cpp\nif(NOT _runs)\n  message(FATAL_ERROR \"Cannot run a simple C executable using libuuid!\")\nendif()\n```", "```cpp\nadd_executable(use-uuid use-uuid.cpp)\n\ntarget_link_libraries(use-uuid\n  PUBLIC\n    PkgConfig::UUID\n  )\n```", "```cpp\n#include <iostream>\n\n#ifdef HAVE_MPI\n#include <mpi.h>\n#endif\n\nint main() {\n#ifdef HAVE_MPI\n  // initialize MPI\n  MPI_Init(NULL, NULL);\n\n  // query and print the rank\n  int rank;\n  MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n  std::cout << \"hello from rank \" << rank << std::endl;\n\n  // initialize MPI\n  MPI_Finalize();\n#else\n  std::cout << \"hello from a sequential binary\" << std::endl;\n#endif /* HAVE_MPI */\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.9 FATAL_ERROR)\n\nproject(recipe-09 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\noption(USE_MPI \"Use MPI parallelization\" ON)\n\nif(USE_MPI)\n  find_package(MPI REQUIRED)\nendif()\n```", "```cpp\nadd_executable(example example.cpp)\n\ntarget_link_libraries(example\n  PUBLIC\n    $<$<BOOL:${MPI_FOUND}>:MPI::MPI_CXX>\n  )\n\ntarget_compile_definitions(example\n  PRIVATE\n    $<$<BOOL:${MPI_FOUND}>:HAVE_MPI>\n  )\n```", "```cpp\nif(MPI_FOUND)\n  include(CMakePrintHelpers)\n  cmake_print_properties(\n    TARGETS MPI::MPI_CXX\n    PROPERTIES INTERFACE_LINK_LIBRARIES\n    )\nendif()\n```", "```cpp\n$ mkdir -p build_mpi\n$ cd build_mpi\n$ cmake ..\n\n-- ...\n-- \n Properties for TARGET MPI::MPI_CXX:\n MPI::MPI_CXX.INTERFACE_LINK_LIBRARIES = \"-Wl,-rpath -Wl,/usr/lib/openmpi -Wl,--enable-new-dtags -pthread;/usr/lib/openmpi/libmpi_cxx.so;/usr/lib/openmpi/libmpi.so\"\n```", "```cpp\n$ cmake --build .\n$ mpirun -np 2 ./example\n\nhello from rank 0\nhello from rank 1\n```", "```cpp\n$ mkdir -p build_seq\n$ cd build_seq\n$ cmake -D USE_MPI=OFF ..\n$ cmake --build .\n$ ./example\n\nhello from a sequential binary\n```", "```cpp\ntarget_link_libraries(example\n  PUBLIC\n    $<$<BOOL:${MPI_FOUND}>:MPI::MPI_CXX>\n  )\n\ntarget_compile_definitions(example\n  PRIVATE\n    $<$<BOOL:${MPI_FOUND}>:HAVE_MPI>\n  )\n```", "```cpp\nif(MPI_FOUND)\n  target_link_libraries(example\n    PUBLIC\n      MPI::MPI_CXX\n    )\n\n  target_compile_definitions(example\n    PRIVATE\n      HAVE_MPI\n    )\nendif()\n```"]