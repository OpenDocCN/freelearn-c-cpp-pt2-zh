["```cpp\n.\n├── CMakeLists.txt\n├── src\n│   ├── CMakeLists.txt\n│   ├── hello-world.cpp\n│   ├── Message.cpp\n│   └── Message.hpp\n└── tests\n    └── CMakeLists.txt\n```", "```cpp\n#pragma once\n\n#include <iosfwd>\n#include <string>\n\nclass Message {\npublic:\n  Message(const std::string &m) : message_(m) {}\n\n  friend std::ostream &operator<<(std::ostream &os, Message &obj) {\n    return obj.printObject(os);\n  }\n\nprivate:\n  std::string message_;\n  std::ostream &printObject(std::ostream &os);\n};\n\nstd::string getUUID();\n```", "```cpp\n#include \"Message.hpp\"\n\n#include <iostream>\n#include <string>\n\n#ifdef HAVE_UUID\n#include <uuid/uuid.h>\n#endif\n\nstd::ostream &Message::printObject(std::ostream &os) {\n  os << \"This is my very nice message: \" << std::endl;\n  os << message_ << std::endl;\n  os << \"...and here is its UUID: \" << getUUID();\n\n  return os;\n}\n\n#ifdef HAVE_UUID\nstd::string getUUID() {\n  uuid_t uuid;\n```", "```cpp\n  uuid_generate(uuid);\n  char uuid_str[37];\n  uuid_unparse_lower(uuid, uuid_str);\n  uuid_clear(uuid);\n  std::string uuid_cxx(uuid_str);\n  return uuid_cxx;\n}\n#else\nstd::string getUUID() { return \"Ooooops, no UUID for you!\"; }\n#endif\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n\n#include \"Message.hpp\"\n\nint main() {\n  Message say_hello(\"Hello, CMake World!\");\n\n  std::cout << say_hello << std::endl;\n\n  Message say_goodbye(\"Goodbye, CMake World\");\n\n  std::cout << say_goodbye << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n# CMake 3.6 needed for IMPORTED_TARGET option\n# to pkg_search_module\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\n```", "```cpp\nproject(recipe-01\n  LANGUAGES CXX\n  VERSION 1.0.0\n  )\n\n# <<< General set up >>>\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nmessage(STATUS \"Project will be installed to ${CMAKE_INSTALL_PREFIX}\")\n```", "```cpp\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\nmessage(STATUS \"Build type set to ${CMAKE_BUILD_TYPE}\")\n```", "```cpp\ninclude(GNUInstallDirs)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n```", "```cpp\n# Offer the user the choice of overriding the installation directories\nset(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH \"Installation directory for executables\")\nset(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH \"Installation directory for header files\")\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKEDIR CMake)\nelse()\n  set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})\nendif()\nset(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH \"Installation directory for CMake files\")\n```", "```cpp\n# Report to user\nforeach(p LIB BIN INCLUDE CMAKE)\n  file(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path )\n  message(STATUS \"Installing ${p} components to ${_path}\")\n  unset(_path)\nendforeach()\n```", "```cpp\nadd_subdirectory(src)\n\nenable_testing()\n\nadd_subdirectory(tests)\n```", "```cpp\n# Search for pkg-config and UUID\nfind_package(PkgConfig QUIET)\nif(PKG_CONFIG_FOUND)\n  pkg_search_module(UUID uuid IMPORTED_TARGET)\n  if(TARGET PkgConfig::UUID)\n    message(STATUS \"Found libuuid\")\n    set(UUID_FOUND TRUE)\n  endif()\nendif()\n```", "```cpp\nadd_library(message-shared SHARED \"\")\n```", "```cpp\ntarget_sources(message-shared\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/Message.cpp\n  )\n```", "```cpp\ntarget_compile_definitions(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:HAVE_UUID>\n  )\n\ntarget_link_libraries(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:PkgConfig::UUID>\n  )\n```", "```cpp\nset_target_properties(message-shared\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    SOVERSION ${PROJECT_VERSION_MAJOR}\n    OUTPUT_NAME \"message\"\n    DEBUG_POSTFIX \"_d\"\n    PUBLIC_HEADER \"Message.hpp\"\n    MACOSX_RPATH ON\n    WINDOWS_EXPORT_ALL_SYMBOLS ON\n  )\n```", "```cpp\nadd_executable(hello-world_wDSO hello-world.cpp)\n```", "```cpp\ntarget_link_libraries(hello-world_wDSO\n  PUBLIC\n    message-shared\n  )\n```", "```cpp\n# Prepare RPATH\nfile(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR} ${CMAKE_INSTALL_PREFIX})\nif(APPLE)\n  set(_rpath \"@loader_path/${_rel}\")\nelse()\n  set(_rpath \"\\$ORIGIN/${_rel}\")\nendif()\nfile(TO_NATIVE_PATH \"${_rpath}/${INSTALL_LIBDIR}\" message_RPATH)\n```", "```cpp\nset_target_properties(hello-world_wDSO\n  PROPERTIES\n    MACOSX_RPATH ON\n    SKIP_BUILD_RPATH OFF\n    BUILD_WITH_INSTALL_RPATH OFF\n    INSTALL_RPATH \"${message_RPATH}\"\n    INSTALL_RPATH_USE_LINK_PATH ON\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    message-shared\n    hello-world_wDSO\n  ARCHIVE\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  RUNTIME\n    DESTINATION ${INSTALL_BINDIR}\n    COMPONENT bin\n  LIBRARY\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  PUBLIC_HEADER\n    DESTINATION ${INSTALL_INCLUDEDIR}/message\n    COMPONENT dev\n  )\n```", "```cpp\nadd_test(\n  NAME test_shared\n  COMMAND $<TARGET_FILE:hello-world_wDSO>\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=$HOME/Software/recipe-01\n$ cmake --build . --target install\n```", "```cpp\nbuild\n├── bin\n│   └── hello-world_wDSO\n├── CMakeCache.txt\n├── CMakeFiles\n├── cmake_install.cmake\n├── CTestTestfile.cmake\n├── install_manifest.txt\n├── lib64\n│   ├── libmessage.so -> libmessage.so.1\n│   └── libmessage.so.1\n├── Makefile\n├── src\n├── Testing\n└── tests\n```", "```cpp\n$HOME/Software/recipe-01/\n├── bin\n│   └── hello-world_wDSO\n├── include\n│   └── message\n│       └── Message.hpp\n└── lib64\n    ├── libmessage.so -> libmessage.so.1\n    └── libmessage.so.1\n```", "```cpp\n# Offer the user the choice of overriding the installation directories\nset(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH \"Installation directory for executables\")\nset(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH \"Installation directory for header files\")\n```", "```cpp\n# Prepare RPATH\nfile(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR} ${CMAKE_INSTALL_PREFIX})\nif(APPLE)\n  set(_rpath \"@loader_path/${_rel}\")\nelse()\n  set(_rpath \"\\$ORIGIN/${_rel}\")\nendif()\nfile(TO_NATIVE_PATH \"${_rpath}/${INSTALL_LIBDIR}\" message_RPATH)\n```", "```cpp\nset_target_properties(hello-world_wDSO\n  PROPERTIES\n    MACOSX_RPATH ON\n    SKIP_BUILD_RPATH OFF\n    BUILD_WITH_INSTALL_RPATH OFF\n    INSTALL_RPATH \"${message_RPATH}\"\n    INSTALL_RPATH_USE_LINK_PATH ON\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    message-shared\n    hello-world_wDSO\n```", "```cpp\n  ARCHIVE\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  RUNTIME\n    DESTINATION ${INSTALL_BINDIR}\n    COMPONENT bin\n  LIBRARY\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n```", "```cpp\n$ cmake -D COMPONENT=lib -P cmake_install.cmake\n```", "```cpp\nlibmessage.so.1 => /home/user/cmake-cookbook/chapter-10/recipe-01/cxx-example/build/lib64/libmessage.so.1 (0x00007f7a92e44000)\n```", "```cpp\n    libmessage.so.1 => Not found\n```", "```cpp\nlibmessage.so.1 => /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-01/cxx-example/build/lib64/libmessage.so.1 (0x00007f7a92e44000)\n```", "```cpp\nlibmessage.so.1 => /home/roberto/Software/ch10r01/bin/../lib64/libmessage.so.1 (0x00007fbd2a725000)\n```", "```cpp\n#pragma once\n\n#include <iosfwd>\n#include <string>\n\n#include \"messageExport.h\"\n\nclass message_EXPORT Message {\npublic:\n  Message(const std::string &m) : message_(m) {}\n\n  friend std::ostream &operator<<(std::ostream &os, Message &obj) {\n    return obj.printObject(os);\n  }\n\nprivate:\n  std::string message_;\n  std::ostream &printObject(std::ostream &os);\n};\n\nstd::string getUUID();\n```", "```cpp\nadd_library(message-shared SHARED \"\")\n\ntarget_sources(message-shared\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/Message.cpp\n  )\n\ntarget_compile_definitions(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:HAVE_UUID>\n  )\n\ntarget_link_libraries(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:PkgConfig::UUID>\n  )\n```", "```cpp\nset_target_properties(message-shared\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    CXX_VISIBILITY_PRESET hidden\n    VISIBILITY_INLINES_HIDDEN 1\n    SOVERSION ${PROJECT_VERSION_MAJOR}\n    OUTPUT_NAME \"message\"\n    DEBUG_POSTFIX \"_d\"\n    PUBLIC_HEADER \"Message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n    MACOSX_RPATH ON\n  )\n```", "```cpp\ninclude(GenerateExportHeader)\ngenerate_export_header(message-shared\n  BASE_NAME \"message\"\n  EXPORT_MACRO_NAME \"message_EXPORT\"\n  EXPORT_FILE_NAME \"${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n  DEPRECATED_MACRO_NAME \"message_DEPRECATED\"\n  NO_EXPORT_MACRO_NAME \"message_NO_EXPORT\"\n  STATIC_DEFINE \"message_STATIC_DEFINE\"\n  NO_DEPRECATED_MACRO_NAME \"message_NO_DEPRECATED\"\n  DEFINE_NO_DEPRECATED\n  )\n```", "```cpp\ntarget_include_directories(message-shared\n  PUBLIC\n    ${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}\n  ) \n```", "```cpp\nadd_library(message-static STATIC \"\")\n\ntarget_sources(message-static\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/Message.cpp\n  )\n```", "```cpp\ntarget_compile_definitions(message-static\n  PUBLIC\n    message_STATIC_DEFINE\n    $<$<BOOL:${UUID_FOUND}>:HAVE_UUID>\n  )\n\ntarget_include_directories(message-static\n  PUBLIC\n    ${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}\n  )\n\ntarget_link_libraries(message-static\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:PkgConfig::UUID>\n  )\n```", "```cpp\nset_target_properties(message-static\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    ARCHIVE_OUTPUT_NAME \"message\"\n    DEBUG_POSTFIX \"_sd\"\n    RELEASE_POSTFIX \"_s\"\n    PUBLIC_HEADER \"Message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n  )\n```", "```cpp\nadd_executable(hello-world_wAR hello-world.cpp)\n\ntarget_link_libraries(hello-world_wAR\n  PUBLIC\n    message-static\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    message-shared\n    message-static\n    hello-world_wDSO\n    hello-world_wAR\n  ARCHIVE\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  RUNTIME\n    DESTINATION ${INSTALL_BINDIR}\n    COMPONENT bin\n  LIBRARY\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  PUBLIC_HEADER\n    DESTINATION ${INSTALL_INCLUDEDIR}/message\n    COMPONENT dev\n  )\n```", "```cpp\ninclude(GenerateExportHeader)\ngenerate_export_header(message-shared\n  BASE_NAME \"message\"\n  EXPORT_MACRO_NAME \"message_EXPORT\"\n  EXPORT_FILE_NAME \"${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n  DEPRECATED_MACRO_NAME \"message_DEPRECATED\"\n  NO_EXPORT_MACRO_NAME \"message_NO_EXPORT\"\n  STATIC_DEFINE \"message_STATIC_DEFINE\"\n  NO_DEPRECATED_MACRO_NAME \"message_NO_DEPRECATED\"\n  DEFINE_NO_DEPRECATED\n  )\n```", "```cpp\n#ifndef message_EXPORT_H\n#define message_EXPORT_H\n\n#ifdef message_STATIC_DEFINE\n#  define message_EXPORT\n#  define message_NO_EXPORT\n#else\n#  ifndef message_EXPORT\n#    ifdef message_shared_EXPORTS\n        /* We are building this library */\n#      define message_EXPORT __attribute__((visibility(\"default\")))\n#    else\n        /* We are using this library */\n#      define message_EXPORT __attribute__((visibility(\"default\")))\n#    endif\n#  endif\n\n#  ifndef message_NO_EXPORT\n#    define message_NO_EXPORT __attribute__((visibility(\"hidden\")))\n#  endif\n#endif\n\n#ifndef message_DEPRECATED\n#  define message_DEPRECATED __attribute__ ((__deprecated__))\n#endif\n\n#ifndef message_DEPRECATED_EXPORT\n#  define message_DEPRECATED_EXPORT message_EXPORT message_DEPRECATED\n#endif\n\n#ifndef message_DEPRECATED_NO_EXPORT\n#  define message_DEPRECATED_NO_EXPORT message_NO_EXPORT message_DEPRECATED\n#endif\n\n#if 1 /* DEFINE_NO_DEPRECATED */\n#  ifndef message_NO_DEPRECATED\n#    define message_NO_DEPRECATED\n#  endif\n#endif\n\n#endif\n```", "```cpp\n.\n├── cmake\n│   └── messageConfig.cmake.in\n├── CMakeLists.txt\n├── src\n│   ├── CMakeLists.txt\n│   ├── hello-world.cpp\n│   ├── Message.cpp\n│   └── Message.hpp\n└── tests\n    ├── CMakeLists.txt\n    └── use_target\n        ├── CMakeLists.txt\n        └── use_message.cpp\n```", "```cpp\n# Search for pkg-config and UUID\nfind_package(PkgConfig QUIET)\nif(PKG_CONFIG_FOUND)\n  pkg_search_module(UUID uuid IMPORTED_TARGET)\n  if(TARGET PkgConfig::UUID)\n    message(STATUS \"Found libuuid\")\n    set(UUID_FOUND TRUE)\n  endif()\nendif()\n```", "```cpp\nadd_library(message-shared SHARED \"\")\n\ninclude(GenerateExportHeader)\ngenerate_export_header(message-shared\n  BASE_NAME \"message\"\n  EXPORT_MACRO_NAME \"message_EXPORT\"\n  EXPORT_FILE_NAME \"${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n  DEPRECATED_MACRO_NAME \"message_DEPRECATED\"\n  NO_EXPORT_MACRO_NAME \"message_NO_EXPORT\"\n  STATIC_DEFINE \"message_STATIC_DEFINE\"\n  NO_DEPRECATED_MACRO_NAME \"message_NO_DEPRECATED\"\n  DEFINE_NO_DEPRECATED\n  )\n\ntarget_sources(message-shared\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/Message.cpp\n  )\n```", "```cpp\ntarget_compile_definitions(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:HAVE_UUID>\n  INTERFACE\n    $<INSTALL_INTERFACE:USING_message>\n  )\n```", "```cpp\ntarget_include_directories(message-shared\n  PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}>\n    $<INSTALL_INTERFACE:${INSTALL_INCLUDEDIR}>\n  )\n```", "```cpp\ntarget_link_libraries(message-shared\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:PkgConfig::UUID>\n  )\n\nset_target_properties(message-shared\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    CXX_VISIBILITY_PRESET hidden\n    VISIBILITY_INLINES_HIDDEN 1\n    SOVERSION ${PROJECT_VERSION_MAJOR}\n    OUTPUT_NAME \"message\"\n    DEBUG_POSTFIX \"_d\"\n    PUBLIC_HEADER \"Message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n    MACOSX_RPATH ON\n  )\n```", "```cpp\nadd_library(message-static STATIC \"\")\n\ntarget_sources(message-static\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/Message.cpp\n  )\n```", "```cpp\ntarget_compile_definitions(message-static\n  PUBLIC\n    message_STATIC_DEFINE\n    $<$<BOOL:${UUID_FOUND}>:HAVE_UUID>\n  INTERFACE\n    $<INSTALL_INTERFACE:USING_message>\n  )\n```", "```cpp\ntarget_include_directories(message-static\n  PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}>\n    $<INSTALL_INTERFACE:${INSTALL_INCLUDEDIR}>\n  )\n```", "```cpp\ntarget_link_libraries(message-static\n  PUBLIC\n    $<$<BOOL:${UUID_FOUND}>:PkgConfig::UUID>\n  )\n\nset_target_properties(message-static\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n    ARCHIVE_OUTPUT_NAME \"message\"\n    DEBUG_POSTFIX \"_sd\"\n    RELEASE_POSTFIX \"_s\"\n    PUBLIC_HEADER \"Message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/messageExport.h\"\n  )\n```", "```cpp\nadd_executable(hello-world_wDSO hello-world.cpp)\n\ntarget_link_libraries(hello-world_wDSO\n  PUBLIC\n    message-shared\n  )\n\n# Prepare RPATH\n\nfile(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR} ${CMAKE_INSTALL_PREFIX})\nif(APPLE)\n  set(_rpath \"@loader_path/${_rel}\")\nelse()\n  set(_rpath \"\\$ORIGIN/${_rel}\")\nendif()\nfile(TO_NATIVE_PATH \"${_rpath}/${INSTALL_LIBDIR}\" message_RPATH)\n\nset_target_properties(hello-world_wDSO\n  PROPERTIES\n    MACOSX_RPATH ON\n    SKIP_BUILD_RPATH OFF\n    BUILD_WITH_INSTALL_RPATH OFF\n    INSTALL_RPATH \"${message_RPATH}\"\n    INSTALL_RPATH_USE_LINK_PATH ON\n  )\n\nadd_executable(hello-world_wAR hello-world.cpp)\n\ntarget_link_libraries(hello-world_wAR\n  PUBLIC\n    message-static\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    message-shared\n    message-static\n    hello-world_wDSO\n    hello-world_wAR\n  EXPORT\n    messageTargets\n  ARCHIVE\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  RUNTIME\n    DESTINATION ${INSTALL_BINDIR}\n    COMPONENT bin\n  LIBRARY\n    DESTINATION ${INSTALL_LIBDIR}\n    COMPONENT lib\n  PUBLIC_HEADER\n    DESTINATION ${INSTALL_INCLUDEDIR}/message\n    COMPONENT dev\n  )\n```", "```cpp\ninstall(\n  EXPORT\n    messageTargets\n  NAMESPACE\n    \"message::\"\n  DESTINATION\n    ${INSTALL_CMAKEDIR}\n  COMPONENT\n    dev\n  )\n```", "```cpp\ninclude(CMakePackageConfigHelpers)\n```", "```cpp\nwrite_basic_package_version_file(\n  ${CMAKE_CURRENT_BINARY_DIR}/messageConfigVersion.cmake\n```", "```cpp\n  VERSION ${PROJECT_VERSION}\n  COMPATIBILITY SameMajorVersion\n  )\n```", "```cpp\nconfigure_package_config_file(\n  ${PROJECT_SOURCE_DIR}/cmake/messageConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/messageConfig.cmake\n  INSTALL_DESTINATION ${INSTALL_CMAKEDIR}\n  )\n```", "```cpp\ninstall(\n  FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/messageConfig.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/messageConfigVersion.cmake\n  DESTINATION\n    ${INSTALL_CMAKEDIR}\n  )\n```", "```cpp\n@PACKAGE_INIT@\n```", "```cpp\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/messageTargets.cmake\")\n```", "```cpp\ncheck_required_components(\n  \"message-shared\"\n  \"message-static\"\n```", "```cpp\n  \"message-hello-world_wDSO\"\n  \"message-hello-world_wAR\"\n  )\n```", "```cpp\nif(NOT WIN32)\n  if(NOT TARGET PkgConfig::UUID)\n    find_package(PkgConfig REQUIRED QUIET)\n    pkg_search_module(UUID REQUIRED uuid IMPORTED_TARGET)\n  endif()\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -DCMAKE_INSTALL_PREFIX=$HOME/Software/recipe-03 ..\n$ cmake --build . --target install\n```", "```cpp\n$HOME/Software/recipe-03/\n├── bin\n│   ├── hello-world_wAR\n│   └── hello-world_wDSO\n├── include\n│   └── message\n│       ├── messageExport.h\n│       └── Message.hpp\n├── lib64\n│   ├── libmessage_s.a\n│   ├── libmessage.so -> libmessage.so.1\n│   └── libmessage.so.1\n└── share\n    └── cmake\n        └── recipe-03\n            ├── messageConfig.cmake\n            ├── messageConfigVersion.cmake\n            ├── messageTargets.cmake\n            └── messageTargets-release.cmake\n```", "```cpp\nfind_package(message 1 CONFIG REQUIRED)\n```", "```cpp\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKEDIR CMake)\nelse()\n  set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})\nendif()\nset(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH \"Installation directory for CMake files\")\n```", "```cpp\nfind_package(message VERSION 1 REQUIRED)\n```", "```cpp\n$ cmake -Dmessage_DIR=/path/to/message/share/cmake/message ..\n```", "```cpp\ntests/\n├── CMakeLists.txt\n└── use_target\n    ├── CMakeLists.txt\n    └── use_message.cpp\n```", "```cpp\nadd_test(\n  NAME use-target_configure\n  COMMAND\n    ${CMAKE_COMMAND} -H${CMAKE_CURRENT_LIST_DIR}/use_target\n                     -B${CMAKE_CURRENT_BINARY_DIR}/build_use-target\n                     -G${CMAKE_GENERATOR}\n                     -Dmessage_DIR=${CMAKE_INSTALL_PREFIX}/${\n                     INSTALL_CMAKEDIR}\n                     -DCMAKE_BUILD_TYPE=$<CONFIGURATION>\n  )\nset_tests_properties(use-target_configure\n  PROPERTIES\n    FIXTURES_SETUP use-target\n  )\n```", "```cpp\nadd_test(\n  NAME use-target_build\n  COMMAND\n    ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/build_use-target\n                     --config $<CONFIGURATION>\n  )\nset_tests_properties(use-target_build\n  PROPERTIES\n    FIXTURES_REQUIRED use-target\n  )\n```", "```cpp\nset(_test_target)\nif(MSVC)\n  set(_test_target \"RUN_TESTS\")\nelse()\n  set(_test_target \"test\")\nendif()\nadd_test(\n  NAME use-target_test\n  COMMAND\n    ${CMAKE_COMMAND} --build ${CMAKE_CURRENT_BINARY_DIR}/build_use-target\n                     --target ${_test_target}\n                     --config $<CONFIGURATION>\n  )\nset_tests_properties(use-target_test\n  PROPERTIES\n    FIXTURES_REQUIRED use-target\n  )\nunset(_test_target)\n```", "```cpp\nadd_test(\n  NAME use-target_cleanup\n  COMMAND\n    ${CMAKE_COMMAND} -E remove_directory ${CMAKE_CURRENT_BINARY_DIR}/build_use-target\n  )\nset_tests_properties(use-target_cleanup\n  PROPERTIES\n    FIXTURES_CLEANUP use-target\n  )\n```", "```cpp\n├── cmake\n│   ├── install_hook.cmake.in\n│   └── print_rpath.py\n├── CMakeLists.txt\n├── external\n│   └── upstream\n│       ├── CMakeLists.txt\n│       └── message\n│           └── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── use_message.cpp\n```", "```cpp\nimport shlex\nimport subprocess\nimport sys\n\ndef main():\n    patcher = sys.argv[1]\n    elfobj = sys.argv[2]\n\n    tools = {'patchelf': '--print-rpath', 'chrpath': '--list', 'otool': '-L'}\n    if patcher not in tools.keys():\n        raise RuntimeError('Unknown tool {}'.format(patcher))\n    cmd = shlex.split('{:s} {:s} {:s}'.format(patcher, tools[patcher], elfobj))\n    rpath = subprocess.run(\n        cmd,\n        bufsize=1,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True)\n    print(rpath.stdout)\n\nif __name__ == \"__main__\":\n    main()\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n\n#ifdef USING_message\n#include <message/Message.hpp>\nvoid messaging() {\n  Message say_hello(\"Hello, World! From a client of yours!\");\n  std::cout << say_hello << std::endl;\n\n  Message say_goodbye(\"Goodbye, World! From a client of yours!\");\n  std::cout << say_goodbye << std::endl;\n}\n#else\nvoid messaging() {\n  std::cout << \"Hello, World! From a client of yours!\" << std::endl;\n\n  std::cout << \"Goodbye, World! From a client of yours!\" << std::endl;\n}\n#endif\n\nint main() {\n  messaging();\n  return EXIT_SUCCESS;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\nproject(recipe-04\n  LANGUAGES CXX\n  VERSION 1.0.0\n  )\n\n# <<< General set up >>>\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\nmessage(STATUS \"Build type set to ${CMAKE_BUILD_TYPE}\")\n\nmessage(STATUS \"Project will be installed to ${CMAKE_INSTALL_PREFIX}\")\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n\n# Offer the user the choice of overriding the installation directories\nset(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH \"Installation directory for executables\")\nset(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH \"Installation directory for header files\")\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKEDIR CMake)\nelse()\n  set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})\nendif()\nset(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH \"Installation directory for CMake files\")\n\n# Report to user\nforeach(p LIB BIN INCLUDE CMAKE)\n  file(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path )\n  message(STATUS \"Installing ${p} components to ${_path}\")\n  unset(_path)\nendforeach()\n```", "```cpp\nset_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)\n```", "```cpp\nset(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)\nmessage(STATUS \"${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}\")\n```", "```cpp\nadd_subdirectory(external/upstream)\n```", "```cpp\ninclude(ExternalProject)\n```", "```cpp\nExternalProject_Add(${PROJECT_NAME}_core\n  DEPENDS\n    message_external\n  SOURCE_DIR\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n  CMAKE_ARGS\n    -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}\n    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\n    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\n    -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}\n    -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}\n    -Dmessage_DIR=${message_DIR}\n  CMAKE_CACHE_ARGS\n    -DCMAKE_PREFIX_PATH:PATH=${CMAKE_PREFIX_PATH}\n  BUILD_ALWAYS\n    1\n  )\n```", "```cpp\nenable_testing()\n\nadd_test(\n  NAME\n    check_use_message\n  COMMAND\n    ${STAGED_INSTALL_PREFIX}/${INSTALL_BINDIR}/use_message\n  )\n```", "```cpp\ninstall(\n  DIRECTORY\n    ${STAGED_INSTALL_PREFIX}/\n  DESTINATION\n    .\n  USE_SOURCE_PERMISSIONS\n  )\n```", "```cpp\nif(UNIX)\n  set(PRINT_SCRIPT \"${CMAKE_CURRENT_LIST_DIR}/cmake/print_rpath.py\")\n  configure_file(cmake/install_hook.cmake.in install_hook.cmake @ONLY)\n  install(\n    SCRIPT\n      ${CMAKE_CURRENT_BINARY_DIR}/install_hook.cmake\n    )\nendif()\n```", "```cpp\nfind_package(message 1 CONFIG QUIET)\n```", "```cpp\nif(message_FOUND)\n  get_property(_loc TARGET message::message-shared PROPERTY LOCATION)\n  message(STATUS \"Found message: ${_loc} (found version ${message_VERSION})\")\n  add_library(message_external INTERFACE)  # dummy\n```", "```cpp\nelse()\n  include(ExternalProject)\n  message(STATUS \"Suitable message could not be located, Building message instead.\")\n  ExternalProject_Add(message_external\n    GIT_REPOSITORY\n      https://github.com/dev-cafe/message.git\n    GIT_TAG\n      master\n    UPDATE_COMMAND\n      \"\"\n    CMAKE_ARGS\n      -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}\n      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n      -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    CMAKE_CACHE_ARGS\n      -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\n    TEST_AFTER_INSTALL\n      1\n    DOWNLOAD_NO_PROGRESS\n      1\n    LOG_CONFIGURE\n      1\n    LOG_BUILD\n      1\n    LOG_INSTALL\n      1\n    )\n```", "```cpp\n  if(WIN32 AND NOT CYGWIN)\n    set(DEF_message_DIR ${STAGED_INSTALL_PREFIX}/CMake)\n  else()\n    set(DEF_message_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/message)\n  endif()\n  file(TO_NATIVE_PATH \"${DEF_message_DIR}\" DEF_message_DIR)\n  set(message_DIR ${DEF_message_DIR}\n      CACHE PATH \"Path to internally built messageConfig.cmake\" FORCE)\nendif()\n```", "```cpp\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\nproject(recipe-04_core\n  LANGUAGES CXX\n  )\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n```", "```cpp\nfind_package(message 1 CONFIG REQUIRED)\nget_property(_loc TARGET message::message-shared PROPERTY LOCATION)\nmessage(STATUS \"Found message: ${_loc} (found version ${message_VERSION})\")\n```", "```cpp\nadd_executable(use_message use_message.cpp)\n\ntarget_link_libraries(use_message\n  PUBLIC\n    message::message-shared\n  )\n```", "```cpp\n# Prepare RPATH\nfile(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR} ${CMAKE_INSTALL_PREFIX})\nif(APPLE)\n  set(_rpath \"@loader_path/${_rel}\")\nelse()\n  set(_rpath \"\\$ORIGIN/${_rel}\")\nendif()\nfile(TO_NATIVE_PATH \"${_rpath}/${CMAKE_INSTALL_LIBDIR}\" use_message_RPATH)\n\nset_target_properties(use_message\n  PROPERTIES\n    MACOSX_RPATH ON\n    SKIP_BUILD_RPATH OFF\n    BUILD_WITH_INSTALL_RPATH OFF\n    INSTALL_RPATH \"${use_message_RPATH}\"\n    INSTALL_RPATH_USE_LINK_PATH ON\n  )\n```", "```cpp\ninstall(\n  TARGETS\n    use_message\n  RUNTIME\n    DESTINATION ${CMAKE_INSTALL_BINDIR}\n    COMPONENT bin\n  )\n```", "```cpp\nset(_executable ${CMAKE_INSTALL_PREFIX}/@INSTALL_BINDIR@/use_message)\n```", "```cpp\nset(_patcher)\nlist(APPEND _patchers chrpath patchelf otool)\nforeach(p IN LISTS _patchers)\n  find_program(${p}_FOUND\n    NAMES\n      ${p}\n    )\n  if(${p}_FOUND)\n    set(_patcher ${p})\n    message(STATUS \"ELF patching tool ${_patcher} FOUND\")\n    break()\n  endif()\nendforeach()\n```", "```cpp\nif(NOT _patcher)\n  message(FATAL_ERROR \"ELF patching tool NOT FOUND!\\nPlease install one of chrpath, patchelf or otool\")\n```", "```cpp\nfind_package(PythonInterp REQUIRED QUIET)\nexecute_process(\n  COMMAND\n    ${PYTHON_EXECUTABLE} @PRINT_SCRIPT@ \"${_patcher}\"  \n \"${_executable}\"\n  RESULT_VARIABLE _res\n  OUTPUT_VARIABLE _out\n  ERROR_VARIABLE _err\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n```", "```cpp\n  if(_res EQUAL 0)\n    message(STATUS \"RPATH for ${_executable} is ${_out}\")\n  else()\n    message(STATUS \"Something went wrong!\")\n    message(STATUS \"Standard output from print_rpath.py: ${_out}\")\n    message(STATUS \"Standard error from print_rpath.py: ${_err}\")\n    message(FATAL_ERROR \"${_patcher} could NOT obtain RPATH for ${_executable}\")\n  endif()\nendif()\n```", "```cpp\nexecute_process(\n  COMMAND ${_executable}\n  RESULT_VARIABLE _res\n  OUTPUT_VARIABLE _out\n  ERROR_VARIABLE _err\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n```", "```cpp\nif(_res EQUAL 0)\n  message(STATUS \"Running ${_executable}:\\n ${_out}\")\nelse()\n  message(STATUS \"Something went wrong!\")\n  message(STATUS \"Standard output from running ${_executable}:\\n ${_out}\")\n  message(STATUS \"Standard error from running ${_executable}:\\n ${_err}\")\n  message(FATAL_ERROR \"Something went wrong with ${_executable}\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -DCMAKE_INSTALL_PREFIX=$HOME/Software/recipe-04 ..\n```", "```cpp\n-- The CXX compiler identification is GNU 7.3.0\n-- Check for working CXX compiler: /nix/store/gqg2vrcq7krqi9rrl6pphvsg81sb8pjw-gcc-wrapper-7.3.0/bin/g++\n-- Check for working CXX compiler: /nix/store/gqg2vrcq7krqi9rrl6pphvsg81sb8pjw-gcc-wrapper-7.3.0/bin/g++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Project will be installed to /home/roberto/Software/recipe-04\n-- Build type set to Release\n-- Installing LIB components to /home/roberto/Software/recipe-04/lib64\n-- Installing BIN components to /home/roberto/Software/recipe-04/bin\n-- Installing INCLUDE components to /home/roberto/Software/recipe-04/include\n-- Installing CMAKE components to /home/roberto/Software/recipe-04/share/cmake/recipe-04\n-- recipe-04 staged install: /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-04/cxx-example/build/stage\n-- Suitable message could not be located, Building message instead.\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-04/cxx-example/build\n```", "```cpp\n$ cmake -DCMAKE_INSTALL_PREFIX=$HOME/Software/use_message -Dmessage_DIR=$HOME/Software/message/share/cmake/message ..\n```", "```cpp\n-- The CXX compiler identification is GNU 7.3.0\n-- Check for working CXX compiler: /nix/store/gqg2vrcq7krqi9rrl6pphvsg81sb8pjw-gcc-wrapper-7.3.0/bin/g++\n-- Check for working CXX compiler: /nix/store/gqg2vrcq7krqi9rrl6pphvsg81sb8pjw-gcc-wrapper-7.3.0/bin/g++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Project will be installed to /home/roberto/Software/recipe-04\n-- Build type set to Release\n-- Installing LIB components to /home/roberto/Software/recipe-04/lib64\n-- Installing BIN components to /home/roberto/Software/recipe-04/bin\n-- Installing INCLUDE components to /home/roberto/Software/recipe-04/include\n-- Installing CMAKE components to /home/roberto/Software/recipe-04/share/cmake/recipe-04\n-- recipe-04 staged install: /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-04/cxx-example/build/stage\n-- Checking for one of the modules 'uuid'\n-- Found message: /home/roberto/Software/message/lib64/libmessage.so.1 (found version 1.0.0)\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-04/cxx-example/build\n```", "```cpp\ninstall(\n  DIRECTORY\n    ${STAGED_INSTALL_PREFIX}/\n  DESTINATION\n    .\n  USE_SOURCE_PERMISSIONS\n  )\n```", "```cpp\nfile(RELATIVE_PATH _rel ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR} ${CMAKE_INSTALL_PREFIX})\nif(APPLE)\n  set(_rpath \"@loader_path/${_rel}\")\nelse()\n  set(_rpath \"\\$ORIGIN/${_rel}\")\nendif()\nfile(TO_NATIVE_PATH \"${_rpath}/${CMAKE_INSTALL_LIBDIR}\" use_message_RPATH)\n\nset_target_properties(use_message\n  PROPERTIES\n    MACOSX_RPATH ON\n    SKIP_BUILD_RPATH OFF\n    BUILD_WITH_INSTALL_RPATH OFF\n    INSTALL_RPATH \"${use_message_RPATH}\"\n    INSTALL_RPATH_USE_LINK_PATH ON\n  )\n```", "```cpp\nif(UNIX)\n  set(PRINT_SCRIPT \"${CMAKE_CURRENT_LIST_DIR}/cmake/print_rpath.py\")\n  configure_file(cmake/install_hook.cmake.in install_hook.cmake @ONLY)\n  install(\n    SCRIPT\n      ${CMAKE_CURRENT_BINARY_DIR}/install_hook.cmake\n    )\nendif()\n```", "```cpp\n$ cmake --build build --target install\n```", "```cpp\nInstall the project...\n-- Install configuration: \"Release\"\n-- Installing: /home/roberto/Software/recipe-04/.\n-- Installing: /home/roberto/Software/recipe-04/./lib64\n-- Installing: /home/roberto/Software/recipe-04/./lib64/libmessage.so\n-- Installing: /home/roberto/Software/recipe-04/./lib64/libmessage_s.a\n-- Installing: /home/roberto/Software/recipe-04/./lib64/libmessage.so.1\n-- Installing: /home/roberto/Software/recipe-04/./include\n-- Installing: /home/roberto/Software/recipe-04/./include/message\n-- Installing: /home/roberto/Software/recipe-04/./include/message/Message.hpp\n-- Installing: /home/roberto/Software/recipe-04/./include/message/messageExport.h\n-- Installing: /home/roberto/Software/recipe-04/./share\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake/message\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake/message/messageTargets-release.cmake\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake/message/messageConfigVersion.cmake\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake/message/messageConfig.cmake\n-- Installing: /home/roberto/Software/recipe-04/./share/cmake/message/messageTargets.cmake\n-- Installing: /home/roberto/Software/recipe-04/./bin\n-- Installing: /home/roberto/Software/recipe-04/./bin/hello-world_wAR\n-- Installing: /home/roberto/Software/recipe-04/./bin/use_message\n-- Installing: /home/roberto/Software/recipe-04/./bin/hello-world_wDSO\n-- ELF patching tool chrpath FOUND\n-- RPATH for /home/roberto/Software/recipe-04/bin/use_message is /home/roberto/Software/recipe-04/bin/use_message: RUNPATH=$ORIGIN/../lib64:/home/roberto/Workspace/robertodr/cmake-cookbook/chapter-10/recipe-04/cxx-example/build/stage/lib64:/nix/store/di389pfcw2krnmh8nmkn55d1rnzmba37-CMake-Cookbook/lib64:/nix/store/di389pfcw2krnmh8nmkn55d1rnzmba37-CMake-Cookbook/lib:/nix/store/mjs2b8mmid86lvbzibzdlz8w5yrjgcnf-util-linux-2.31.1/lib:/nix/store/2kcrj1ksd2a14bm5sky182fv2xwfhfap-glibc-2.26-131/lib:/nix/store/4zd34747fz0ggzzasy4icgn3lmy89pra-gcc-7.3.0-lib/lib\n-- Running /home/roberto/Software/recipe-04/bin/use_message:\n This is my very nice message: \nHello, World! From a client of yours!\n...and here is its UUID: a8014bf7-5dfa-45e2-8408-12e9a5941825\nThis is my very nice message: \nGoodbye, World! From a client of yours!\n...and here is its UUID: ac971ef4-7606-460f-9144-1ad96f713647\n```"]