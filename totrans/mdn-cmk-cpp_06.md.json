["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\n$ apt update \n$ apt install protobuf-compiler libprotobuf-dev\n```", "```cpp\nsyntax = \"proto3\";\nmessage Message {\n    int32 id = 1;\n}\n```", "```cpp\n#include \"message.pb.h\"\n#include <fstream>\nusing namespace std;\nint main()\n{\n  Message m;\n  m.set_id(123);\n  m.PrintDebugString();\n  fstream fo(\"./hello.data\", ios::binary | ios::out);\n  m.SerializeToOstream(&fo);\n  fo.close();\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(FindPackageProtobufVariables CXX)\nfind_package(Protobuf REQUIRED)\nprotobuf_generate_cpp(GENERATED_SRC GENERATED_HEADER\n  message.proto)\nadd_executable(main main.cpp \n  ${GENERATED_SRC} ${GENERATED_HEADER})\ntarget_link_libraries(main PRIVATE ${Protobuf_LIBRARIES})\ntarget_include_directories(main PRIVATE \n  ${Protobuf_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_BINARY_DIR})\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(FindPackageProtobufTargets CXX)\nfind_package(Protobuf REQUIRED)\nprotobuf_generate_cpp(GENERATED_SRC GENERATED_HEADER\n  message.proto)\nadd_executable(main main.cpp\n  ${GENERATED_SRC} ${GENERATED_HEADER})\ntarget_link_libraries(main PRIVATE protobuf::libprotobuf)\ntarget_include_directories(main PRIVATE\n                                ${CMAKE_CURRENT_BINARY_DIR})\n```", "```cpp\nfind_package(<Name> [version] [EXACT] [QUIET] [REQUIRED])\n```", "```cpp\nprefix=/usr/local\nexec_prefix=${prefix}\nincludedir=${prefix}/include\nlibdir=${exec_prefix}/lib\nName: foobar\nDescription: A foobar library\nVersion: 1.0.0\nCflags: -I${includedir}/foobar\nLibs: -L${libdir} -lfoobar\n```", "```cpp\napt-get install libpqxx-dev\n```", "```cpp\n#include <pqxx/pqxx>\nint main()\n{\n  // We're not actually connecting, but\n  // just proving that pqxx is available.\n  pqxx::nullconnection connection;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(FindPkgConfig CXX)\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(PQXX REQUIRED IMPORTED_TARGET libpqxx)\nmessage(\"PQXX_FOUND: ${PQXX_FOUND}\")\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE PkgConfig::PQXX)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(FindPackageCustom CXX)\nlist(APPEND CMAKE_MODULE_PATH\n  \"${CMAKE_SOURCE_DIR}/cmake/module/\")\nfind_package(PQXX REQUIRED)\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE PQXX::PQXX)\n```", "```cpp\nfunction(add_imported_library library headers)\n  add_library(PQXX::PQXX UNKNOWN IMPORTED)\n  set_target_properties(PQXX::PQXX PROPERTIES\n    IMPORTED_LOCATION ${library}\n    INTERFACE_INCLUDE_DIRECTORIES ${headers}\n  )\n  set(PQXX_FOUND 1 CACHE INTERNAL \"PQXX found\" FORCE)\n  set(PQXX_LIBRARIES ${library}\n      CACHE STRING \"Path to pqxx library\" FORCE)\n  set(PQXX_INCLUDES ${headers}\n      CACHE STRING \"Path to pqxx headers\" FORCE)\n  mark_as_advanced(FORCE PQXX_LIBRARIES)\n  mark_as_advanced(FORCE PQXX_INCLUDES)\nendfunction()\n```", "```cpp\nif (PQXX_LIBRARIES AND PQXX_INCLUDES)\n  add_imported_library(${PQXX_LIBRARIES} ${PQXX_INCLUDES})\n  return()\nendif()\n```", "```cpp\n# deliberately used in mind-module against the\n  documentation\ninclude(CMakeFindDependencyMacro)\nfind_dependency(PostgreSQL)\n```", "```cpp\nfile(TO_CMAKE_PATH \"$ENV{PQXX_DIR}\" _PQXX_DIR)\nfind_library(PQXX_LIBRARY_PATH NAMES libpqxx pqxx\n  PATHS\n    ${_PQXX_DIR}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\n    # (...) many other paths - removed for brevity\n    /usr/lib\n  NO_DEFAULT_PATH\n)\n```", "```cpp\nfind_path(PQXX_HEADER_PATH NAMES pqxx/pqxx\n  PATHS\n    ${_PQXX_DIR}/include\n    # (...) many other paths - removed for brevity\n    /usr/include\n  NO_DEFAULT_PATH\n)\n```", "```cpp\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(\n  PQXX DEFAULT_MSG PQXX_LIBRARY_PATH PQXX_HEADER_PATH\n)\nif (PQXX_FOUND)\n  add_imported_library(\n    \"${PQXX_LIBRARY_PATH};${POSTGRES_LIBRARIES}\"\n    \"${PQXX_HEADER_PATH};${POSTGRES_INCLUDE_DIRECTORIES}\"\n  )\nendif()\n```", "```cpp\ngit submodule add <repository-url>\n```", "```cpp\ngit submodule update --init -- <local-path-to-submodule>\n```", "```cpp\n#include <string>\n#include <iostream>\n#include \"yaml-cpp/yaml.h\"\nusing namespace std;\nint main() {\n  string name = \"Guest\";\n  YAML::Node config = YAML::LoadFile(\"config.yaml\");\n  if (config[\"name\"])\n    name = config[\"name\"].as<string>();\n  cout << \"Welcome \" << name << endl;\n  return 0;\n}\n```", "```cpp\nname: Rafal\n```", "```cpp\n$ mkdir extern\n$ cd extern\n$ git submodule add https://github.com/jbeder/yaml-cpp.git\nCloning into 'chapter07/01-git-submodule-manual/extern/yaml-cpp'...\nremote: Enumerating objects: 8134, done.\nremote: Total 8134 (delta 0), reused 0 (delta 0), pack-reused 8134\nReceiving objects: 100% (8134/8134), 3.86 MiB | 3.24 MiB/s, done.\nResolving deltas: 100% (5307/5307), done.\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(GitSubmoduleManual CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\nadd_subdirectory(extern/yaml-cpp)\ntarget_link_libraries(welcome PRIVATE yaml-cpp)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(GitSubmoduleAuto CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\nfind_package(yaml-cpp QUIET)\nif (NOT yaml-cpp_FOUND)\n  message(\"yaml-cpp not found, initializing git submodule\")\n  execute_process(\n    COMMAND git submodule update --init -- extern/yaml-cpp\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n  add_subdirectory(extern/yaml-cpp)\nendif()\ntarget_link_libraries(welcome PRIVATE yaml-cpp)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(GitClone CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\nfind_package(yaml-cpp QUIET)\nif (NOT yaml-cpp_FOUND)\n  message(\"yaml-cpp not found, cloning git repository\")\n  find_package(Git)\n  if (NOT Git_FOUND)\n    message(FATAL_ERROR \"Git not found, can't initialize!\")\n  endif ()\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} clone\n    https://github.com/jbeder/yaml-cpp.git\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern\n  )  \n  add_subdirectory(extern/yaml-cpp)\nendif()\ntarget_link_libraries(welcome PRIVATE yaml-cpp)\n```", "```cpp\nDOWNLOAD_COMMAND <cmd>...\n```", "```cpp\nURL <url1> [<url2>...]\n```", "```cpp\nGIT_REPOSITORY <url>\nGIT_TAG <tag>\n```", "```cpp\nSVN_REPOSITORY <url>\nSVN_REVISION -r<rev>\n```", "```cpp\nHG_REPOSITORY <url>\nHG_TAG <tag>\n```", "```cpp\nCVS_REPOSITORY <cvsroot>\nCVS_MODULE <module>\nCVS_TAG <tag>\n```", "```cpp\nPATCH_COMMAND <cmd>...\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(ExternalProjectGit CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\ninclude(ExternalProject)\nExternalProject_Add(external-yaml-cpp\n  GIT_REPOSITORY    https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG           yaml-cpp-0.6.3\n)\ntarget_link_libraries(welcome PRIVATE yaml-cpp)\n```", "```cpp\nTarget \"external-yaml-cpp-build\" of type UTILITY may not be linked into another target.\n```", "```cpp\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  # release-1.11.0\n  GIT_TAG        e2239ee6043f73722e7aa812a459f54a28552929 \n)\n```", "```cpp\nFetchContent_Declare(<depName> <contentOptions>...)\n```", "```cpp\nFetchContent_MakeAvailable(<depName>)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(ExternalProjectGit CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\ninclude(FetchContent)\nFetchContent_Declare(external-yaml-cpp\n  GIT_REPOSITORY    https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG           yaml-cpp-0.6.3\n)\nFetchContent_MakeAvailable(external-yaml-cpp)\ntarget_link_libraries(welcome PRIVATE yaml-cpp)\n```", "```cpp\ninclude(CMakePrintHelpers)\ncmake_print_properties(TARGETS yaml-cpp \n  PROPERTIES TYPE SOURCE_DIR)\n```", "```cpp\nProperties for TARGET yaml-cpp:\n   yaml-cpp.TYPE = \"STATIC_LIBRARY\"\n   yaml-cpp.SOURCE_DIR = \"/tmp/b/_deps/external-yaml-cpp-src\"\n```", "```cpp\nNo such TARGET \"yaml-cpp\" !\n```"]