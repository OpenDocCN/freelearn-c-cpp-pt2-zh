["```cpp\n.\n├── cmake\n│   └── UseDoxygenDoc.cmake\n├── CMakeLists.txt\n├── docs\n│   ├── Doxyfile.in\n│   └── front_page.md\n└── src\n    ├── CMakeLists.txt\n    ├── hello-world.cpp\n    ├── Message.cpp\n    └── Message.hpp\n```", "```cpp\n#pragma once\n\n#include <iosfwd>\n#include <string>\n\n/*! \\file Message.hpp */\n\n/*! \\class Message\n * \\brief Forwards string to screen\n * \\author Roberto Di Remigio\n * \\date 2018\n */\nclass Message {\npublic:\n  /*! \\brief Constructor from a string\n   * \\param[in] m a message\n   */\n  Message(const std::string &m) : message_(m) {}\n  /*! \\brief Constructor from a character array\n   * \\param[in] m a message\n   */\n  Message(const char *m) : message_(std::string(m)) {}\n\n  friend std::ostream &operator<<(std::ostream &os, Message &obj) {\n    return obj.printObject(os);\n  }\n\nprivate:\n  /*! The message to be forwarded to screen */\n  std::string message_;\n  /*! \\brief Function to forward message to screen\n   * \\param[in, out] os output stream\n   */\n  std::ostream &printObject(std::ostream &os);\n};\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\ninclude(GNUInstallDirs)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n```", "```cpp\ninclude(UseDoxygenDoc)\n```", "```cpp\nadd_subdirectory(src)\n```", "```cpp\nadd_library(message STATIC\n  Message.hpp\n  Message.cpp\n  )\n```", "```cpp\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\ntarget_link_libraries(hello-world\n  PUBLIC\n    message\n  )\n```", "```cpp\nadd_doxygen_doc(\n  BUILD_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/_build\n  DOXY_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in\n  TARGET_NAME\n    docs\n  COMMENT\n    \"HTML documentation\"\n  )\n```", "```cpp\nfind_package(Perl REQUIRED)\nfind_package(Doxygen REQUIRED)\n```", "```cpp\nfunction(add_doxygen_doc)\n  set(options)\n  set(oneValueArgs BUILD_DIR DOXY_FILE TARGET_NAME COMMENT)\n  set(multiValueArgs)\n\n  cmake_parse_arguments(DOXY_DOC\n    \"${options}\"\n    \"${oneValueArgs}\"\n    \"${multiValueArgs}\"\n    ${ARGN}\n    )\n\n  # ...\n\nendfunction()\n```", "```cpp\nconfigure_file(\n  ${DOXY_DOC_DOXY_FILE}\n  ${DOXY_DOC_BUILD_DIR}/Doxyfile\n  @ONLY\n  )\n```", "```cpp\nadd_custom_target(${DOXY_DOC_TARGET_NAME}\n  COMMAND\n    ${DOXYGEN_EXECUTABLE} Doxyfile\n  WORKING_DIRECTORY\n    ${DOXY_DOC_BUILD_DIR}\n  COMMENT\n    \"Building ${DOXY_DOC_COMMENT} with Doxygen\"\n  VERBATIM\n  )\n```", "```cpp\nmessage(STATUS \"Added ${DOXY_DOC_TARGET_NAME} [Doxygen] target to build documentation\")\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n```", "```cpp\n$ cmake --build . --target docs\n```", "```cpp\n.\n├── cmake\n│   ├── FindSphinx.cmake\n│   └── UseSphinxDoc.cmake\n├── CMakeLists.txt\n├── docs\n│   ├── conf.py.in\n│   └── index.rst\n└── src\n    ├── CMakeLists.txt\n    ├── hello-world.cpp\n    ├── Message.cpp\n    └── Message.hpp\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\ninclude(UseSphinxDoc)\n```", "```cpp\nadd_sphinx_doc(\n  SOURCE_DIR\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs\n  BUILD_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/_build\n  CACHE_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/_doctrees\n  HTML_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/sphinx_html\n  CONF_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs/conf.py.in\n  TARGET_NAME\n    docs\n  COMMENT\n    \"HTML documentation\"\n  )\n```", "```cpp\nfind_package(PythonInterp REQUIRED)\nfind_package(Sphinx REQUIRED)\n```", "```cpp\nfunction(add_sphinx_doc)\n  set(options)\n  set(oneValueArgs\n    SOURCE_DIR\n    BUILD_DIR\n    CACHE_DIR\n    HTML_DIR\n    CONF_FILE\n    TARGET_NAME\n    COMMENT\n    )\n  set(multiValueArgs)\n\n  cmake_parse_arguments(SPHINX_DOC\n    \"${options}\"\n    \"${oneValueArgs}\"\n    \"${multiValueArgs}\"\n    ${ARGN}\n    )\n\n  # ...\n\nendfunction()\n```", "```cpp\nconfigure_file(\n  ${SPHINX_DOC_CONF_FILE}\n  ${SPHINX_DOC_BUILD_DIR}/conf.py\n  @ONLY\n  )\n```", "```cpp\nadd_custom_target(${SPHINX_DOC_TARGET_NAME}\n  COMMAND\n    ${SPHINX_EXECUTABLE}\n       -q\n       -b html\n       -c ${SPHINX_DOC_BUILD_DIR}\n       -d ${SPHINX_DOC_CACHE_DIR}\n       ${SPHINX_DOC_SOURCE_DIR}\n       ${SPHINX_DOC_HTML_DIR}\n  COMMENT\n    \"Building ${SPHINX_DOC_COMMENT} with Sphinx\"\n  VERBATIM\n  )\n```", "```cpp\nmessage(STATUS \"Added ${SPHINX_DOC_TARGET_NAME} [Sphinx] target to build documentation\")\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build . --target docs\n```", "```cpp\n.\n├── cmake\n│   ├── FindPythonModule.cmake\n│   ├── FindSphinx.cmake\n│   └── UseBreathe.cmake\n├── CMakeLists.txt\n├── docs\n│   ├── code-reference\n│   │   ├── classes-and-functions.rst\n│   │   └── message.rst\n│   ├── conf.py.in\n│   ├── Doxyfile.in\n│   └── index.rst\n└── src\n    ├── CMakeLists.txt\n    ├── hello-world.cpp\n    ├── Message.cpp\n    └── Message.hpp\n```", "```cpp\nMessaging classes\n=================\n\nMessage\n-------\n.. doxygenclass:: Message\n   :project: recipe-03\n   :members:\n   :protected-members:\n   :private-members:\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\ninclude(UseBreathe)\n```", "```cpp\nadd_breathe_doc(\n  SOURCE_DIR\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs\n  BUILD_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/_build\n  CACHE_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/_doctrees\n  HTML_DIR\n    ${CMAKE_CURRENT_BINARY_DIR}/html\n  DOXY_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in\n  CONF_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/docs/conf.py.in\n  TARGET_NAME\n    docs\n  COMMENT\n    \"HTML documentation\"\n  )\n```", "```cpp\nfind_package(Doxygen REQUIRED)\nfind_package(Perl REQUIRED)\n```", "```cpp\nfind_package(PythonInterp REQUIRED)\nfind_package(Sphinx REQUIRED)\n```", "```cpp\ninclude(FindPythonModule)\nfind_python_module(breathe REQUIRED)\n```", "```cpp\nfunction(add_breathe_doc)\n  set(options)\n  set(oneValueArgs\n    SOURCE_DIR\n    BUILD_DIR\n    CACHE_DIR\n    HTML_DIR\n    DOXY_FILE\n    CONF_FILE\n    TARGET_NAME\n    COMMENT\n    )\n  set(multiValueArgs)\n\n  cmake_parse_arguments(BREATHE_DOC\n    \"${options}\"\n    \"${oneValueArgs}\"\n    \"${multiValueArgs}\"\n    ${ARGN}\n    )\n\n  # ...\n\nendfunction()\n```", "```cpp\nconfigure_file(\n  ${BREATHE_DOC_CONF_FILE}\n  ${BREATHE_DOC_BUILD_DIR}/conf.py\n  @ONLY\n  )\n```", "```cpp\nconfigure_file(\n  ${BREATHE_DOC_DOXY_FILE}\n  ${BREATHE_DOC_BUILD_DIR}/Doxyfile\n  @ONLY\n  )\n```", "```cpp\nadd_custom_target(${BREATHE_DOC_TARGET_NAME}\n  COMMAND\n    ${SPHINX_EXECUTABLE}\n       -q\n       -b html\n       -c ${BREATHE_DOC_BUILD_DIR}\n       -d ${BREATHE_DOC_CACHE_DIR}\n       ${BREATHE_DOC_SOURCE_DIR}\n       ${BREATHE_DOC_HTML_DIR}\n  COMMENT\n    \"Building ${BREATHE_DOC_TARGET_NAME} documentation with Breathe, Sphinx and Doxygen\"\n  VERBATIM\n  )\n```", "```cpp\nmessage(STATUS \"Added ${BREATHE_DOC_TARGET_NAME} [Breathe+Sphinx+Doxygen] target to build documentation\")\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build . --target docs\n```", "```cpp\ndef run_doxygen(folder):\n    \"\"\"Run the doxygen make command in the designated folder\"\"\"\n\n    try:\n        retcode = subprocess.call(\"cd {}; doxygen\".format(folder), shell=True)\n        if retcode < 0:\n            sys.stderr.write(\n                \"doxygen terminated by signal {}\".format(-retcode))\n    except OSError as e:\n        sys.stderr.write(\"doxygen execution failed: {}\".format(e))\n\ndef setup(app):\n    run_doxygen('@BREATHE_DOC_BUILD_DIR@')\n```"]