["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\ncmake --install <build tree> \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(B)\ninclude(/path/to/A/TargetsOfA.cmake) \n```", "```cpp\nexport(**TARGETS [target1 [target2 [...]]]**\n       [NAMESPACE <namespace>] [APPEND] **FILE** **<path>**\n       [EXPORT_LINK_INTERFACE_LIBRARIES]\n) \n```", "```cpp\n#pragma once\nint Sum(int a, int b);\nint Multiply(int a, int b); \n```", "```cpp\nadd_library(calc STATIC basic.cpp)\ntarget_include_directories(calc INTERFACE include) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(ExportCalcCXX)\nadd_subdirectory(src bin)\nset(EXPORT_DIR \"${CMAKE_CURRENT_BINARY_DIR}/cmake\")\nexport(TARGETS calc\n  FILE \"${EXPORT_DIR}/CalcTargets.cmake\"\n  NAMESPACE Calc::\n) \n```", "```cpp\nexport(EXPORT <export> [NAMESPACE <namespace>] [FILE <path>]) \n```", "```cpp\ninstall(TARGETS calc EXPORT CalcTargets)\nexport(EXPORT CalcTargets\n  FILE \"${EXPORT_DIR}/CalcTargets2.cmake\"\n  NAMESPACE Calc::\n) \n```", "```cpp\n# Create imported target Calc::calc\nadd_library(Calc::calc STATIC IMPORTED)\nset_target_properties(Calc::calc PROPERTIES\n  INTERFACE_INCLUDE_DIRECTORIES\n  **\"/<source-tree>/include\"**\n)\n# Import target \"Calc::calc\" for configuration \"\"\nset_property(TARGET Calc::calc APPEND PROPERTY\n  IMPORTED_CONFIGURATIONS NOCONFIG\n)\nset_target_properties(Calc::calc PROPERTIES\n  IMPORTED_LINK_INTERFACE_LANGUAGES_NOCONFIG \"CXX\"\n  IMPORTED_LOCATION_NOCONFIG \"**/<build-tree>/libcalc.a**\"\n) \n```", "```cpp\ncmake --install <dir> [<options>] \n```", "```cpp\ninstall(TARGETS <target>... [EXPORT <export-name>]\n        [<output-artifact-configuration> ...]\n        [INCLUDES DESTINATION [<dir> ...]]\n) \n```", "```cpp\n**<TYPE>** [DESTINATION <dir>]\n       [PERMISSIONS permissions...]\n       [CONFIGURATIONS [Debug|Release|...]]\n       [COMPONENT <component>]\n       [NAMELINK_COMPONENT <component>]\n       [OPTIONAL] [EXCLUDE_FROM_ALL]\n       [NAMELINK_ONLY|NAMELINK_SKIP] \n```", "```cpp\ninstall(TARGETS executable, static_lib1\n  DESTINATION /tmp\n) \n```", "```cpp\n${CMAKE_INSTALL_PREFIX} + ${DESTINATION} \n```", "```cpp\n-DCMAKE_INSTALL_BINDIR=/path/in/the/system \n```", "```cpp\n#include <calc/basic.h> \n```", "```cpp\ntarget_sources(<target>\n  [<PUBLIC|PRIVATE|INTERFACE>\n   **[FILE_SET <name> TYPE <type> [BASE_DIR <dir>] FILES]**\n   <files>...\n  ]...\n) \n```", "```cpp\nadd_library(calc STATIC basic.cpp)\ntarget_include_directories(calc INTERFACE include)\ntarget_sources(calc PUBLIC FILE_SET HEADERS\n                           BASE_DIRS include\n                           FILES include/calc/basic.h\n) \n target file set called HEADERS. We’re using a special case here: if the name of the file set matches one of the available types, CMake will assume we want the file set to be of such type, eliminating the need to define the type explicitly. If you use a different name, remember to define the FILE_SET's type with the appropriate TYPE <TYPE> keyword.\n```", "```cpp\n...\ninclude(GNUInstallDirs)\ninstall(TARGETS calc ARCHIVE FILE_SET HEADERS) \n```", "```cpp\n# cmake -S <source-tree> -B <build-tree>\n# cmake --build <build-tree>\n# cmake --install <build-tree>\n-- Install configuration: \"\"\n-- Installing: /usr/local/lib/libcalc.a\n-- Installing: /usr/local/include/calc/basic.h \n```", "```cpp\nadd_library(calc STATIC basic.cpp)\ntarget_include_directories(calc INTERFACE include)\nset_target_properties(calc PROPERTIES\n  PUBLIC_HEADER src/include/calc/basic.h\n) \n```", "```cpp\n...\ninclude(GNUInstallDirs)\ninstall(TARGETS calc\n  ARCHIVE\n  **PUBLIC_HEADER**\n  **DESTINATION** **${CMAKE_INSTALL_INCLUDEDIR}****/calc**\n) \n```", "```cpp\ninstall(<FILES|PROGRAMS> files...\n        TYPE <type> | DESTINATION <dir>\n        [PERMISSIONS permissions...]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT <component>]\n        [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL]\n) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(InstallFiles CXX)\ninclude(GNUInstallDirs)\ninstall(FILES\n  src/include/calc/basic.h\n  src/include/calc/nested/calc_extended.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/calc\n) \n```", "```cpp\n# cmake -S <source-tree> -B <build-tree>\n# cmake --build <build-tree>\n# cmake --install <build-tree>\n-- Install configuration: \"\"\n-- Installing: /usr/local/include/calc/basic.h\n-- Installing: /usr/local/include/calc/calc_extended.h \n```", "```cpp\ninstall(DIRECTORY dirs...\n        TYPE <type> | DESTINATION <dir>\n        [FILE_PERMISSIONS permissions...]\n        [DIRECTORY_PERMISSIONS permissions...]\n        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [COMPONENT <component>] [EXCLUDE_FROM_ALL]\n        [FILES_MATCHING]\n        [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE]\n        [PERMISSIONS permissions...]] [...]\n) \n```", "```cpp\ninstall(DIRECTORY aaa DESTINATION /xxx) \n```", "```cpp\ninstall(DIRECTORY aaa/ DESTINATION /xxx) \n```", "```cpp\nPATTERN <pat> | REGEX <reg> [EXCLUDE] [PERMISSIONS <perm>] \n```", "```cpp\ndata\n- data.csv \n```", "```cpp\nsrc\n- include\n  - calc\n    - basic.h\n    - ignored\n      - empty.file\n    - nested\n      - calc_extended.h \n```", "```cpp\netc\n- calc\n  - nested.conf\n- sample.conf \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(InstallDirectories CXX)\ninstall(DIRECTORY data/ DESTINATION share/calc) \n```", "```cpp\n...\ninclude(GNUInstallDirs)\ninstall(DIRECTORY src/include/calc TYPE INCLUDE\n  PATTERN \"ignored\" EXCLUDE\n  PATTERN \"calc_extended.h\" EXCLUDE\n) \n```", "```cpp\ninstall(DIRECTORY etc/ TYPE SYSCONF\n  DIRECTORY_PERMISSIONS\n    OWNER_READ OWNER_WRITE OWNER_EXECUTE\n  PATTERN \"nested.conf\"\n    PERMISSIONS OWNER_READ OWNER_WRITE\n) \n```", "```cpp\ninstall([[SCRIPT <file>] [CODE <code>]]\n        [ALL_COMPONENTS | COMPONENT <component>]\n        [EXCLUDE_FROM_ALL] [...]\n) \nto execute during installation. To illustrate, let’s modify the 02-install-targets example to build a shared library:\n```", "```cpp\nadd_library(calc **SHARED** basic.cpp)\ntarget_include_directories(calc INTERFACE include)\ntarget_sources(calc PUBLIC FILE_SET HEADERS\n                           BASE_DIRS include\n                           FILES include/calc/basic.h\n) \n```", "```cpp\ninstall(TARGETS calc **LIBRARY** FILE_SET HEADERS))\n**if** **(UNIX)**\n**install****(CODE** **\"execute_process(COMMAND ldconfig)\"****)**\n**endif****()** \n```", "```cpp\n# cmake -S <source-tree> -B <build-tree>\n# cmake --build <build-tree>\n# cmake --install <build-tree>\n-- Install configuration: \"\"\n-- Installing: /usr/local/lib/libcalc.so\n-- Installing: /usr/local/include/calc/basic.h\n# ldconfig -p | grep libcalc\n        libcalc.so (libc6,x86-64) => /usr/local/lib/libcalc.so \n```", "```cpp\ninstall(TARGETS ... RUNTIME_DEPENDENCY_SET <set-name>)\ninstall(RUNTIME_DEPENDENCY_SET <set-name> <arg>...) \n```", "```cpp\ninstall(TARGETS ... RUNTIME_DEPENDENCIES <arg>...) \n```", "```cpp\ninstall(IMPORTED_RUNTIME_ARTIFACTS <target>...) \nRUNTIME_DEPENDENCY_SET <set-name> argument to create a named reference that can be later used in the install(RUNTIME_DEPENDENCY_SET) command.\n```", "```cpp\nadd_library(calc STATIC basic.cpp)\n**target_include_directories****(calc INTERFACE include)**\nset_target_properties(calc PROPERTIES\n  PUBLIC_HEADER src/include/calc/basic.h\n) \n```", "```cpp\ninclude directory path still points to its source tree.\n```", "```cpp\nadd_library(calc STATIC basic.cpp)\ntarget_include_directories(calc INTERFACE\n**\"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"**\n**\"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"**\n)\nset_target_properties(calc PROPERTIES\n  PUBLIC_HEADER \"include/calc/basic.h\"\n) \n```", "```cpp\n\"/root/examples/ch14/07-install-export/src/include\" \"\" \n```", "```cpp\n\"\" \"/usr/lib/calc/include\" \n```", "```cpp\ntarget_include_directories(my_target PUBLIC\n  $<INSTALL_INTERFACE:**$<INSTALL_PREFIX>**/include/MyTarget>\n) \n```", "```cpp\ntarget_include_directories(my_target PUBLIC\n  $<INSTALL_INTERFACE:include/MyTarget>\n) \n```", "```cpp\ninstall(EXPORT <export-name> DESTINATION <dir>\n        [NAMESPACE <namespace>] [[FILE <name>.cmake]|\n        [PERMISSIONS permissions...]\n        [CONFIGURATIONS [Debug|Release|...]]\n        [EXPORT_LINK_INTERFACE_LIBRARIES]\n        [COMPONENT <component>]\n        [EXCLUDE_FROM_ALL]) \n```", "```cpp\nadd_library(calc STATIC basic.cpp)\ntarget_sources(calc\n  PUBLIC FILE_SET HEADERS BASE_DIRS include\n  FILES \"include/calc/basic.h\"\n)\ninclude(GNUInstallDirs)\ninstall(TARGETS calc EXPORT CalcTargets ARCHIVE FILE_SET HEADERS) **install****(****EXPORT** **CalcTargets**\n **DESTINATION** **${CMAKE_INSTALL_LIBDIR}****/calc/cmake**\n **NAMESPACE Calc::**\n**)** \n```", "```cpp\n...\n-- Installing: /usr/local/lib/calc/cmake/CalcTargets.cmake\n-- Installing: /usr/local/lib/calc/cmake/CalcTargets-noconfig.cmake \n```", "```cpp\n# cmake --install <build tree> --install-prefix=<path> \n```", "```cpp\n# cmake -B <build tree> -DCMAKE_PREFIX_PATH=<installation path> \n```", "```cpp\n<prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake) \n```", "```cpp\n...\n**install****(****EXPORT** **CalcTargets**\n **DESTINATION** **${CMAKE_INSTALL_LIBDIR}****/calc/cmake**\n **NAMESPACE Calc::**\n**)**\n**install****(FILES** **\"CalcConfig.cmake\"**\n **DESTINATION** **${CMAKE_INSTALL_LIBDIR}****/calc/cmake**\n**)** \n```", "```cpp\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/CalcTargets.cmake\") \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(FindCalcPackage CXX)\nfind_package(Calc REQUIRED)\ninclude(CMakePrintHelpers)\nmessage(\"CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}\")\nmessage(\"CALC_FOUND: ${Calc_FOUND}\")\ncmake_print_properties(TARGETS \"Calc::calc\" PROPERTIES\n  IMPORTED_CONFIGURATIONS\n  INTERFACE_INCLUDE_DIRECTORIES\n) \n```", "```cpp\n# cmake -S <source-tree-of-08> -B <build-tree-of-08>\n# cmake --build <build-tree-of-08>\n# cmake --install <build-tree-of-08>\n# cmake -S <source-tree-of-09> -B <build-tree-of-09>  \n        -DCMAKE_PREFIX_PATH=<build-tree-of-08> \n```", "```cpp\nCMAKE_PREFIX_PATH: <build-tree-of-08>\nCALC_FOUND: 1\n--\nProperties for TARGET Calc::calc:\n   Calc::calc.IMPORTED_CONFIGURATIONS = \"NOCONFIG\"\n   Calc::calc.INTERFACE_INCLUDE_DIRECTORIES = \"<build-tree-of-08>/include\"\n-- Configuring done\n-- Generating done\n-- Build files have been written to: <build-tree-of-09> \n```", "```cpp\nconfigure_package_config_file(<template> <output>\n  INSTALL_DESTINATION <path>\n  [PATH_VARS <var1> <var2> ... <varN>]\n  [NO_SET_AND_CHECK_MACRO]\n  [NO_CHECK_REQUIRED_COMPONENTS_MACRO]\n  [INSTALL_PREFIX <path>]\n) \n```", "```cpp\n...\ninstall(EXPORT CalcTargets\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake\n  NAMESPACE Calc::\n)\n**include****(CMakePackageConfigHelpers)**\n**set****(LIB_INSTALL_DIR** **${CMAKE_INSTALL_LIBDIR}****/calc)**\n**configure_package_config_file(**\n  **${CMAKE_CURRENT_SOURCE_DIR}****/CalcConfig.cmake.in**\n  **\"${CMAKE_CURRENT_BINARY_DIR}/CalcConfig.cmake\"**\n  **INSTALL_DESTINATION** **${CMAKE_INSTALL_LIBDIR}****/calc/cmake**\n  **PATH_VARS LIB_INSTALL_DIR**\n**)**\ninstall(FILES **\"${CMAKE_CURRENT_BINARY_DIR}/CalcConfig.cmake\"**\n  **DESTINATION** **${CMAKE_INSTALL_LIBDIR}****/calc/cmake**\n) \n```", "```cpp\n@PACKAGE_INIT@\nset_and_check(CALC_LIB_DIR \"@PACKAGE_LIB_INSTALL_DIR@\")\ninclude(\"${CALC_LIB_DIR}/cmake/CalcTargets.cmake\")\ncheck_required_components(Calc) \n```", "```cpp\n#### Expanded from @PACKAGE_INIT@ by\n  configure_package_config_file() #######\n#### Any changes to this file will be overwritten by the\n  next CMake run ####\n#### The input file was CalcConfig.cmake.in  #####\nget_filename_component(PACKAGE_PREFIX_DIR\n  \"${CMAKE_CURRENT_LIST_DIR}/../../../\" ABSOLUTE)\nmacro(set_and_check _var _file) \n  # ... removed for brevity\nendmacro()\nmacro(check_required_components _NAME) \n  # ... removed for brevity\nendmacro()\n##################################################################\nset_and_check(CALC_LIB_DIR \"${PACKAGE_PREFIX_DIR}/lib/calc\")\ninclude(\"${CALC_LIB_DIR}/cmake/CalcTargets.cmake\")\ncheck_required_components(Calc) \n```", "```cpp\nfind_package(Calc 1.2.3 REQUIRED) \n```", "```cpp\nwrite_basic_package_version_file(\n  <filename> [VERSION <ver>]\n  COMPATIBILITY <AnyNewerVersion | SameMajorVersion |\n                 SameMinorVersion | ExactVersion>\n  [ARCH_INDEPENDENT]\n) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\n**project****(VersionFile VERSION** **1.2****.****3** **LANGUAGES CXX)**\n...\n**include****(CMakePackageConfigHelpers)**\n**write_basic_package_version_file(**\n  **\"${CMAKE_CURRENT_BINARY_DIR}/CalcConfigVersion.cmake\"**\n  **COMPATIBILITY AnyNewerVersion**\n**)**\ninstall(FILES \"CalcConfig.cmake\"\n  **\"${CMAKE_CURRENT_BINARY_DIR}/CalcConfigVersion.cmake\"**\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake\n) \n```", "```cpp\nfind_package(<PackageName> \n             [version] [EXACT] [QUIET] [MODULE] [REQUIRED]\n             **[[COMPONENTS] [components...]]**\n             **[OPTIONAL_COMPONENTS components...]**\n             [NO_POLICY_SCOPE]\n) \n```", "```cpp\ncmake --install <build tree> \n      --component=<component1 name> --component=<component2 name> \n```", "```cpp\ninstall(TARGETS calc EXPORT CalcTargets\n  ARCHIVE\n    **COMPONENT lib**\n  FILE_SET HEADERS\n    **COMPONENT headers**\n)\ninstall(EXPORT CalcTargets\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake\n  NAMESPACE Calc::\n  **COMPONENT lib**\n)\ninstall(CODE \"MESSAGE(\\\"Installing 'extra' component\\\")\"\n  **COMPONENT extra**\n  **EXCLUDE_FROM_ALL**\n) \n```", "```cpp\ninstall(TARGETS <target> LIBRARY \n        COMPONENT cmp NAMELINK_SKIP) \n```", "```cpp\ninstall(TARGETS <target> LIBRARY \n        COMPONENT lnk NAMELINK_ONLY) \n```", "```cpp\ninstall(TARGETS <target> LIBRARY \n        COMPONENT cmp NAMELINK_COMPONENT lnk) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\n**project****(CPackPackage VERSION** **1.2****.****3** **LANGUAGES CXX)**\ninclude(GNUInstallDirs)\nadd_subdirectory(src bin)\ninstall(...)\ninstall(...)\ninstall(...)\n**set****(CPACK_PACKAGE_VENDOR** **\"Rafal Swidzinski\"****)**\n**set****(CPACK_PACKAGE_CONTACT** **\"email@example.com\"****)**\n**set****(CPACK_PACKAGE_DESCRIPTION** **\"Simple Calculator\"****)**\n**include****(CPack)** \n```", "```cpp\n$CPACK_PACKAGE_NAME-$CPACK_PACKAGE_VERSION-$CPACK_SYSTEM_NAME \n```", "```cpp\ncpack [<options>] \n```", "```cpp\ncpack -G \"ZIP;7Z;DEB\" -B packages \n```"]