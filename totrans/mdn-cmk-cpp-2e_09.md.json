["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\n$ apt update\n$ apt install protobuf-compiler libprotobuf-dev \n```", "```cpp\nsyntax = \"proto3\";\nmessage Message {\n    int32 id = 1;\n} \n```", "```cpp\n**#****include****\"message.pb.h\"**\n#include <fstream>\nusing namespace std;\nint main()\n{\n  **Message m;**\n  **m.****set_id****(****123****);**\n  **m.****PrintDebugString****();**\n  fstream fo(\"./hello.data\", ios::binary | ios::out);\n  **m.****SerializeToOstream****(&fo);**\n  fo.close();\n  return 0;\n} \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(FindPackageProtobufVariables CXX)\n**find_package****(Protobuf REQUIRED)**\nprotobuf_generate_cpp(GENERATED_SRC GENERATED_HEADER\n                      message.proto)\nadd_executable(main main.cpp ${GENERATED_SRC} ${GENERATED_HEADER})\ntarget_link_libraries(main PRIVATE **${Protobuf_LIBRARIES}**)\ntarget_include_directories(main PRIVATE\n  **${Protobuf_INCLUDE_DIRS}**${CMAKE_CURRENT_BINARY_DIR}\n) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(FindPackageProtobufTargets CXX)\nfind_package(Protobuf REQUIRED)\nprotobuf_generate_cpp(GENERATED_SRC GENERATED_HEADER\n  message.proto)\nadd_executable(main main.cpp ${GENERATED_SRC} ${GENERATED_HEADER})\ntarget_link_libraries(main PRIVATE **protobuf::libprotobuf**)\ntarget_include_directories(main PRIVATE\n                                ${CMAKE_CURRENT_BINARY_DIR}) \n```", "```cpp\nfind_package(<Name> [version] [EXACT] [QUIET] [REQUIRED]) \n```", "```cpp\ncmake -B <build tree> -S <source tree> --debug-find-pkg=<pkg> \n```", "```cpp\napt-get install libpqxx-dev \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(FindPackageCustom CXX)\n**list****(APPEND CMAKE_MODULE_PATH**\n            **\"${CMAKE_SOURCE_DIR}/cmake/module/\"****)**\n**find_package****(PQXX REQUIRED)**\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE **PQXX::PQXX**) \n```", "```cpp\n# Defining IMPORTED targets\nfunction(define_imported_target library headers)\n  add_library(PQXX::PQXX UNKNOWN IMPORTED)\n  set_target_properties(PQXX::PQXX PROPERTIES\n    IMPORTED_LOCATION ${library}\n    INTERFACE_INCLUDE_DIRECTORIES ${headers}\n  )\n  set(PQXX_FOUND 1 CACHE INTERNAL \"PQXX found\" FORCE)\n  set(PQXX_LIBRARIES ${library}\n      CACHE STRING \"Path to pqxx library\" FORCE)\n  set(PQXX_INCLUDES ${headers}\n      CACHE STRING \"Path to pqxx headers\" FORCE)\n  mark_as_advanced(FORCE PQXX_LIBRARIES)\n  mark_as_advanced(FORCE PQXX_INCLUDES)\nendfunction() \n```", "```cpp\n...\n# Accepting user-provided paths and reusing cached values\nif (PQXX_LIBRARIES AND PQXX_INCLUDES)\n  define_imported_target(${PQXX_LIBRARIES} ${PQXX_INCLUDES})\n  return()\nendif() \n```", "```cpp\n# Searching for nested dependencies\nset(QUIET_ARG)\nif(PQXX_FIND_QUIETLY)\n  **set****(QUIET_ARG QUIET)**\nendif()\nset(REQUIRED_ARG)\nif(PQXX_FIND_REQUIRED)\n  **set****(REQUIRED_ARG REQUIRED)**\nendif()\n**find_package****(PostgreSQL** **${QUIET_ARG}****${REQUIRED_ARG}****)** \n```", "```cpp\nfind_library(**<VAR_NAME>****<NAMES>****<PATHS>** NAMES  PATHS  <...>) \n```", "```cpp\n...\n# Searching for library files\nfile(TO_CMAKE_PATH \"$ENV{PQXX_DIR}\" _PQXX_DIR)\nfind_library(PQXX_LIBRARY_PATH NAMES **libpqxx pqxx**\n  PATHS\n    ${_PQXX_DIR}/lib/${CMAKE_LIBRARY_ARCHITECTURE}\n    # (...) many other paths - removed for brevity\n    /usr/lib\n  NO_DEFAULT_PATH\n) \n```", "```cpp\n...\n# Searching for header files\nfind_path(PQXX_HEADER_PATH NAMES **pqxx/pqxx**\n  PATHS\n    ${_PQXX_DIR}/include\n    # (...) many other paths - removed for brevity\n    /usr/include\n  NO_DEFAULT_PATH\n) \n```", "```cpp\n...\n# Returning the final results\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(\n  PQXX DEFAULT_MSG PQXX_LIBRARY_PATH PQXX_HEADER_PATH\n)\nif (PQXX_FOUND)\n  **define_imported_target(**\n    **\"${PQXX_LIBRARY_PATH};${POSTGRES_LIBRARIES}\"**\n    **\"${PQXX_HEADER_PATH};${POSTGRES_INCLUDE_DIRECTORIES}\"**\n  **)**\nelseif(PQXX_FIND_REQUIRED)\n  message(FATAL_ERROR \"Required PQXX library not found\")\nendif() \n```", "```cpp\nprefix=/usr/local\nexec_prefix=${prefix}\nincludedir=${prefix}/include\nlibdir=${exec_prefix}/lib\nName: foobar\nDescription: A foobar library\nVersion: 1.0.0\nCflags: -I${includedir}/foobar\nLibs: -L${libdir} -lfoobar \n```", "```cpp\n#include <pqxx/pqxx>\nint main()\n{\n  // We're not actually connecting, but\n  // just proving that pqxx is available.\n  pqxx::nullconnection connection;\n} \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(FindPkgConfig CXX)\n**find_package****(PkgConfig REQUIRED)**\n**pkg_check_modules(PQXX REQUIRED IMPORTED_TARGET libpqxx)**\nmessage(\"PQXX_FOUND: ${**PQXX_FOUND**}\")\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE **PkgConfig::PQXX**) \n```", "```cpp\nFetchContent_Declare(<depName> <contentOptions>...) \n```", "```cpp\n#include <string>\n#include <iostream>\n#include \"yaml-cpp/yaml.h\"\nusing namespace std;\nint main() {\n  string name = \"Guest\";\n  YAML::Node config = YAML::LoadFile(\"config.yaml\");\n  if (config[\"name\"])\n    name = config[\"name\"].as<string>();\n  cout << \"Welcome \" << name << endl;\n  return 0;\n} \n```", "```cpp\nname: Rafal \n```", "```cpp\ncmake_minimum_required(VERSION 3.26.0)\nproject(ExternalProjectGit CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\n**include****(FetchContent)**\n**FetchContent_Declare(external-yaml-cpp**\n **GIT_REPOSITORY    https://github.com/jbeder/yaml-cpp.git**\n **GIT_TAG** **0.8****.****0**\n**)**\n**FetchContent_MakeAvailable(external-yaml-cpp)**\ntarget_link_libraries(welcome PRIVATE yaml-cpp::yaml-cpp) \n```", "```cpp\ninclude(CMakePrintHelpers)\ncmake_print_properties(TARGETS yaml-cpp::yaml-cpp\n                       PROPERTIES TYPE SOURCE_DIR) \n```", "```cpp\nProperties for TARGET yaml-cpp::yaml-cpp:\n   yaml-cpp.TYPE = \"STATIC_LIBRARY\"\n   yaml-cpp.SOURCE_DIR = \"/tmp/b/_deps/external-yaml-cpp-src\" \n```", "```cpp\n~/examples/ch09/05-fetch-content$ /tmp/b/welcome\nWelcome Rafal \n```", "```cpp\nFetchContent_MakeAvailable(lib-A lib-B lib-C) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **URL <url1> [<url2>...]**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **GIT_REPOSITORY <url>**\n                     **GIT_TAG <tag>**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **SVN_REPOSITORY <url>**\n                     **SVN_REVISION -r<rev>**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **HG_REPOSITORY <url>**\n                     **HG_TAG <tag>**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **CVS_REPOSITORY <cvsroot>**\n                     **CVS_MODULE <module>**\n                     **CVS_TAG <tag>**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **GIT_REPOSITORY <url>**\n                     GIT_TAG <tag>\n                     **UPDATE_COMMAND <cmd>**\n                     **PATCH_COMMAND <cmd>**\n) \n```", "```cpp\nFetchContent_Declare(dependency-id\n                     **GIT_REPOSITORY <url>**\n                     GIT_TAG <tag>\n                     **FIND_PACKAGE_ARGS <args>**\n) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(ExternalProjectGit CXX)\nadd_executable(welcome main.cpp)\nconfigure_file(config.yaml config.yaml COPYONLY)\ninclude(FetchContent)\nFetchContent_Declare(external-yaml-cpp\n  GIT_REPOSITORY    https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG           0.8.0\n  FIND_PACKAGE_ARGS NAMES yaml-cpp\n)\nFetchContent_MakeAvailable(external-yaml-cpp)\ntarget_link_libraries(welcome PRIVATE yaml-cpp::yaml-cpp)\ninclude(CMakePrintHelpers)\ncmake_print_properties(TARGETS yaml-cpp::yaml-cpp\n                       PROPERTIES TYPE SOURCE_DIR\n                       INTERFACE_INCLUDE_DIRECTORIES\n                      ) \n```", "```cpp\ngit clone https://github.com/jbeder/yaml-cpp.git\ncmake -S yaml-cpp -B build-dir\ncmake --build build-dir\ncmake --install build-dir \n```", "```cpp\n--\n Properties for TARGET yaml-cpp::yaml-cpp:\n   yaml-cpp::yaml-cpp.TYPE = \"STATIC_LIBRARY\"\n   yaml-cpp::yaml-cpp.INTERFACE_INCLUDE_DIRECTORIES =\n                                                \"/usr/local/include\" \n```", "```cpp\nfind_package(yaml-cpp QUIET)\nif (NOT TARGET yaml-cpp::yaml-cpp)\n  # download missing dependency\nendif() \n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(external-yaml-cpp\n  GIT_REPOSITORY    https://github.com/jbeder/yaml-cpp.git\n  GIT_TAG           0.8.0\n  INSTALL_COMMAND   \"\"\n  TEST_COMMAND      \"\"\n) \n```"]