["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\ncmake_minimum_required(VERSION 3.20)\nproject(Hello)\nadd_executable(Hello hello.cpp)\n```", "```cpp\nproject(<PROJECT-NAME> [<language-name>...])\nproject(<PROJECT-NAME>\n        [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\n        [DESCRIPTION <project-description-string>]\n        [HOMEPAGE_URL <url-string>]\n        [LANGUAGES <language-name>...])\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Rental CXX)\nadd_executable(Rental\n               main.cpp\n               cars/car.cpp  \n               # more files in other directories \n)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Rental CXX)\ninclude(cars/cars.cmake)\nadd_executable(Rental\n               main.cpp\n               ${cars_sources}\n               # ${more variables}\n)\n```", "```cpp\nset(cars_sources\n    cars/car.cpp\n#   cars/car_maintenance.cpp\n)\n```", "```cpp\nadd_subdirectory(source_dir [binary_dir]\n  [EXCLUDE_FROM_ALL])\n```", "```cpp\nchapter03/03-add_subdirectory# tree -A\n.\n├── CMakeLists.txt\n├── cars\n│   ├── CMakeLists.txt\n│   ├── car.cpp\n│   └── car.h\n└── main.cpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Rental CXX)\nadd_executable(Rental main.cpp)\nadd_subdirectory(cars)\ntarget_link_libraries(Rental PRIVATE cars)\n```", "```cpp\nadd_library(cars OBJECT\n    car.cpp\n#   car_maintenance.cpp\n)\ntarget_include_directories(cars PUBLIC .)\n```", "```cpp\n#include \"car.h\"\n```", "```cpp\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  message(STATUS \"Doing things the usual way\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  message(STATUS \"Thinking differently\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  message(STATUS \"I'm supported here too.\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  message(STATUS \"I buy mainframes.\")\nelse()\n  message(STATUS \"This is ${CMAKE_SYSTEM_NAME} speaking.\")\nendif()\n```", "```cpp\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  message(STATUS \"Target is 64 bits\")\nendif()\n```", "```cpp\nset_property(TARGET <target> PROPERTY CXX_STANDARD <standard>)\n```", "```cpp\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nTarget \"Standard\" requires the language dialect \"CXX23\" (with compiler extensions), but CMake does not know the compile flags to use to enable it.\n```", "```cpp\nset(CMAKE_CXX_EXTENSIONS OFF)\n```", "```cpp\ninclude(CheckIPOSupported) \ncheck_ipo_supported(RESULT ipo_supported)\nif(ipo_supported)\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION True)\nendif()\n```", "```cpp\nlist(FIND CMAKE_CXX_COMPILE_FEATURES \n  cxx_variable_templates result)\nif(result EQUAL -1)\n  message(FATAL_ERROR \"I really need variable templates.\")\nendif()\n```", "```cpp\n#include <iostream>\nint main()\n{\n  std::cout << \"Quick check if things work.\" << std::endl;\n}\n```", "```cpp\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\ntry_run(run_result compile_result\n${CMAKE_BINARY_DIR}/test_output \n        ${CMAKE_SOURCE_DIR}/main.cpp\n        RUN_OUTPUT_VARIABLE output)\nmessage(\"run_result: ${run_result}\")\nmessage(\"compile_result: ${compile_result}\")\nmessage(\"output:\\n\" ${output})\n```", "```cpp\ntry_run(<runResultVar> <compileResultVar>\n        <bindir> <srcfile> [CMAKE_FLAGS <flags>...]\n        [COMPILE_DEFINITIONS <defs>...]\n        [LINK_OPTIONS <options>...]\n        [LINK_LIBRARIES <libs>...]\n        [COMPILE_OUTPUT_VARIABLE <var>]\n        [RUN_OUTPUT_VARIABLE <var>]\n        [OUTPUT_VARIABLE <var>]\n        [WORKING_DIRECTORY <var>]\n        [ARGS <args>...])\n```", "```cpp\n# add this options before PROJECT keyword\nset(CMAKE_DISABLE_SOURCE_CHANGES ON)\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n```", "```cpp\nCMake Error at /opt/cmake/share/cmake-3.20/Modules/CMakeDetermineSystem.cmake:203 (file):\n  file attempted to write a file:\n  /root/examples/chapter03/09-in-source/CMakeFiles/CMakeOutput.log into a source\n  directory.\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(NoInSource CXX)\nif(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)\n  message(FATAL_ERROR \"In-source builds are not allowed\")\nendif()\nmessage(\"Build successful!\")\n```"]