["```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES NONE)\n\n```", "```cpp\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  message(STATUS \"Configuring on/for Linux\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  message(STATUS \"Configuring on/for macOS\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  message(STATUS \"Configuring on/for Windows\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  message(STATUS \"Configuring on/for IBM AIX\")\nelse()\n  message(STATUS \"Configuring on/for ${CMAKE_SYSTEM_NAME}\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```", "```cpp\n-- Configuring on/for Linux\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() {\n#ifdef IS_WINDOWS\n  return std::string(\"Hello from Windows!\");\n#elif IS_LINUX\n  return std::string(\"Hello from Linux!\");\n#elif IS_MACOS\n  return std::string(\"Hello from macOS!\");\n#else\n  return std::string(\"Hello from an unknown system!\");\n#endif\n}\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-02 LANGUAGES CXX)\n```", "```cpp\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  target_compile_definitions(hello-world PUBLIC \"IS_LINUX\")\nendif()\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_compile_definitions(hello-world PUBLIC \"IS_MACOS\")\nendif()\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  target_compile_definitions(hello-world PUBLIC \"IS_WINDOWS\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./hello-world\n\nHello from Linux!\n```", "```cpp\nstd::string say_hello() {\n#ifdef IS_WINDOWS\n  return std::string(\"Hello from Windows!\");\n#elif IS_LINUX\n  return std::string(\"Hello from Linux!\");\n#elif IS_MACOS\n  return std::string(\"Hello from macOS!\");\n#else\n  return std::string(\"Hello from an unknown system!\");\n#endif\n}\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() {\n#ifdef IS_INTEL_CXX_COMPILER\n  // only compiled when Intel compiler is selected\n  // such compiler will not compile the other branches\n  return std::string(\"Hello Intel compiler!\");\n#elif IS_GNU_CXX_COMPILER\n  // only compiled when GNU compiler is selected\n  // such compiler will not compile the other branches\n  return std::string(\"Hello GNU compiler!\");\n#elif IS_PGI_CXX_COMPILER\n  // etc.\n  return std::string(\"Hello PGI compiler!\");\n#elif IS_XL_CXX_COMPILER\n  return std::string(\"Hello XL compiler!\");\n#else\n  return std::string(\"Hello unknown compiler - have we met before?\");\n#endif\n}\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  std::cout << \"compiler name is \" COMPILER_NAME << std::endl;\n  return EXIT_SUCCESS;\n}\n```", "```cpp\nprogram hello\n\n  implicit none\n\n#ifdef IS_Intel_FORTRAN_COMPILER\n  print *, 'Hello Intel compiler!'\n#elif IS_GNU_FORTRAN_COMPILER\n  print *, 'Hello GNU compiler!'\n#elif IS_PGI_FORTRAN_COMPILER\n  print *, 'Hello PGI compiler!'\n#elif IS_XL_FORTRAN_COMPILER\n  print *, 'Hello XL compiler!'\n#else\n  print *, 'Hello unknown compiler - have we met before?'\n#endif\n\nend program\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03 LANGUAGES CXX)\n```", "```cpp\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\ntarget_compile_definitions(hello-world PUBLIC \"COMPILER_NAME=\\\"${CMAKE_CXX_COMPILER_ID}\\\"\")\n\nif(CMAKE_CXX_COMPILER_ID MATCHES Intel)\n    target_compile_definitions(hello-world PUBLIC \"IS_INTEL_CXX_COMPILER\")\nendif()\nif(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n    target_compile_definitions(hello-world PUBLIC \"IS_GNU_CXX_COMPILER\")\nendif()\nif(CMAKE_CXX_COMPILER_ID MATCHES PGI)\n    target_compile_definitions(hello-world PUBLIC \"IS_PGI_CXX_COMPILER\")\nendif()\nif(CMAKE_CXX_COMPILER_ID MATCHES XL)\n    target_compile_definitions(hello-world PUBLIC \"IS_XL_CXX_COMPILER\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./hello-world\n\nHello GNU compiler!\n```", "```cpp\nproject(recipe-03 LANGUAGES Fortran)\n```", "```cpp\nadd_executable(hello-world hello-world.F90)\n```", "```cpp\ntarget_compile_definitions(hello-world\n  PUBLIC \"IS_${CMAKE_Fortran_COMPILER_ID}_FORTRAN_COMPILER\"\n)\n```", "```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\n#define STRINGIFY(x) #x\n#define TOSTRING(x) STRINGIFY(x)\n\nstd::string say_hello() {\n  std::string arch_info(TOSTRING(ARCHITECTURE));\n  arch_info += std::string(\" architecture. \");\n#ifdef IS_32_BIT_ARCH\n  return arch_info + std::string(\"Compiled on a 32 bit host processor.\");\n#elif IS_64_BIT_ARCH\n  return arch_info + std::string(\"Compiled on a 64 bit host processor.\");\n#else\n  return arch_info + std::string(\"Neither 32 nor 64 bit, puzzling ...\");\n#endif\n}\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 LANGUAGES CXX)\n\nadd_executable(arch-dependent arch-dependent.cpp)\n```", "```cpp\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  target_compile_definitions(arch-dependent PUBLIC \"IS_64_BIT_ARCH\")\n  message(STATUS \"Target is 64 bits\")\nelse()\n  target_compile_definitions(arch-dependent PUBLIC \"IS_32_BIT_ARCH\")\n  message(STATUS \"Target is 32 bits\")\nendif()\n```", "```cpp\nif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i386\")\n  message(STATUS \"i386 architecture detected\")\nelseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i686\")\n  message(STATUS \"i686 architecture detected\")\nelseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n  message(STATUS \"x86_64 architecture detected\")\nelse()\n  message(STATUS \"host processor architecture is unknown\")\nendif()\n\ntarget_compile_definitions(arch-dependent\n  PUBLIC \"ARCHITECTURE=${CMAKE_HOST_SYSTEM_PROCESSOR}\"\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n...\n-- Target is 64 bits\n-- x86_64 architecture detected\n...\n```", "```cpp\n$ cmake --build .\n$ ./arch-dependent\n\nx86_64 architecture. Compiled on a 64 bit host processor.\n```", "```cpp\n#if defined(__i386) || defined(__i386__) || defined(_M_IX86)\n    #error cmake_arch i386\n#elif defined(__x86_64) || defined(__x86_64__) || defined(__amd64) || defined(_M_X64)\n    #error cmake_arch x86_64\n#endif\n```", "```cpp\nadd_executable(arch-dependent \"\")\n\nif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i386\")\n  message(STATUS \"i386 architecture detected\")\n  target_sources(arch-dependent\n    PRIVATE\n      arch-dependent-i386.cpp\n    )\nelseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"i686\")\n  message(STATUS \"i686 architecture detected\")\n  target_sources(arch-dependent\n    PRIVATE\n      arch-dependent-i686.cpp\n    )\nelseif(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n  message(STATUS \"x86_64 architecture detected\")\n  target_sources(arch-dependent\n    PRIVATE\n      arch-dependent-x86_64.cpp\n    )\nelse()\n  message(STATUS \"host processor architecture is unknown\")\nendif()\n```", "```cpp\n#include \"config.h\"\n\n#include <cstdlib>\n#include <iostream>\n\nint main() {\n  std::cout << \"Number of logical cores: \"\n            << NUMBER_OF_LOGICAL_CORES << std::endl;\n  std::cout << \"Number of physical cores: \"\n            << NUMBER_OF_PHYSICAL_CORES << std::endl;\n\n  std::cout << \"Total virtual memory in megabytes: \"\n            << TOTAL_VIRTUAL_MEMORY << std::endl;\n  std::cout << \"Available virtual memory in megabytes: \"\n            << AVAILABLE_VIRTUAL_MEMORY << std::endl;\n  std::cout << \"Total physical memory in megabytes: \"\n            << TOTAL_PHYSICAL_MEMORY << std::endl;\n  std::cout << \"Available physical memory in megabytes: \"\n            << AVAILABLE_PHYSICAL_MEMORY << std::endl;\n\n  std::cout << \"Processor is 64Bit: \"\n            << IS_64BIT << std::endl;\n  std::cout << \"Processor has floating point unit: \"\n            << HAS_FPU << std::endl;\n  std::cout << \"Processor supports MMX instructions: \"\n            << HAS_MMX << std::endl;\n  std::cout << \"Processor supports Ext. MMX instructions: \"\n            << HAS_MMX_PLUS << std::endl;\n  std::cout << \"Processor supports SSE instructions: \"\n            << HAS_SSE << std::endl;\n  std::cout << \"Processor supports SSE2 instructions: \"\n            << HAS_SSE2 << std::endl;\n  std::cout << \"Processor supports SSE FP instructions: \"\n            << HAS_SSE_FP << std::endl;\n  std::cout << \"Processor supports SSE MMX instructions: \"\n            << HAS_SSE_MMX << std::endl;\n  std::cout << \"Processor supports 3DNow instructions: \"\n            << HAS_AMD_3DNOW << std::endl;\n  std::cout << \"Processor supports 3DNow+ instructions: \"\n            << HAS_AMD_3DNOW_PLUS << std::endl;\n  std::cout << \"IA64 processor emulating x86 : \"\n            << HAS_IA64 << std::endl;\n\n  std::cout << \"OS name: \"\n            << OS_NAME << std::endl;\n  std::cout << \"OS sub-type: \"\n            << OS_RELEASE << std::endl;\n  std::cout << \"OS build ID: \"\n            << OS_VERSION << std::endl;\n  std::cout << \"OS platform: \"\n            << OS_PLATFORM << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n#pragma once\n\n#define NUMBER_OF_LOGICAL_CORES @_NUMBER_OF_LOGICAL_CORES@\n#define NUMBER_OF_PHYSICAL_CORES @_NUMBER_OF_PHYSICAL_CORES@\n#define TOTAL_VIRTUAL_MEMORY @_TOTAL_VIRTUAL_MEMORY@\n#define AVAILABLE_VIRTUAL_MEMORY @_AVAILABLE_VIRTUAL_MEMORY@\n#define TOTAL_PHYSICAL_MEMORY @_TOTAL_PHYSICAL_MEMORY@\n#define AVAILABLE_PHYSICAL_MEMORY @_AVAILABLE_PHYSICAL_MEMORY@\n#define IS_64BIT @_IS_64BIT@\n#define HAS_FPU @_HAS_FPU@\n#define HAS_MMX @_HAS_MMX@\n#define HAS_MMX_PLUS @_HAS_MMX_PLUS@\n#define HAS_SSE @_HAS_SSE@\n#define HAS_SSE2 @_HAS_SSE2@\n#define HAS_SSE_FP @_HAS_SSE_FP@\n#define HAS_SSE_MMX @_HAS_SSE_MMX@\n#define HAS_AMD_3DNOW @_HAS_AMD_3DNOW@\n#define HAS_AMD_3DNOW_PLUS @_HAS_AMD_3DNOW_PLUS@\n#define HAS_IA64 @_HAS_IA64@\n#define OS_NAME \"@_OS_NAME@\"\n#define OS_RELEASE \"@_OS_RELEASE@\"\n#define OS_VERSION \"@_OS_VERSION@\"\n#define OS_PLATFORM \"@_OS_PLATFORM@\"\n```", "```cpp\ncmake_minimum_required(VERSION 3.10 FATAL_ERROR)\n\nproject(recipe-05 CXX)\n```", "```cpp\nadd_executable(processor-info \"\")\n\ntarget_sources(processor-info\n  PRIVATE\n    processor-info.cpp\n  )\n\ntarget_include_directories(processor-info\n  PRIVATE\n    ${PROJECT_BINARY_DIR}\n  )\n```", "```cpp\nforeach(key\n  IN ITEMS\n    NUMBER_OF_LOGICAL_CORES\n    NUMBER_OF_PHYSICAL_CORES\n    TOTAL_VIRTUAL_MEMORY\n    AVAILABLE_VIRTUAL_MEMORY\n    TOTAL_PHYSICAL_MEMORY\n    AVAILABLE_PHYSICAL_MEMORY\n    IS_64BIT\n    HAS_FPU\n    HAS_MMX\n    HAS_MMX_PLUS\n    HAS_SSE\n    HAS_SSE2\n    HAS_SSE_FP\n    HAS_SSE_MMX\n    HAS_AMD_3DNOW\n```", "```cpp\n    HAS_AMD_3DNOW_PLUS\n    HAS_IA64\n    OS_NAME\n    OS_RELEASE\n    OS_VERSION\n    OS_PLATFORM\n  )\n  cmake_host_system_information(RESULT _${key} QUERY ${key})\nendforeach()\n```", "```cpp\nconfigure_file(config.h.in config.h @ONLY)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./processor-info\n\nNumber of logical cores: 4\nNumber of physical cores: 2\nTotal virtual memory in megabytes: 15258\nAvailable virtual memory in megabytes: 14678\nTotal physical memory in megabytes: 7858\nAvailable physical memory in megabytes: 4072\nProcessor is 64Bit: 1\nProcessor has floating point unit: 1\nProcessor supports MMX instructions: 1\nProcessor supports Ext. MMX instructions: 0\nProcessor supports SSE instructions: 1\nProcessor supports SSE2 instructions: 1\nProcessor supports SSE FP instructions: 0\nProcessor supports SSE MMX instructions: 0\nProcessor supports 3DNow instructions: 0\nProcessor supports 3DNow+ instructions: 0\nIA64 processor emulating x86 : 0\nOS name: Linux\nOS sub-type: 4.16.7-1-ARCH\nOS build ID: #1 SMP PREEMPT Wed May 2 21:12:36 UTC 2018\nOS platform: x86_64\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <Eigen/Dense>\n\nEIGEN_DONT_INLINE\ndouble simple_function(Eigen::VectorXd &va, Eigen::VectorXd &vb) {\n  // this simple function computes the dot product of two vectors\n  // of course it could be expressed more compactly\n  double d = va.dot(vb);\n  return d;\n}\n\nint main() {\n  int len = 1000000;\n  int num_repetitions = 100;\n\n  // generate two random vectors\n  Eigen::VectorXd va = Eigen::VectorXd::Random(len);\n  Eigen::VectorXd vb = Eigen::VectorXd::Random(len);\n\n  double result;\n  auto start = std::chrono::system_clock::now();\n  for (auto i = 0; i < num_repetitions; i++) {\n    result = simple_function(va, vb);\n  }\n  auto end = std::chrono::system_clock::now();\n  auto elapsed_seconds = end - start;\n\n  std::cout << \"result: \" << result << std::endl;\n  std::cout << \"elapsed seconds: \" << elapsed_seconds.count() << std::endl;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-06 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(Eigen3 3.3 REQUIRED CONFIG)\n```", "```cpp\ninclude(CheckCXXCompilerFlag)\n```", "```cpp\ncheck_cxx_compiler_flag(\"-march=native\" _march_native_works)\n```", "```cpp\ncheck_cxx_compiler_flag(\"-xHost\" _xhost_works)\n```", "```cpp\nset(_CXX_FLAGS)\nif(_march_native_works)\n  message(STATUS \"Using processor's vector instructions (-march=native compiler flag set)\")\n  set(_CXX_FLAGS \"-march=native\")\nelseif(_xhost_works)\n  message(STATUS \"Using processor's vector instructions (-xHost compiler flag set)\")\n  set(_CXX_FLAGS \"-xHost\")\nelse()\n  message(STATUS \"No suitable compiler flag found for vectorization\")\nendif()\n```", "```cpp\nadd_executable(linear-algebra-unoptimized linear-algebra.cpp)\n\ntarget_link_libraries(linear-algebra-unoptimized\n  PRIVATE\n    Eigen3::Eigen\n  )\n```", "```cpp\nadd_executable(linear-algebra linear-algebra.cpp)\n\ntarget_compile_options(linear-algebra\n  PRIVATE\n    ${_CXX_FLAGS}\n  )\n\ntarget_link_libraries(linear-algebra\n  PRIVATE\n    Eigen3::Eigen\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n...\n-- Performing Test _march_native_works\n-- Performing Test _march_native_works - Success\n```", "```cpp\n-- Performing Test _xhost_works\n-- Performing Test _xhost_works - Failed\n-- Using processor's vector instructions (-march=native compiler flag set)\n...\n```", "```cpp\n$ cmake --build .\n\n$ ./linear-algebra-unoptimized \nresult: -261.505\nelapsed seconds: 1.97964\n\n$ ./linear-algebra \nresult: -261.505\nelapsed seconds: 1.05048\n```", "```cpp\ncheck_cxx_compiler_flag(\"-march=native\" _march_native_works)\n```"]