["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\n#include <iostream>\nint main() {\n  std::cout << \"Hello World!\" << std::endl;\n  return 0;\n}\n```", "```cpp\n$ g++ hello.cpp -o a.out\n```", "```cpp\n$ ./a.out\nHello World!\n$\n```", "```cpp\ncmake_minimum_required(VERSION 3.20)\nproject(Hello)\nadd_executable(Hello hello.cpp)\n```", "```cpp\nroot@5f81fe44c9bd:/root/examples/chapter01/01-hello# cmake -B buildtree.\n-- The C compiler identification is GNU 9.3.0\n-- The CXX compiler identification is GNU 9.3.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /root/examples/chapter01/01-hello/buildtree\nroot@5f81fe44c9bd:/root/examples/chapter01/01-hello# cmake --build buildtree/\nScanning dependencies of target Hello\n[ 50%] Building CXX object CMakeFiles/Hello.dir/hello.cpp.o\n[100%] Linking CXX executable Hello\n[100%] Built target Hello\n```", "```cpp\nroot@68c249f65ce2:~# ./buildtree/Hello\nHello World!\n```", "```cpp\n$ docker pull swidzinski/cmake:examples\n$ docker run -it swidzinski/cmake:examples\nroot@b55e271a85b2:root@b55e271a85b2:#\n```", "```cpp\n'cmake' is not recognized as an internal or external command, operable program or batch file.\n```", "```cpp\n$ wget -O - https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-x86_64.sh | bash\n```", "```cpp\n$ wget -O - https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-Linux-aarch64.sh | bash\n```", "```cpp\n$ sudo apt-get install cmake\n```", "```cpp\n$ yum install cmake\n```", "```cpp\n$ sudo port install cmake\n```", "```cpp\n$ brew install cmake\n```", "```cpp\n$ wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0.tar.gz\n$ tar xzf cmake-3.20.0.tar.gz\n$ cd cmake-3.20.0\n$ ./bootstrap\n$ make\n$ make install\n```", "```cpp\ncmake [<options>] -S <path-to-source> -B <path-to-build>\ncmake [<options>] <path-to-source>\ncmake [<options>] <path-to-existing-build>\n```", "```cpp\ncmake -S ./project -B ./build\n```", "```cpp\n<directory>: it will use the cached path to the sources and rebuild from there. Since we often invoke the same commands from the Terminal command history, we might get into trouble here: before using this form, always check whether your shell is currently working in the right directory.\n```", "```cpp\ncmake -S ..\n```", "```cpp\ncmake -B build\n```", "```cpp\ncmake -G <generator-name> <path-to-source>\n```", "```cpp\ncmake -G <generator-name> \n      -T <toolset-spec> -A <platform-name>\n      <path-to-source>\n```", "```cpp\ncmake --help\n```", "```cpp\nThe following generators are available on this platform:\nVisual Studio 16 2019\nVisual Studio 15 2017 [arch]\nVisual Studio 14 2015 [arch]\nVisual Studio 12 2013 [arch]\nVisual Studio 11 2012 [arch]\nVisual Studio 10 2010 [arch]\nVisual Studio 9 2008 [arch]\nBorland Makefiles\nNMake Makefiles\nNMake Makefiles JOM\nMSYS Makefiles\nMinGW Makefiles\nGreen Hills MULTI\nUnix Makefiles\nNinja\nNinja Multi-Config\nWatcom Wmake\nCodeBlocks - MinGW Makefiles\nCodeBlocks - NMake Makefiles\nCodeBlocks - NMake Makefiles JOM\nCodeBlocks - Ninja\nCodeBlocks - Unix Makefiles\nCodeLite - MinGW Makefiles\nCodeLite - NMake Makefiles\nCodeLite - Ninja\nCodeLite - Unix Makefiles\nEclipse CDT4 - NMake Makefiles\nEclipse CDT4 - MinGW Makefiles\nEclipse CDT4 - Ninja\nEclipse CDT4 - Unix Makefiles\nKate - MinGW Makefiles\nKate - NMake Makefiles\nKate - Ninja\nKate - Unix Makefiles\nSublime Text 2 - MinGW Makefiles\nSublime Text 2 - NMake Makefiles\nSublime Text 2 - Ninja\nSublime Text 2 - Unix Makefiles \n```", "```cpp\ncmake -C <initial-cache-script> <path-to-source>\n```", "```cpp\ncmake -D <var>[:<type>]=<value> <path-to-source>\n```", "```cpp\ncmake -S . -B build -D CMAKE_BUILD_TYPE=Release\n```", "```cpp\ncmake -L[A][H] <path-to-source>\n```", "```cpp\ncmake -U <globbing_expr> <path-to-source>\n```", "```cpp\ncmake --system-information [file]\n```", "```cpp\ncmake --log-level=<level>\n```", "```cpp\n[some.context.example] Debug message.\n```", "```cpp\ncmake --log-context <path-to-source>\n```", "```cpp\ncmake --trace\n```", "```cpp\ncmake --list-presets\n```", "```cpp\ncmake --preset=<preset>\n```", "```cpp\ncmake --build <dir> [<options>] [-- <build-tool-options>]\n```", "```cpp\ncmake --build <dir>\n```", "```cpp\ncmake --build <dir> -- <build-tool-options>\n```", "```cpp\ncmake --build <dir> --parallel [<number-of-jobs>]\ncmake --build <dir> -j [<number-of-jobs>]\n```", "```cpp\ncmake --build <dir> --target <target1> -t <target2> ...\n```", "```cpp\ncmake --build <dir> -t clean\n```", "```cpp\ncmake --build <dir> --clean-first\n```", "```cpp\ncmake --build <dir> --config <cfg>\n```", "```cpp\ncmake --build <dir> --verbose\ncmake --build <dir> -v\n```", "```cpp\ncmake --install <dir> [<options>]\n```", "```cpp\ncmake --install <dir>\n```", "```cpp\ncmake --install <dir> --config <cfg>\n```", "```cpp\ncmake --install <dir> --component <comp>\n```", "```cpp\ncmake --install <dir> \n      --default-directory-permissions <permissions>\n```", "```cpp\ncmake --install <dir> --prefix <prefix>\n```", "```cpp\ncmake --build <dir> --verbose\ncmake --build <dir> -v\n```", "```cpp\ncmake [{-D <var>=<value>}...] -P <cmake-script-file> \n      [-- <unparsed-options>...]\n```", "```cpp\ncmake -E <command> [<options>]\n```", "```cpp\ncmake ––help[-<topic>]\n```", "```cpp\n$ ctest\nTest project C:/Users/rapha/Desktop/CMake/build\nGuessing configuration Debug\n    Start 1: SystemInformationNew\n1/1 Test #1: SystemInformationNew .........   Passed 3.19 sec\n100% tests passed, 0 tests failed out of 1\nTotal Test time (real) =   3.24 sec \n```", "```cpp\n$ sudo apt-get install cmake-curses-gui\n```", "```cpp\nccmake [<options>]\nccmake {<path-to-source> | <path-to-existing-build>}\n```", "```cpp\nCMakeLists.txt\napi/CMakeLists.txt\napi/api.h\napi/api.cpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.20)\nproject(app)\nmessage(\"Top level CMakeLists.txt\")\nadd_subdirectory(api)\n```", "```cpp\n# This is the CMakeCache file.\n# For build in directory:\n  c:/Users/rapha/Desktop/CMake/empty_project/build\n# It was generated by CMake: C:/Program\n  Files/CMake/bin/cmake.exe\n# You can edit this file to change values found and used by\n  cmake.\n# If you do want to change a value, simply edit, save, and\n  exit the editor.\n# The syntax for the file is as follows:\n# KEY:TYPE=VALUE\n# KEY is the name of a variable in the cache.\n# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT\n  TYPE!.\n# VALUE is the current value for the KEY.\n########################\n# EXTERNAL cache entries\n########################\n//Flags used by the CXX compiler during DEBUG builds.\nCMAKE_CXX_FLAGS_DEBUG:STRING=/MDd /Zi /Ob0 /Od /RTC1\n// ... more variables here ...\n########################\n# INTERNAL cache entries\n########################\n//Minor version of cmake used to create the current loaded\n  cache\nCMAKE_CACHE_MINOR_VERSION:INTERNAL=19\n// ... more variables here ...\n```", "```cpp\n{\n  \"version\": 1,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3, \"minor\": 19, \"patch\": 3\n  },\n  \"configurePresets\": [ ],\n  \"vendor\": {\n    \"vendor-one.com/ExampleIDE/1.0\": {\n      \"buildQuickly\": false\n    }\n  }\n}\n```", "```cpp\n{\n  \"name\": \"my-preset\",\n  \"displayName\": \"Custom Preset\",\n  \"description\": \"Custom build - Ninja\",\n  \"generator\": \"Ninja\",\n  \"binaryDir\": \"${sourceDir}/build/ninja\",\n  \"cacheVariables\": {\n    \"FIRST_CACHE_VARIABLE\": {\n      \"type\": \"BOOL\", \"value\": \"OFF\"\n    },\n    \"SECOND_CACHE_VARIABLE\": \"Ninjas rock\"\n  },\n  \"environment\": {\n    \"MY_ENVIRONMENT_VARIABLE\": \"Test\",\n    \"PATH\": \"$env{HOME}/ninja/bin:$penv{PATH}\"\n  },\n  \"vendor\": {\n    \"vendor-one.com/ExampleIDE/1.0\": {\n      \"buildQuickly\": true\n    }\n  }\n},\n```", "```cpp\n{\n  \"name\": \"my-preset-multi\",\n  \"inherits\": \"my-preset\",\n  \"displayName\": \"Custom Ninja Multi-Config\",\n  \"description\": \"Custom build - Ninja Multi\",\n  \"generator\": \"Ninja Multi-Config\"\n}\n```", "```cpp\n# If you put build tree in the source tree add it like so:\nbuild_debug/\nbuild_release/\n# Generated and user files\n**/CMakeCache.txt\n**/CMakeUserPresets.json\n**/CTestTestfile.cmake\n**/CPackConfig.cmake\n**/cmake_install.cmake\n**/install_manifest.txt\n**/compile_commands.json\n```", "```cpp\n# An example of a script\ncmake_minimum_required(VERSION 3.20.0)\nmessage(\"Hello world\")\nfile(WRITE Hello.txt \"I am writing to a file\")\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(ModuleExample)\ninclude (TestBigEndian)\nTEST_BIG_ENDIAN(IS_BIG_ENDIAN)\nif(IS_BIG_ENDIAN)\n message(\"BIG_ENDIAN\")\nelse()\n message(\"LITTLE_ENDIAN\")\nendif()\n```"]