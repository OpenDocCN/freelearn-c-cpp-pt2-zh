["```cpp\n#include \"sum_integers.hpp\"\n\n#include <vector>\n\nint sum_integers(const std::vector<int> integers) {\n  auto sum = 0;\n  for (auto i : integers) {\n    sum += i;\n  }\n  return sum;\n}\n```", "```cpp\n#pragma once\n\n#include <vector>\n\nint sum_integers(const std::vector<int> integers);\n```", "```cpp\n#include \"sum_integers.hpp\"\n\n#include <iostream>\n#include <string>\n#include <vector>\n\n// we assume all arguments are integers and we sum them up\n// for simplicity we do not verify the type of arguments\nint main(int argc, char *argv[]) {\n\n  std::vector<int> integers;\n  for (auto i = 1; i < argc; i++) {\n    integers.push_back(std::stoi(argv[i]));\n  }\n  auto sum = sum_integers(integers);\n\n  std::cout << sum << std::endl;\n}\n```", "```cpp\n#include \"sum_integers.hpp\"\n\n#include <vector>\n\nint main() {\n  auto integers = {1, 2, 3, 4, 5};\n\n  if (sum_integers(integers) == 15) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n```", "```cpp\n#!/usr/bin/env bash\n\nEXECUTABLE=$1\n\nOUTPUT=$($EXECUTABLE 1 2 3 4)\n\nif [ \"$OUTPUT\" = \"10\" ]\nthen\n    exit 0\nelse\n    exit 1\nfi\n```", "```cpp\nimport subprocess\nimport argparse\n\n# test script expects the executable as argument\nparser = argparse.ArgumentParser()\nparser.add_argument('--executable',\n                    help='full path to executable')\nparser.add_argument('--short',\n                    default=False,\n                    action='store_true',\n                    help='run a shorter test')\nargs = parser.parse_args()\n\ndef execute_cpp_code(integers):\n    result = subprocess.check_output([args.executable] + integers)\n    return int(result)\n\nif args.short:\n    # we collect [1, 2, ..., 100] as a list of strings\n    result = execute_cpp_code([str(i) for i in range(1, 101)])\n    assert result == 5050, 'summing up to 100 failed'\nelse:\n    # we collect [1, 2, ..., 1000] as a list of strings\n    result = execute_cpp_code([str(i) for i in range(1, 1001)])\n    assert result == 500500, 'summing up to 1000 failed'\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nfind_package(PythonInterp REQUIRED)\nfind_program(BASH_EXECUTABLE NAMES bash REQUIRED)\n```", "```cpp\n# example library\nadd_library(sum_integers sum_integers.cpp)\n\n# main code\nadd_executable(sum_up main.cpp)\ntarget_link_libraries(sum_up sum_integers)\n```", "```cpp\n# testing binary\nadd_executable(cpp_test test.cpp)\ntarget_link_libraries(cpp_test sum_integers)\n```", "```cpp\nenable_testing()\n\nadd_test(\n  NAME bash_test\n  COMMAND ${BASH_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.sh $<TARGET_FILE:sum_up>\n  )\n\nadd_test(\n  NAME cpp_test\n  COMMAND $<TARGET_FILE:cpp_test>\n  )\n\nadd_test(\n  NAME python_test_long\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py --executable $<TARGET_FILE:sum_up>\n  )\n\nadd_test(\n  NAME python_test_short\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py --short --executable $<TARGET_FILE:sum_up>\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./sum_up 1 2 3 4 5\n\n15\n```", "```cpp\n$ ctest\n\nTest project /home/user/cmake-recipes/chapter-04/recipe-01/cxx-example/build\n    Start 1: bash_test\n1/4 Test #1: bash_test ........................ Passed 0.01 sec\n    Start 2: cpp_test\n2/4 Test #2: cpp_test ......................... Passed 0.00 sec\n    Start 3: python_test_long\n3/4 Test #3: python_test_long ................. Passed 0.06 sec\n    Start 4: python_test_short\n4/4 Test #4: python_test_short ................ Passed 0.05 sec\n\n100% tests passed, 0 tests failed out of 4\n\nTotal Test time (real) = 0.12 sec\n```", "```cpp\nadd_test(\n  NAME cpp_test\n  COMMAND $<TARGET_FILE:cpp_test>\n  )\n```", "```cpp\nadd_test(\n  NAME python_test_short\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py --short --executable $<TARGET_FILE:sum_up>\n  )\n```", "```cpp\n    Start 1: bash_test\n1/4 Test #1: bash_test ........................***Failed 0.01 sec\n    Start 2: cpp_test\n2/4 Test #2: cpp_test .........................***Failed 0.00 sec\n    Start 3: python_test_long\n3/4 Test #3: python_test_long .................***Failed 0.06 sec\n    Start 4: python_test_short\n4/4 Test #4: python_test_short ................***Failed 0.06 sec\n\n0% tests passed, 4 tests failed out of 4\n\nTotal Test time (real) = 0.13 sec\nThe following tests FAILED:\n    1 - bash_test (Failed)\n    2 - cpp_test (Failed)\n    3 - python_test_long (Failed)\n    4 - python_test_short (Failed)\nErrors while running CTest\n```", "```cpp\nadd_test(\n  NAME python_test_long\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py --executable $<TARGET_FILE:sum_up>\n  )\n```", "```cpp\nadd_test(\n  NAME python_test_long\n  COMMAND ${PYTHON_EXECUTABLE} test.py --executable $<TARGET_FILE:sum_up>\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n```", "```cpp\nadd_test(\n  NAME python/long\n  COMMAND ${PYTHON_EXECUTABLE} test.py --executable $<TARGET_FILE:sum_up>\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n```", "```cpp\nset_tests_properties(python_test\n  PROPERTIES \n    ENVIRONMENT\n      ACCOUNT_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}\n      ACCOUNT_HEADER_FILE=${CMAKE_CURRENT_SOURCE_DIR}/account/account.h\n      ACCOUNT_LIBRARY_FILE=$<TARGET_FILE:account>\n  )\n```", "```cpp\nadd_test(\n  NAME\n    python_test\n  COMMAND\n    ${CMAKE_COMMAND} -E env ACCOUNT_MODULE_PATH=${CMAKE_CURRENT_SOURCE_DIR}\n                            ACCOUNT_HEADER_FILE=${CMAKE_CURRENT_SOURCE_DIR}/account/account.h\n                            ACCOUNT_LIBRARY_FILE=$<TARGET_FILE:account>\n    ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/account/test.py\n  )\n```", "```cpp\n$ cmake --build . --target test\n```", "```cpp\n$ cmake --build . --target RUN_TESTS\n```", "```cpp\n#include \"sum_integers.hpp\"\n\n// this tells catch to provide a main()\n// only do this in one cpp file\n#define CATCH_CONFIG_MAIN\n#include \"catch.hpp\"\n\n#include <vector>\n\nTEST_CASE(\"Sum of integers for a short vector\", \"[short]\") {\n  auto integers = {1, 2, 3, 4, 5};\n  REQUIRE(sum_integers(integers) == 15);\n}\n\nTEST_CASE(\"Sum of integers for a longer vector\", \"[long]\") {\n  std::vector<int> integers;\n  for (int i = 1; i < 1001; ++i) {\n    integers.push_back(i);\n  }\n  REQUIRE(sum_integers(integers) == 500500);\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-02 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# example library\nadd_library(sum_integers sum_integers.cpp)\n\n# main code\nadd_executable(sum_up main.cpp)\ntarget_link_libraries(sum_up sum_integers)\n\n# testing binary\nadd_executable(cpp_test test.cpp)\ntarget_link_libraries(cpp_test sum_integers)\n```", "```cpp\nenable_testing()\n\nadd_test(\n  NAME catch_test\n  COMMAND $<TARGET_FILE:cpp_test> --success\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ctest -V\n\nUpdateCTestConfiguration from :/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/build/DartConfiguration.tcl\nUpdateCTestConfiguration from :/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/build/DartConfiguration.tcl\nTest project /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/build\nConstructing a list of tests\nDone constructing a list of tests\nUpdating test list for fixtures\nAdded 0 tests to meet fixture requirements\nChecking test dependency graph...\nChecking test dependency graph end\ntest 1\n Start 1: catch_test\n\n1: Test command: /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/build/cpp_test \"--success\"\n1: Test timeout computed to be: 10000000\n1: \n1: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1: cpp_test is a Catch v2.0.1 host application.\n1: Run with -? for options\n1: \n1: ----------------------------------------------------------------\n1: Sum of integers for a short vector\n1: ----------------------------------------------------------------\n1: /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:10\n1: ...................................................................\n1: \n1: /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:12: \n1: PASSED:\n1: REQUIRE( sum_integers(integers) == 15 )\n1: with expansion:\n1: 15 == 15\n1: \n1: ----------------------------------------------------------------\n1: Sum of integers for a longer vector\n1: ----------------------------------------------------------------\n1: /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:15\n1: ...................................................................\n1: \n1: /home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:20: \n1: PASSED:\n1: REQUIRE( sum_integers(integers) == 500500 )\n1: with expansion:\n1: 500500 (0x7a314) == 500500 (0x7a314)\n1: \n1: ===================================================================\n1: All tests passed (2 assertions in 2 test cases)\n1:\n1/1 Test #1: catch_test ....................... Passed 0.00 s\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.00 sec\n```", "```cpp\n$ ./cpp_test --success\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ncpp_test is a Catch v2.0.1 host application.\nRun with -? for options\n\n-------------------------------------------------------------------\nSum of integers for a short vector\n-------------------------------------------------------------------\n/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:10\n...................................................................\n\n/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:12: \nPASSED:\n  REQUIRE( sum_integers(integers) == 15 )\nwith expansion:\n  15 == 15\n\n-------------------------------------------------------------------\nSum of integers for a longer vector\n-------------------------------------------------------------------\n/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:15\n...................................................................\n\n/home/user/cmake-cookbook/chapter-04/recipe-02/cxx-example/test.cpp:20: \nPASSED:\n  REQUIRE( sum_integers(integers) == 500500 )\nwith expansion:\n  500500 (0x7a314) == 500500 (0x7a314)\n\n===================================================================\nAll tests passed (2 assertions in 2 test cases)\n```", "```cpp\n$ ./cpp_test --help\n```", "```cpp\n# Prepare \"Catch\" library for other executables\nset(CATCH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/catch)\nadd_library(Catch INTERFACE)\ntarget_include_directories(Catch INTERFACE ${CATCH_INCLUDE_DIR})\n```", "```cpp\ntarget_link_libraries(cpp_test Catch)\n```", "```cpp\n#include \"sum_integers.hpp\"\n#include \"gtest/gtest.h\"\n\n#include <vector>\n\nint main(int argc, char **argv) {\n  ::testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n\nTEST(example, sum_zero) {\n  auto integers = {1, -1, 2, -2, 3, -3};\n  auto result = sum_integers(integers);\n  ASSERT_EQ(result, 0);\n}\n\nTEST(example, sum_five) {\n  auto integers = {1, 2, 3, 4, 5};\n  auto result = sum_integers(integers);\n  ASSERT_EQ(result, 15);\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.11 FATAL_ERROR)\n\n# project name and language\nproject(recipe-03 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\n# example library\nadd_library(sum_integers sum_integers.cpp)\n\n# main code\nadd_executable(sum_up main.cpp)\ntarget_link_libraries(sum_up sum_integers)\n```", "```cpp\noption(ENABLE_UNIT_TESTS \"Enable unit tests\" ON)\nmessage(STATUS \"Enable testing: ${ENABLE_UNIT_TESTS}\")\n\nif(ENABLE_UNIT_TESTS)\n  # all the remaining CMake code will be placed here\nendif()\n```", "```cpp\ninclude(FetchContent)\n\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.8.0\n)\n\nFetchContent_GetProperties(googletest)\n```", "```cpp\nif(NOT googletest_POPULATED)\n  FetchContent_Populate(googletest)\n\n  # Prevent GoogleTest from overriding our compiler/linker options\n  # when building with Visual Studio\n  set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n  # Prevent GoogleTest from using PThreads\n  set(gtest_disable_pthreads ON CACHE BOOL \"\" FORCE)\n\n  # adds the targers: gtest, gtest_main, gmock, gmock_main\n  add_subdirectory(\n    ${googletest_SOURCE_DIR}\n    ${googletest_BINARY_DIR}\n    )\n\n  # Silence std::tr1 warning on MSVC\n  if(MSVC)\n    foreach(_tgt gtest gtest_main gmock gmock_main)\n      target_compile_definitions(${_tgt}\n        PRIVATE\n          \"_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING\"\n        )\n    endforeach()\n  endif()\nendif()\n```", "```cpp\nadd_executable(cpp_test \"\")\n\ntarget_sources(cpp_test\n  PRIVATE\n    test.cpp\n  )\n\ntarget_link_libraries(cpp_test\n  PRIVATE\n    sum_integers\n    gtest_main\n  )\n```", "```cpp\nenable_testing()\n\nadd_test(\n  NAME google_test\n  COMMAND $<TARGET_FILE:cpp_test>\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ctest\n\nTest project /home/user/cmake-cookbook/chapter-04/recipe-03/cxx-example/build\n    Start 1: google_test\n1/1 Test #1: google_test ...................... Passed 0.00 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.00 sec\n```", "```cpp\n$ ./cpp_test\n\n[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from example\n[ RUN      ] example.sum_zero\n[       OK ] example.sum_zero (0 ms)\n[ RUN      ] example.sum_five\n[       OK ] example.sum_five (0 ms)\n[----------] 2 tests from example (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran. (0 ms total)\n[  PASSED  ] 2 tests.\n```", "```cpp\ninclude(FetchContent)\n\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.8.0\n)\n```", "```cpp\nadd_subdirectory(\n  ${googletest_SOURCE_DIR}\n  ${googletest_BINARY_DIR}\n  )\n```", "```cpp\ntarget_link_libraries(cpp_test\n  PRIVATE\n    sum_integers\n    gtest_main\n  )\n```", "```cpp\n#include \"sum_integers.hpp\"\n\n#include <vector>\n\n#define BOOST_TEST_MODULE example_test_suite\n#include <boost/test/unit_test.hpp>\n\nBOOST_AUTO_TEST_CASE(add_example) {\n  auto integers = {1, 2, 3, 4, 5};\n  auto result = sum_integers(integers);\n  BOOST_REQUIRE(result == 15);\n}\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-04 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# example library\nadd_library(sum_integers sum_integers.cpp)\n\n# main code\nadd_executable(sum_up main.cpp)\ntarget_link_libraries(sum_up sum_integers)\n```", "```cpp\nfind_package(Boost 1.54 REQUIRED COMPONENTS unit_test_framework)\n\nadd_executable(cpp_test test.cpp)\n\ntarget_link_libraries(cpp_test\n  PRIVATE\n    sum_integers\n    Boost::unit_test_framework\n  )\n\n# avoid undefined reference to \"main\" in test.cpp\ntarget_compile_definitions(cpp_test\n  PRIVATE\n    BOOST_TEST_DYN_LINK\n  )\n```", "```cpp\nenable_testing()\n\nadd_test(\n  NAME boost_test\n  COMMAND $<TARGET_FILE:cpp_test>\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ctest\n\nTest project /home/user/cmake-recipes/chapter-04/recipe-04/cxx-example/build\n    Start 1: boost_test\n1/1 Test #1: boost_test ....................... Passed 0.01 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.01 sec\n\n$ ./cpp_test\n\nRunning 1 test case...\n\n*** No errors detected\n```", "```cpp\n#include \"leaky_implementation.hpp\"\n\nint do_some_work() {\n\n  // we allocate an array\n  double *my_array = new double[1000];\n\n  // do some work\n  // ...\n\n  // we forget to deallocate it\n  // delete[] my_array;\n\n  return 0;\n}\n```", "```cpp\n#pragma once\n\nint do_some_work();\n```", "```cpp\n#include \"leaky_implementation.hpp\"\n\nint main() {\n  int return_code = do_some_work();\n\n  return return_code;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-05 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nadd_library(example_library leaky_implementation.cpp)\n\n```", "```cpp\n\nadd_executable(cpp_test test.cpp)\ntarget_link_libraries(cpp_test example_library)\n```", "```cpp\nfind_program(MEMORYCHECK_COMMAND NAMES valgrind)\nset(MEMORYCHECK_COMMAND_OPTIONS \"--trace-children=yes --leak-check=full\")\n\n# add memcheck test action\ninclude(CTest)\n\nenable_testing()\n\nadd_test(\n  NAME cpp_test\n  COMMAND $<TARGET_FILE:cpp_test>\n  )\n```", "```cpp\n$ ctest \nTest project /home/user/cmake-recipes/chapter-04/recipe-05/cxx-example/build\n    Start 1: cpp_test\n1/1 Test #1: cpp_test ......................... Passed 0.00 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.00 sec\n```", "```cpp\n$ ctest -T memcheck\n\n   Site: myhost\n   Build name: Linux-c++\nCreate new tag: 20171127-1717 - Experimental\nMemory check project /home/user/cmake-recipes/chapter-04/recipe-05/cxx-example/build\n    Start 1: cpp_test\n1/1 MemCheck #1: cpp_test ......................... Passed 0.40 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.40 sec\n-- Processing memory checking output:\n1/1 MemCheck: #1: cpp_test ......................... Defects: 1\nMemCheck log files can be found here: ( * corresponds to test number)\n/home/user/cmake-recipes/chapter-04/recipe-05/cxx-example/build/Testing/Temporary/MemoryChecker.*.log\nMemory checking results:\nMemory Leak - 1\n```", "```cpp\nimport sys\n\n# simulate a failing test\nsys.exit(1)\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-06 LANGUAGES NONE)\n\nfind_package(PythonInterp REQUIRED)\n```", "```cpp\nenable_testing()\n\nadd_test(example ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py)\n\nset_tests_properties(example PROPERTIES WILL_FAIL true)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ctest\n\nTest project /home/user/cmake-recipes/chapter-04/recipe-06/example/build\n    Start 1: example\n1/1 Test #1: example .......................... Passed 0.00 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 0.01 sec\n```", "```cpp\nimport sys\nimport time\n\n# wait for 2 seconds\ntime.sleep(2)\n\n# report success\nsys.exit(0)\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name\nproject(recipe-07 LANGUAGES NONE)\n\n# detect python\nfind_package(PythonInterp REQUIRED)\n\n# define tests\nenable_testing()\n\n# we expect this test to run for 2 seconds\nadd_test(example ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test.py)\n```", "```cpp\nset_tests_properties(example PROPERTIES TIMEOUT 10)\n```", "```cpp\n$ ctest \nTest project /home/user/cmake-recipes/chapter-04/recipe-07/example/build\n    Start 1: example\n1/1 Test #1: example .......................... Passed 2.01 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) = 2.01 sec\n```", "```cpp\n$ ctest\n\nTest project /home/user/cmake-recipes/chapter-04/recipe-07/example/build\n    Start 1: example\n1/1 Test #1: example ..........................***Timeout 10.01 sec\n\n0% tests passed, 1 tests failed out of 1\n\nTotal Test time (real) = 10.01 sec\n\nThe following tests FAILED:\n          1 - example (Timeout)\nErrors while running CTest\n```", "```cpp\nimport sys\nimport time\n\n# wait for 0.5 seconds\ntime.sleep(0.5)\n\n# finally report success\nsys.exit(0)\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name\nproject(recipe-08 LANGUAGES NONE)\n\n# detect python\nfind_package(PythonInterp REQUIRED)\n\n# define tests\nenable_testing()\n\nadd_test(a ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/a.py)\nadd_test(b ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/b.py)\nadd_test(c ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/c.py)\nadd_test(d ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/d.py)\nadd_test(e ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/e.py)\nadd_test(f ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/f.py)\nadd_test(g ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/g.py)\nadd_test(h ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/h.py)\nadd_test(i ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/i.py)\nadd_test(j ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/j.py)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ ctest\n\n      Start 1: a\n 1/10 Test #1: a ................................ Passed 0.51 sec\n      Start 2: b\n 2/10 Test #2: b ................................ Passed 0.51 sec\n      Start 3: c\n 3/10 Test #3: c ................................ Passed 0.51 sec\n      Start 4: d\n 4/10 Test #4: d ................................ Passed 0.51 sec\n      Start 5: e\n 5/10 Test #5: e ................................ Passed 1.51 sec\n      Start 6: f\n 6/10 Test #6: f ................................ Passed 1.51 sec\n      Start 7: g\n 7/10 Test #7: g ................................ Passed 1.51 sec\n      Start 8: h\n 8/10 Test #8: h ................................ Passed 2.51 sec\n      Start 9: i\n 9/10 Test #9: i ................................ Passed 3.51 sec\n      Start 10: j\n10/10 Test #10: j ................................ Passed 4.51 sec\n\n100% tests passed, 0 tests failed out of 10\n\nTotal Test time (real) = 17.11 sec\n```", "```cpp\n$ ctest --parallel 4\n\n      Start 10: j\n      Start 9: i\n      Start 8: h\n      Start 5: e\n 1/10 Test #5: e ................................ Passed 1.51 sec\n      Start 7: g\n 2/10 Test #8: h ................................ Passed 2.51 sec\n      Start 6: f\n 3/10 Test #7: g ................................ Passed 1.51 sec\n      Start 3: c\n 4/10 Test #9: i ................................ Passed 3.63 sec\n 5/10 Test #3: c ................................ Passed 0.60 sec\n      Start 2: b\n      Start 4: d\n 6/10 Test #6: f ................................ Passed 1.51 sec\n 7/10 Test #4: d ................................ Passed 0.59 sec\n 8/10 Test #2: b ................................ Passed 0.59 sec\n      Start 1: a\n 9/10 Test #10: j ................................ Passed 4.51 sec\n10/10 Test #1: a ................................ Passed 0.51 sec\n\n100% tests passed, 0 tests failed out of 10\n\nTotal Test time (real) = 4.74 sec\n```", "```cpp\n        --> time\ncore 1: jjjjjjjjj\ncore 2: iiiiiiibd\ncore 3: hhhhhggg\ncore 4: eeefffac\n```", "```cpp\n        --> time\ncore 1: aeeeiiiiiii\ncore 2: bfffjjjjjjjjj\ncore 3: cggg\ncore 4: dhhhhh\n```", "```cpp\na 1 0.506776\nb 1 0.507882\nc 1 0.508175\nd 1 0.504618\ne 1 1.51006\nf 1 1.50975\ng 1 1.50648\nh 1 2.51032\ni 1 3.50475\nj 1 4.51111\n```", "```cpp\nadd_test(a ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/a.py)\nadd_test(b ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/b.py)\nadd_test(c ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/c.py)\nadd_test(d ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/d.py)\nset_tests_properties(a b c d PROPERTIES COST 0.5)\n\nadd_test(e ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/e.py)\nadd_test(f ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/f.py)\nadd_test(g ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/g.py)\nset_tests_properties(e f g PROPERTIES COST 1.5)\n\nadd_test(h ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/h.py)\nset_tests_properties(h PROPERTIES COST 2.5)\n\nadd_test(i ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/i.py)\nset_tests_properties(i PROPERTIES COST 3.5)\n\nadd_test(j ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/j.py)\nset_tests_properties(j PROPERTIES COST 4.5)\n```", "```cpp\nimport sys\nimport time\n\n# wait for 0.1 seconds\ntime.sleep(0.1)\n\n# finally report success\nsys.exit(0)\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name\nproject(recipe-09 LANGUAGES NONE)\n\n# detect python\nfind_package(PythonInterp REQUIRED)\n\n# define tests\nenable_testing()\n\nadd_test(\n  NAME feature-a\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-a.py\n  )\nadd_test(\n  NAME feature-b\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-b.py\n  )\nadd_test(\n  NAME feature-c\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-c.py\n  )\nadd_test(\n  NAME feature-d\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-d.py\n  )\n\nadd_test(\n  NAME benchmark-a\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/benchmark-a.py\n  )\n```", "```cpp\nadd_test(\n  NAME benchmark-b\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/benchmark-b.py\n  )\n```", "```cpp\nset_tests_properties(\n  feature-a\n  feature-b\n  feature-c\n  PROPERTIES\n    LABELS \"quick\"\n  )\n\nset_tests_properties(\n  feature-d\n  benchmark-a\n  benchmark-b\n  PROPERTIES\n    LABELS \"long\"\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ ctest\n\n    Start 1: feature-a\n1/6 Test #1: feature-a ........................ Passed 0.11 sec\n    Start 2: feature-b\n2/6 Test #2: feature-b ........................ Passed 0.11 sec\n    Start 3: feature-c\n3/6 Test #3: feature-c ........................ Passed 0.11 sec\n    Start 4: feature-d\n4/6 Test #4: feature-d ........................ Passed 0.51 sec\n    Start 5: benchmark-a\n5/6 Test #5: benchmark-a ...................... Passed 0.51 sec\n    Start 6: benchmark-b\n6/6 Test #6: benchmark-b ...................... Passed 0.51 sec\n```", "```cpp\n100% tests passed, 0 tests failed out of 6\n\nLabel Time Summary:\nlong = 1.54 sec*proc (3 tests)\nquick = 0.33 sec*proc (3 tests)\n\nTotal Test time (real) = 1.87 sec\n```", "```cpp\n$ ctest -R feature\n\n    Start 1: feature-a\n1/4 Test #1: feature-a ........................ Passed 0.11 sec\n    Start 2: feature-b\n2/4 Test #2: feature-b ........................ Passed 0.11 sec\n    Start 3: feature-c\n3/4 Test #3: feature-c ........................ Passed 0.11 sec\n    Start 4: feature-d\n4/4 Test #4: feature-d ........................ Passed 0.51 sec\n\n100% tests passed, 0 tests failed out of 4\n```", "```cpp\n$ ctest -L long\n\n    Start 4: feature-d\n1/3 Test #4: feature-d ........................ Passed 0.51 sec\n    Start 5: benchmark-a\n2/3 Test #5: benchmark-a ...................... Passed 0.51 sec\n    Start 6: benchmark-b\n3/3 Test #6: benchmark-b ...................... Passed 0.51 sec\n\n100% tests passed, 0 tests failed out of 3\n```", "```cpp\n$ ctest -I 2,4\n\n    Start 2: feature-b\n1/3 Test #2: feature-b ........................ Passed 0.11 sec\n    Start 3: feature-c\n2/3 Test #3: feature-c ........................ Passed 0.11 sec\n    Start 4: feature-d\n3/3 Test #4: feature-d ........................ Passed 0.51 sec\n\n100% tests passed, 0 tests failed out of 3\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name\nproject(recipe-10 LANGUAGES NONE)\n\n# detect python\nfind_package(PythonInterp REQUIRED)\n\n# define tests\nenable_testing()\n```", "```cpp\nadd_test(\n  NAME setup\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/setup.py\n  )\nset_tests_properties(\n  setup\n  PROPERTIES\n    FIXTURES_SETUP my-fixture\n  )\n\nadd_test(\n  NAME feature-a\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-a.py\n  )\nadd_test(\n  NAME feature-b\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/feature-b.py\n  )\nset_tests_properties(\n  feature-a\n  feature-b\n  PROPERTIES\n    FIXTURES_REQUIRED my-fixture\n  )\n\nadd_test(\n  NAME cleanup\n  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/cleanup.py\n  )\nset_tests_properties(\n  cleanup\n  PROPERTIES\n    FIXTURES_CLEANUP my-fixture\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ ctest\n\n    Start 1: setup\n1/4 Test #1: setup ............................ Passed 0.01 sec\n    Start 2: feature-a\n2/4 Test #2: feature-a ........................ Passed 0.01 sec\n    Start 3: feature-b\n3/4 Test #3: feature-b ........................ Passed 0.00 sec\n    Start 4: cleanup\n4/4 Test #4: cleanup .......................... Passed 0.01 sec\n\n100% tests passed, 0 tests failed out of 4\n```", "```cpp\n$ ctest -R feature-a\n\n Start 1: setup\n1/3 Test #1: setup ............................ Passed 0.01 sec\n Start 2: feature-a\n```", "```cpp\n2/3 Test #2: feature-a ........................ Passed 0.00 sec\n Start 4: cleanup\n3/3 Test #4: cleanup .......................... Passed 0.01 sec\n\n100% tests passed, 0 tests failed out of 3\n```"]