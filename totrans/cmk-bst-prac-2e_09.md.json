["```cpp\nproject(CMakeBestPractice)\n...\nif(PROJECT_IS_TOP_LEVEL)\n   include(CTest)\nendif()\n```", "```cpp\noption(MYPROJECT_BUILD_TESTING \"enable testing for MyProject\" ${BUILD_TESTING})\n...\nIf(MYPROJECT_BUILD_TESTING AND BUILD_TESTING)\n   add_subdirectory(test)\nendif()\n```", "```cpp\nadd_test(NAME <name> COMMAND <command> [<arg>...]\n         [CONFIGURATIONS <config>...]\n         [WORKING_DIRECTORY <dir>]\n         [COMMAND_EXPAND_LISTS])\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\nproject(\"simple_test\" VERSION 1.0)\nenable_testing()\nadd_executable(simple_test)\ntarget_sources(simple_test PRIVATE src/main.cpp)\nadd_test(NAME example_test COMMAND simple_test)\n```", "```cpp\nctest --test-dir <build_dir>\ncmake --build <build_dir> --target test\n```", "```cpp\nTest project /workspaces/ CMake-Best-Practices---2nd-Edition/build\n    Start 1: example_test\n1/3 Test #1: example_test .....................***Failed    0.00 sec\n    Start 2: pass_fail_test\n2/3 Test #2: pass_fail_test ...................   Passed    0.00 sec\n    Start 3: timeout_test\n3/3 Test #3: timeout_test .....................   Passed    0.50 sec\n67% tests passed, 1 tests failed out of 3\nTotal Test time (real) =   0.51 sec\nThe following tests FAILED:\n          1 - example_test (Failed)\nErrors while running CTest\nOutput from these tests are in: /workspaces/CMake-Tips-and-Tricks\n  /build/Testing/Temporary/LastTest.log\nUse \"--rerun-failed --output-on-failure\" to re-run the failed cases\n  verbosely.\n```", "```cpp\nctest -R ^FeatureX -E FeatureX_Test_1\n```", "```cpp\nadd_test(NAME labeled_test_1 COMMAND someTest)\nset_tests_properties(labeled_test PROPERTIES LABELS \"example\")\nadd_test(NAME labeled_test_2 COMMAND anotherTest)\nset_tests_properties(labeled_test_2 PROPERTIES LABELS \"will_fail\" )\nadd_test(NAME labeled_test_3 COMMAND YetAnotherText)\nset_tests_properties(labeled_test_3 PROPERTIES LABELS \"example;will_fail\")\n```", "```cpp\nctest -L example\n```", "```cpp\nctest -L \"example|will_fail\"\n```", "```cpp\nctest -I [Start,End,Stride,test#,test#,...|Test file]\n```", "```cpp\nctest -I 1,10,2\n```", "```cpp\nctest -I ,0,,6,7\n```", "```cpp\nctest -I 1,10,2,6,8\n```", "```cpp\nTEST_CASE(\"Fibonacci(0) returns 1\"){ REQUIRE(Fibonacci(0) == 1);}\nTEST_CASE(\"Fibonacci(1) returns 1\"){ REQUIRE(Fibonacci(1) == 1); }\nTEST_CASE(\"Fibonacci(2) returns 2\"){ REQUIRE(Fibonacci(2) == 2); }\nTEST_CASE(\"Fibonacci(5) returns 8\"){ REQUIRE(Fibonacci(5) == 8); }\n```", "```cpp\nTest project /workspaces/CMake-Tips-and-Tricks/build\n    Start 5: Fibonacci\n1/1 Test #5: Fibonacci ........................***Failed    0.00 sec\n0% tests passed, 1 tests failed out of 1\nTotal Test time (real) =   0.01 sec\nThe following tests FAILED:\n          5 - Fibonacci (Failed)\n```", "```cpp\nfind_package(Catch2)\ninclude(Catch)\nadd_executable(Fibonacci)\ncatch_discover_tests(Fibonacci)\n```", "```cpp\ninclude(GoogleTest)\nadd_executable(Fibonacci)\ngtest_discover_tests(Fibonacci)\n```", "```cpp\n    Start 5: Fibonacci(0) returns 1\n1/4 Test #5: Fibonacci(0) returns 1 .........***Failed    0.00 sec\n    Start 6: Fibonacci(1) returns 1\n2/4 Test #6: Fibonacci(1) returns 1 .........   Passed    0.00 sec\n    Start 7: Fibonacci(2) returns 2\n3/4 Test #7: Fibonacci(2) returns 2 .........   Passed    0.00 sec\n    Start 8: Fibonacci(5) returns 8\n4/4 Test #8: Fibonacci(5) returns 8 .........   Passed    0.00 sec\n75% tests passed, 1 tests failed out of 4\nTotal Test time (real) =   0.02 sec\nThe following tests FAILED:\n          5 - Fibonacci(0) returns 1 (Failed)\n```", "```cpp\nset_tests_properties(some_test PROPERTIES\n                   FAIL_REGULAR_EXPRESSION \"[W|w]arning|[E|e]rror\"\n                   PASS_REGULAR_EXPRESSION \"[S|s]uccess\")\n```", "```cpp\nadd_test(NAME SomeFailingTerst COMMAND SomeFailingTest)\nset_tests_properties(SomeFailingTest PROPERTIES WILL_FAIL True)\n```", "```cpp\nset_tests_properties(timeout_test PROPERTIES TIMEOUT 10)\n```", "```cpp\nctest --timeout 30 --stop-time 23:59\n```", "```cpp\n add_test(NAME start_server COMMAND ch7_fixture_server)\nset_tests_properties(start_server PROPERTIES FIXTURES_SETUP ch7_server)\nadd_test(NAME stop_server COMMAND ch7_fixture_server --stop)\nset_tests_properties(stop_server PROPERTIES FIXTURES_CLEANUP ch7_server)\nadd_test(NAME ch7_fixture_test COMMAND ch7_fixture_sample)\nset_tests_properties(ch7_fixture_test PROPERTIES FIXTURES_REQUIRED ch7_server)\n```", "```cpp\nctest -R ch7_fixture_test\nTest project CMake-Best-Practices:\n    Start  9: start_server\n1/3 Test  #9: start_server ..............   Passed    0.00 sec\n    Start 11: client_test\n2/3 Test #11: client_test................   Passed    0.00 sec\n    Start 10: stop_server\n3/3 Test #10: stop_server ...............   Passed    0.00 sec\n```", "```cpp\nadd_test(NAME concurrency_test COMMAND concurrency_tests)\nset_tests_properties(concurrency_test PROPERTIES PROCESSORS 2)\n```", "```cpp\nset_tests_properties(database_test_1 database_test_2 database_test_3\n  PROPERTIES RESOURCE_LOCK database)\nset_tests_properties(some_other_test PROPERTIES RESOURCE_LOCK fileX)\nset_tests_properties(yet_another_test PROPERTIES RESOURCE_LOCK\n  \"database;fileX \")\n```", "```cpp\nset_property(TEST SomeTest PROPERTY RESOURCE_GROUPS\n    cpus:2,mem_mb:500\n    servers:1,clients:1\n    servers:1,clients:2\n    4,servers:1,clients:1\n )\n```", "```cpp\n{\n    \"version\": {\n        \"major\": 1,\n        \"minor\": 0\n    },\n    \"local\": [\n        {\n            \"mem_mb\": [\n                {\n                    \"id\": \"memory_pool_0\",\n                    \"slots\": 4096\n                }\n            ],\n            \"cpus\" :\n            [\n                {\n                    \"id\": \"cpu_0\",\n                    \"slots\": 8\n                }\n            ],\n            \"servers\": [\n                {\n                    \"id\": \"0\",\n                    \"slots\": 4\n                },\n                {\n                    \"id\": \"1\",\n                    \"slots\": 4\n                }\n            ],\n            \"clients\": [\n                {\n                    \"id\": \"0\",\n                    \"slots\": 8\n                },\n                {\n                    \"id\": \"1\",\n                    \"slots\": 8\n                }\n            ]\n        }\n    ]\n}\n```", "```cpp\nctest -j $(nproc) --resource-spec-file ../resources.json\nTest project /workspaces/CMake-Tips-and-Tricks/chapter_7\n  /resource_group_example/build\n    Start 2: resource_test_2\n                  Start 3: resource_test_3\nInsufficient resources for test resource_test_3:\n  Test requested resources of type 'mem_mb' in the following\n    amounts:\n    8096 slots\n  but only the following units were available:\n    'memory_pool_0': 4096 slots\nResource spec file:\n  ../resources.json\n```", "```cpp\ncmake -S <sourceDir> -B <BuildDir> -DCMAKE_CXX_FLAGS=--coverage\n```", "```cpp\ngcovr -r <SOURCE_DIR> <BINARY_DIR> -html\n```", "```cpp\nlcov -c -d <BINARY_DIR> -o <OUTPUT_FILE>\ngenhtml -o <HTML_OUTPUT_PATH> <LCOV_OUTPUT>\n```", "```cpp\nOpenCppCoverage.exe --export_type html:coverage.html --\n  MyProgram.exe arg1 arg2\n```", "```cpp\nOpenCppCoverage.exe --export_type binary:program1.cov --\n  program1.exe\nOpenCppCoverage.exe --export_type binary:program2.cov --\n  program2.exe\nOpenCppCoverage.exe --input_coverage=program1.cov --input_coverage=\n  program2.cov --export_type html:coverage.html\n```", "```cpp\nOpenCppCoverage.exe  --cover_children --modules <build_dir> --\n  sources <source_dir> -- ctest.exe --build-config Debug\n```", "```cpp\ncmake -S <sourceDir> -B <BuildDir> -DCMAKE_CXX_FLAGS=-fsanitize=\n  <sanitizer>\n```", "```cpp\ncmake -S <sourceDir> -B <buildDir>-DCMAKE_CXX_CLANG_TIDY=\"clang-\n  tidy;-checks=*;-header-filter=<sourceDir>/*\"\n```", "```cpp\ncmake -S <sourceDir> -B <buildDir> -DCMAKE_CXX_CPPCYHECK=\"cppcheck;-\n  -enable=warning;--inconclusive;--force;--inline-support\"\ncmake -S <sourceDir> -B <buildDir> -DCMAKE_CXX_CPPLINT=\"cpplint\"\ncmake -S <sourceDir> -B <buildDir> -CMAKE_CXX_INCLUDE_WHAT_YOU_USE=\n  \"iwyu;-Xiwyu;any;-Xiwyu;iwyu;-Xiwyu;args;--verbose=5\"\n```", "```cpp\ncmake -S <sourceDir> -B <buildDir> -DCMAKE_LINK_WHAT_YOU_USE=TRUE\n```", "```cpp\n[100%] Linking CXX executable ch7_lwyu_example\nWarning: Unused direct dependencies:\n        /lib/x86_64-linux-gnu/libssl.so.1.1\n        /lib/x86_64-linux-gnu/libcrypto.so.1.1\n```", "```cpp\n if(isMultiConfig)\n    if(NOT \"Coverage\" IN_LIST CMAKE_CONFIGURATION_TYPES)\n        list(APPEND CMAKE_CONFIGURATION_TYPES Coverage)\n    endif()\nelse()\n    set(allowedBuildTypes Debug Release Coverage RelWithDebugInfo MinSizeRel)\n    set_property(\n        CACHE CMAKE_BUILD_TYPE\n        PROPERTY STRINGS \"${allowedBuildTypes}\"\n    )\n    if(NOT CMAKE_BUILD_TYPE)\n        set(CMAKE_BUILD_TYPE Debug CACHE STRING \"\" FORCE)\n    elseif(NOT CMAKE_BUILD_TYPE IN_LIST allowedBuildTypes)\n        message(FATAL_ERROR \"Unknown build type: ${CMAKE_BUILD_TYPE}\")\n    endif()\nendif()\n```", "```cpp\nset(CMAKE_C_FLAGS_COVERAGE\n    \"${CMAKE_C_FLAGS_DEBUG} --coverage\" CACHE STRING \"\"\n)\nset(CMAKE_CXX_FLAGS_COVERAGE\n    \"${CMAKE_CXX_FLAGS_DEBUG} --coverage\" CACHE STRING \"\"\n)\nset(CMAKE_EXE_LINKER_FLAGS_COVERAGE\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage\" CACHE STRING \"\"\n)\nset(CMAKE_SHARED_LINKER_FLAGS_COVERAGE\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage\"\n     CACHE STRING \"\"\n)\n```", "```cpp\nmark_as_advanced(CMAKE_C_FLAGS_COVERAGE\n                 CMAKE_CXX_FLAGS_COVERAGE\n                 CMAKE_EXE_LINKER_FLAGS_COVERAGE\n                 CMAKE_SHARED_LINKER_FLAGS_COVERAGE\n                 CMAKE_STATIC_LINKGER_FLAGS_COVERAGE\n                 CMAKE_MODULE_LINKER_FLAGS_COVERAGE\n)\n```", "```cpp\nset_property(GLOBAL APPEND PROPERTY DEBUG_CONFIGURATIONS Coverage)\n```"]