["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\ntarget_compile_definitions(foo PUBLIC BAR=$<TARGET_FILE:baz>) \n```", "```cpp\n$<UPPER_CASE:$<PLATFORM_ID>> \n```", "```cpp\n$<UPPER_CASE:${my_variable}> \n```", "```cpp\n$<IF:condition,true_string,false_string> \n```", "```cpp\n$<IF:condition,true_string,> \n```", "```cpp\n$<condition:true_string> \n```", "```cpp\n$<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:AppleClan\n  g,Clang>>:COMPILING_CXX_WITH_CLANG> \n```", "```cpp\n$<TARGET_EXISTS:arg> \n```", "```cpp\n$<IF:condition,true_string,false_string> \n```", "```cpp\ntarget_compile_definitions(my_target PRIVATE\n                           $<IF:$<CONFIG:Debug>,Test,Production>\n) \n```", "```cpp\n    target_compile_options(myapp\n      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>\n    ) \n    ```", "```cpp\n    target_compile_definitions(myapp PRIVATE\n      $<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang>:CXX_CLANG>\n      $<$<COMPILE_LANG_AND_ID:CXX,Intel>:CXX_INTEL>\n      $<$<COMPILE_LANG_AND_ID:C,Clang>:C_CLANG>\n    ) \n    ```", "```cpp\n$<TARGET_PROPERTY:prop> \n```", "```cpp\ntarget_compile_options(tgt $<$<CONFIG:DEBUG>:-ginline-points>) \n```", "```cpp\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n     target_compile_definitions(myProject PRIVATE LINUX=1)\nendif() \n```", "```cpp\ntarget_compile_definitions(myProject PRIVATE\n                           $<$<CMAKE_SYSTEM_NAME:LINUX>:LINUX=1>) \n```", "```cpp\nadd_library(enable_rtti INTERFACE)\ntarget_compile_options(enable_rtti INTERFACE\n  $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>\n) \n```", "```cpp\nset(myvar \"small text\")\nset(myvar2 \"small text >\")\nfile(GENERATE OUTPUT nesting CONTENT \"\n  1 $<PLATFORM_ID>\n  2 $<UPPER_CASE:$<PLATFORM_ID>>\n  3 $<UPPER_CASE:hello world>\n  4 $<UPPER_CASE:${myvar}>\n  5 $<UPPER_CASE:${myvar2}>\n\") \n```", "```cpp\n# cat nesting\n  1 Linux\n  2 LINUX\n  3 HELLO WORLD\n  4 SMALL TEXT\n  5 SMALL  text> \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Boolean CXX)\nfile(GENERATE OUTPUT boolean CONTENT \"\n  1 $<0:TRUE>\n  2 $<0:TRUE,FALSE> (won't work)\n  3 $<1:TRUE,FALSE>\n  4 $<IF:0,TRUE,FALSE>\n  5 $<IF:0,TRUE,>\n\") \n```", "```cpp\n# cat boolean\n  1\n  2  (won't work)\n  3 TRUE,FALSE\n  4 FALSE\n  5 \n```"]