["```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() { return std::string(\"Hello, CMake superbuild world!\"); }\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n.\n├── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── hello-world.cpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nset_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)\n```", "```cpp\ninclude(ExternalProject)\n```", "```cpp\nExternalProject_Add(${PROJECT_NAME}_core\n```", "```cpp\nSOURCE_DIR\n${CMAKE_CURRENT_LIST_DIR}/src\n```", "```cpp\nCMAKE_ARGS\n  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n  -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\n  -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}\n  -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}\n```", "```cpp\nCMAKE_CACHE_ARGS\n  -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\n```", "```cpp\nBUILD_ALWAYS\n  1\n```", "```cpp\nINSTALL_COMMAND\n  \"\"\n)\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n```", "```cpp\nproject(recipe-01_core LANGUAGES CXX)\n```", "```cpp\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\n$ mkdir -p build\n$ cmake ..\n$ cmake --build .\n```", "```cpp\nbuild/subprojects/\n├── Build\n│   └── recipe-01_core\n│       ├── CMakeCache.txt\n│       ├── CMakeFiles\n│       ├── cmake_install.cmake\n│       ├── hello-world\n│       └── Makefile\n├── Download\n│   └── recipe-01_core\n├── Install\n│   └── recipe-01_core\n├── Stamp\n│   └── recipe-01_core\n│       ├── recipe-01_core-configure\n│       ├── recipe-01_core-done\n│       ├── recipe-01_core-download\n│       ├── recipe-01_core-install\n│       ├── recipe-01_core-mkdir\n│       ├── recipe-01_core-patch\n│       └── recipe-01_core-update\n└── tmp\n    └── recipe-01_core\n        ├── recipe-01_core-cache-.cmake\n        ├── recipe-01_core-cfgcmd.txt\n        └── recipe-01_core-cfgcmd.txt.in\n```", "```cpp\nTMP_DIR      = <EP_BASE>/tmp/<name>\nSTAMP_DIR    = <EP_BASE>/Stamp/<name>\nDOWNLOAD_DIR = <EP_BASE>/Download/<name>\nSOURCE_DIR   = <EP_BASE>/Source/<name>\nBINARY_DIR   = <EP_BASE>/Build/<name>\nINSTALL_DIR  = <EP_BASE>/Install/<name>\n```", "```cpp\n$ cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_STANDARD=11 \n-DCMAKE_CXX_EXTENSIONS=OFF -DCMAKE_CXX_STANDARD_REQUIRED=ON \n-C/home/roberto/Workspace/robertodr/cmake-cookbook/chapter-08/recipe-01/cxx-example/build/subprojects/tmp/recipe-01_core/recipe-01_core-cache-.cmake \"-GUnix Makefiles\" /home/roberto/Workspace/robertodr/cmake-cookbook/chapter-08/recipe-01/cxx-example/src\n```", "```cpp\nExternalProject_Get_Property(${PROJECT_NAME}_core CMAKE_ARGS)\nmessage(STATUS \"CMAKE_ARGS of ${PROJECT_NAME}_core ${CMAKE_ARGS}\")\n```", "```cpp\n.\n├── CMakeLists.txt\n├── external\n│   └── upstream\n│       ├── boost\n│       │   └── CMakeLists.txt\n│       └── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── path-info.cpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-02 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nset_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)\n```", "```cpp\nset(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)\nmessage(STATUS \"${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}\")\n```", "```cpp\nlist(APPEND BOOST_COMPONENTS_REQUIRED filesystem system)\nset(Boost_MINIMUM_REQUIRED 1.61)\n```", "```cpp\nadd_subdirectory(external/upstream)\n```", "```cpp\ninclude(ExternalProject)\n```", "```cpp\nExternalProject_Add(${PROJECT_NAME}_core\n  DEPENDS\n    boost_external\n  SOURCE_DIR\n    ${CMAKE_CURRENT_LIST_DIR}/src\n  CMAKE_ARGS\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\n    -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}\n    -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}\n  CMAKE_CACHE_ARGS\n    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\n    -DCMAKE_INCLUDE_PATH:PATH=${BOOST_INCLUDEDIR}\n    -DCMAKE_LIBRARY_PATH:PATH=${BOOST_LIBRARYDIR}\n```", "```cpp\n  BUILD_ALWAYS\n    1\n  INSTALL_COMMAND\n    \"\"\n  )\n```", "```cpp\nadd_subdirectory(boost)\n```", "```cpp\nfind_package(Boost ${Boost_MINIMUM_REQUIRED} QUIET COMPONENTS \"${BOOST_COMPONENTS_REQUIRED}\")\n```", "```cpp\nif(Boost_FOUND)\n  message(STATUS \"Found Boost version ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION}\")\n  add_library(boost_external INTERFACE)\nelse()    \n  # ... discussed below\nendif()\n```", "```cpp\nelse()\n  message(STATUS \"Boost ${Boost_MINIMUM_REQUIRED} could not be located, Building Boost 1.61.0 instead.\")\n```", "```cpp\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n    if(APPLE)\n      set(_toolset \"darwin\")\n    else()\n      set(_toolset \"gcc\")\n    endif()\n  elseif(CMAKE_CXX_COMPILER_ID MATCHES \".*Clang\")\n    set(_toolset \"clang\")\n  elseif(CMAKE_CXX_COMPILER_ID MATCHES \"Intel\")\n    if(APPLE)\n      set(_toolset \"intel-darwin\")\n    else()\n      set(_toolset \"intel-linux\")\n    endif()\n  endif()\n```", "```cpp\n  if(NOT \"${BOOST_COMPONENTS_REQUIRED}\" STREQUAL \"\")\n    # Replace unit_test_framework (used by CMake's find_package) with test (understood by Boost build toolchain)\n    string(REPLACE \"unit_test_framework\" \"test\" _b2_needed_components \"${BOOST_COMPONENTS_REQUIRED}\")\n    # Generate argument for BUILD_BYPRODUCTS\n    set(_build_byproducts)\n    set(_b2_select_libraries)\n    foreach(_lib IN LISTS _b2_needed_components)\n      list(APPEND _build_byproducts ${STAGED_INSTALL_PREFIX}/boost/lib/libboost_${_lib}${CMAKE_SHARED_LIBRARY_SUFFIX})\n      list(APPEND _b2_select_libraries --with-${_lib})\n    endforeach()\n    # Transform the ;-separated list to a ,-separated list (digested by the Boost build toolchain!)\n    string(REPLACE \";\" \",\" _b2_needed_components \"${_b2_needed_components}\")\n    set(_bootstrap_select_libraries \"--with-libraries=${_b2_needed_components}\")\n    string(REPLACE \";\" \", \" printout \"${BOOST_COMPONENTS_REQUIRED}\")\n    message(STATUS \"  Libraries to be built: ${printout}\")\n  endif()\n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(boost_external\n  URL\n    https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.zip\n  URL_HASH\n    SHA256=02d420e6908016d4ac74dfc712eec7d9616a7fc0da78b0a1b5b937536b2e01e8\n  DOWNLOAD_NO_PROGRESS\n    1\n```", "```cpp\n UPDATE_COMMAND\n   \"\"\n CONFIGURE_COMMAND\n   <SOURCE_DIR>/bootstrap.sh\n     --with-toolset=${_toolset}\n     --prefix=${STAGED_INSTALL_PREFIX}/boost\n     ${_bootstrap_select_libraries}\n```", "```cpp\n  BUILD_COMMAND\n    <SOURCE_DIR>/b2 -q\n         link=shared\n         threading=multi\n         variant=release\n         toolset=${_toolset}\n         ${_b2_select_libraries}\n  LOG_BUILD\n    1\n  BUILD_IN_SOURCE\n    1\n```", "```cpp\n  INSTALL_COMMAND\n    <SOURCE_DIR>/b2 -q install\n         link=shared\n         threading=multi\n         variant=release\n         toolset=${_toolset}\n         ${_b2_select_libraries}\n  LOG_INSTALL\n    1\n```", "```cpp\n  BUILD_BYPRODUCTS\n    \"${_build_byproducts}\"\n  )\n```", "```cpp\nset(\n  BOOST_ROOT ${STAGED_INSTALL_PREFIX}/boost\n  CACHE PATH \"Path to internally built Boost installation root\"\n  FORCE\n  )\nset(\n  BOOST_INCLUDEDIR ${BOOST_ROOT}/include\n  CACHE PATH \"Path to internally built Boost include directories\"\n  FORCE\n  )\nset(\n  BOOST_LIBRARYDIR ${BOOST_ROOT}/lib\n  CACHE PATH \"Path to internally built Boost library directories\"\n  FORCE\n  )\n```", "```cpp\n  unset(_toolset)\n  unset(_b2_needed_components)\n  unset(_build_byproducts)\n  unset(_b2_select_libraries)\n  unset(_boostrap_select_libraries)\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-02_core LANGUAGES CXX)\n```", "```cpp\nfind_package(Boost 1.61 REQUIRED COMPONENTS filesystem)\n```", "```cpp\nadd_executable(path-info path-info.cpp)\n\ntarget_link_libraries(path-info\n  PUBLIC\n    Boost::filesystem\n  )\n```", "```cpp\n.\n├── CMakeLists.txt\n├── external\n│   └── upstream\n│       ├── boost\n│       │   └── CMakeLists.txt\n│       └── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── path-info.cpp\n```", "```cpp\nCONFIGURE_COMMAND\n  <SOURCE_DIR>/bootstrap.sh\n  --with-toolset=${_toolset}\n  --prefix=${STAGED_INSTALL_PREFIX}/boost\n  ${_bootstrap_select_libraries}\n```", "```cpp\n.\n├── CMakeLists.txt\n├── external\n│   └── upstream\n│       ├── CMakeLists.txt\n│       └── fftw3\n│           └── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── fftw_example.c\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03 LANGUAGES C)\n\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_EXTENSIONS OFF)\nset(CMAKE_C_STANDARD_REQUIRED ON)\n```", "```cpp\nset_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)\n\nset(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)\nmessage(STATUS \"${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}\")\n```", "```cpp\nadd_subdirectory(external/upstream)\n```", "```cpp\ninclude(ExternalProject)\n```", "```cpp\nExternalProject_Add(${PROJECT_NAME}_core\n  DEPENDS\n    fftw3_external\n  SOURCE_DIR\n    ${CMAKE_CURRENT_LIST_DIR}/src\n  CMAKE_ARGS\n    -DFFTW3_DIR=${FFTW3_DIR}\n    -DCMAKE_C_STANDARD=${CMAKE_C_STANDARD}\n    -DCMAKE_C_EXTENSIONS=${CMAKE_C_EXTENSIONS}\n    -DCMAKE_C_STANDARD_REQUIRED=${CMAKE_C_STANDARD_REQUIRED}\n  CMAKE_CACHE_ARGS\n    -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}\n    -DCMAKE_PREFIX_PATH:PATH=${CMAKE_PREFIX_PATH}\n  BUILD_ALWAYS\n    1\n  INSTALL_COMMAND\n    \"\"\n  )\n```", "```cpp\nadd_subdirectory(fftw3)\n```", "```cpp\nfind_package(FFTW3 CONFIG QUIET)\n```", "```cpp\nfind_package(FFTW3 CONFIG QUIET)\n\nif(FFTW3_FOUND)\n  get_property(_loc TARGET FFTW3::fftw3 PROPERTY LOCATION)\n  message(STATUS \"Found FFTW3: ${_loc} (found version ${FFTW3_VERSION})\")\n  add_library(fftw3_external INTERFACE) # dummy\nelse()\n  # this branch will be discussed below\nendif()\n```", "```cpp\nmessage(STATUS \"Suitable FFTW3 could not be located. Downloading and building!\")\n\ninclude(ExternalProject)\nExternalProject_Add(fftw3_external\n  URL\n    http://www.fftw.org/fftw-3.3.8.tar.gz\n  URL_HASH\n    MD5=8aac833c943d8e90d51b697b27d4384d\n```", "```cpp\n  DOWNLOAD_NO_PROGRESS\n    1\n  UPDATE_COMMAND\n    \"\"\n```", "```cpp\n  LOG_CONFIGURE\n    1\n  LOG_BUILD\n    1\n  LOG_INSTALL\n    1\n```", "```cpp\n  CMAKE_ARGS\n    -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}\n    -DBUILD_TESTS=OFF\n```", "```cpp\n  CMAKE_CACHE_ARGS\n    -DCMAKE_C_FLAGS:STRING=$<$<BOOL:WIN32>:-DWITH_OUR_MALLOC>\n  )\n```", "```cpp\ninclude(GNUInstallDirs)\n\nset(\n  FFTW3_DIR ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake/fftw3\n  CACHE PATH \"Path to internally built FFTW3Config.cmake\"\n  FORCE\n  )\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03_core LANGUAGES C)\n```", "```cpp\nfind_package(FFTW3 CONFIG REQUIRED)\nget_property(_loc TARGET FFTW3::fftw3 PROPERTY LOCATION)\nmessage(STATUS \"Found FFTW3: ${_loc} (found version ${FFTW3_VERSION})\")\n```", "```cpp\nadd_executable(fftw_example fftw_example.c)\n```", "```cpp\ntarget_link_libraries(fftw_example\n  PRIVATE\n    FFTW3::fftw3\n  )\n```", "```cpp\ninclude(FetchContent)\n```", "```cpp\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.8.0\n)\n```", "```cpp\nFetchContent_GetProperties(googletest)\n```", "```cpp\nif(NOT googletest_POPULATED)\n  FetchContent_Populate(googletest)\n\n  # ...\n\n  # adds the targets: gtest, gtest_main, gmock, gmock_main\n  add_subdirectory(\n    ${googletest_SOURCE_DIR}\n    ${googletest_BINARY_DIR}\n    )\n\n  # ...\n\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```", "```cpp\nbuild/\n├── ...\n├── _deps\n│   ├── googletest-build\n│   │   ├── ...\n│   │   └── ...\n│   ├── googletest-src\n│   │   ├── ...\n│   │   └── ...\n│   └── googletest-subbuild\n│       ├── ...\n│       └── ...\n└── ...\n```", "```cpp\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.8.0\n)\n```", "```cpp\nif(NOT googletest_POPULATED)\n  FetchContent_Populate(googletest)\n\n  # ...\n\nendif()\n```", "```cpp\nadd_subdirectory(\n  ${googletest_SOURCE_DIR}\n  ${googletest_BINARY_DIR}\n  )\n```", "```cpp\nset(FETCHCONTENT_BASE_DIR ${CMAKE_BINARY_DIR}/custom)\n\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.8.0\n)\n```", "```cpp\ninclude(fetch_git_repo.cmake)\n\nfetch_git_repo(\n  googletest\n  ${CMAKE_BINARY_DIR}/_deps\n  https://github.com/google/googletest.git\n  release-1.8.0\n)\n\n# ...\n\n# adds the targets: gtest, gtest_main, gmock, gmock_main\nadd_subdirectory(\n  ${googletest_SOURCE_DIR}\n  ${googletest_BINARY_DIR}\n  )\n\n# ...\n```", "```cpp\nmacro(fetch_git_repo _project_name _download_root _git_url _git_tag)\n\n  set(${_project_name}_SOURCE_DIR ${_download_root}/${_project_name}-src)\n  set(${_project_name}_BINARY_DIR ${_download_root}/${_project_name}-build)\n\n  # variables used configuring fetch_git_repo_sub.cmake\n  set(FETCH_PROJECT_NAME ${_project_name})\n  set(FETCH_SOURCE_DIR ${${_project_name}_SOURCE_DIR})\n  set(FETCH_BINARY_DIR ${${_project_name}_BINARY_DIR})\n  set(FETCH_GIT_REPOSITORY ${_git_url})\n  set(FETCH_GIT_TAG ${_git_tag})\n\n  configure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/fetch_at_configure_step.in\n    ${_download_root}/CMakeLists.txt\n    @ONLY\n    )\n\n  # undefine them again\n  unset(FETCH_PROJECT_NAME)\n  unset(FETCH_SOURCE_DIR)\n  unset(FETCH_BINARY_DIR)\n  unset(FETCH_GIT_REPOSITORY)\n  unset(FETCH_GIT_TAG)\n\n  # configure sub-project\n  execute_process(\n    COMMAND\n      \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY\n      ${_download_root}\n    )\n  # build sub-project which triggers ExternalProject_Add\n  execute_process(\n    COMMAND\n      \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY\n      ${_download_root}\n    )\nendmacro()\n```", "```cpp\nadd_subdirectory(\n  ${googletest_SOURCE_DIR}\n  ${googletest_BINARY_DIR}\n  )\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(fetch_git_repo_sub LANGUAGES NONE)\n\ninclude(ExternalProject)\n\nExternalProject_Add(\n  @FETCH_PROJECT_NAME@\n  SOURCE_DIR \"@FETCH_SOURCE_DIR@\"\n  BINARY_DIR \"@FETCH_BINARY_DIR@\"\n  GIT_REPOSITORY\n    @FETCH_GIT_REPOSITORY@\n  GIT_TAG\n    @FETCH_GIT_TAG@\n  CONFIGURE_COMMAND \"\"\n  BUILD_COMMAND \"\"\n  INSTALL_COMMAND \"\"\n  TEST_COMMAND \"\"\n  )\n```", "```cpp\n# configure sub-project\nexecute_process(\n  COMMAND\n    \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" . \n  WORKING_DIRECTORY\n    ${_download_root}\n  ) \n```", "```cpp\n# build sub-project which triggers ExternalProject_Add\nexecute_process(\n  COMMAND\n    \"${CMAKE_COMMAND}\" --build . \n  WORKING_DIRECTORY\n    ${_download_root}\n  )\n```", "```cpp\n.\n├── CMakeLists.txt\n├── external\n│   └── upstream\n│       ├── CMakeLists.txt\n│       └── message\n│           └── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── use_message.cpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\nproject(recipe-05 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif(NOT DEFINED CMAKE_BUILD_TYPE OR \"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\nmessage(STATUS \"Build type set to ${CMAKE_BUILD_TYPE}\")\n```", "```cpp\nset_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)\n```", "```cpp\nset(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)\nmessage(STATUS \"${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}\")\n```", "```cpp\nadd_subdirectory(external/upstream)\n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(${PROJECT_NAME}_core\n  DEPENDS\n    message_external\n  SOURCE_DIR\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n  CMAKE_ARGS\n    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\n    -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}\n    -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}\n    -Dmessage_DIR=${message_DIR}\n  CMAKE_CACHE_ARGS\n    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\n    -DCMAKE_PREFIX_PATH:PATH=${CMAKE_PREFIX_PATH}\n  BUILD_ALWAYS\n    1\n  INSTALL_COMMAND\n    \"\"\n  )\n```", "```cpp\nadd_subdirectory(message)\n```", "```cpp\nfind_package(message 1 CONFIG QUIET)\n```", "```cpp\nget_property(_loc TARGET message::message-shared PROPERTY LOCATION)\nmessage(STATUS \"Found message: ${_loc} (found version ${message_VERSION})\")\nadd_library(message_external INTERFACE) # dummy\n```", "```cpp\nmessage(STATUS \"Suitable message could not be located, Building message instead.\")\n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(message_external\n  GIT_REPOSITORY\n    https://github.com/dev-cafe/message.git\n  GIT_TAG\n    master\n  UPDATE_COMMAND\n    \"\"\n```", "```cpp\n CMAKE_ARGS\n   -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}\n   -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}\n   -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n   -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}\n   -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}\n   -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}\n CMAKE_CACHE_ARGS\n   -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\n```", "```cpp\n  TEST_AFTER_INSTALL\n    1\n```", "```cpp\n  DOWNLOAD_NO_PROGRESS\n    1\n  LOG_CONFIGURE\n    1\n  LOG_BUILD\n    1\n  LOG_INSTALL\n    1\n  )\n```", "```cpp\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_message_DIR ${STAGED_INSTALL_PREFIX}/CMake)\nelse()\n  set(DEF_message_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/message)\nendif()\n\nfile(TO_NATIVE_PATH \"${DEF_message_DIR}\" DEF_message_DIR)\nset(message_DIR ${DEF_message_DIR}\n    CACHE PATH \"Path to internally built messageConfig.cmake\" FORCE)\n```", "```cpp\ncmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n\nproject(recipe-05_core\n  LANGUAGES CXX\n  )\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nfind_package(message 1 CONFIG REQUIRED)\nget_property(_loc TARGET message::message-shared PROPERTY LOCATION)\nmessage(STATUS \"Found message: ${_loc} (found version ${message_VERSION})\")\n```", "```cpp\nadd_executable(use_message use_message.cpp)\n\ntarget_link_libraries(use_message\n  PUBLIC\n    message::message-shared\n  )\n```"]