["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\nadd_executable(app1 a.cpp b.cpp c.cpp) \n```", "```cpp\nadd_executable(<name> [WIN32] [MACOSX_BUNDLE]\n               [EXCLUDE_FROM_ALL]\n               [source1] [source2 ...]) \n```", "```cpp\ncmake --build -t <target> \n```", "```cpp\nadd_library(<name> [STATIC | SHARED | MODULE]\n            [EXCLUDE_FROM_ALL]\n            [<source>...]) \n```", "```cpp\nadd_custom_target(Name [ALL] [COMMAND command2 [args2...] ...]) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(BankApp CXX)\nadd_executable(terminal_app terminal_app.cpp)\nadd_executable(gui_app gui_app.cpp)\ntarget_link_libraries(terminal_app calculations)\ntarget_link_libraries(gui_app calculations drawing)\nadd_library(calculations calculations.cpp)\nadd_library(drawing drawing.cpp)\nadd_custom_target(checksum ALL\n    COMMAND sh -c \"cksum terminal_app>terminal.ck\"\n    COMMAND sh -c \"cksum gui_app>gui.ck\"\n    BYPRODUCTS terminal.ck gui.ck\n    COMMENT \"Checking the sums...\"\n) \n```", "```cpp\nadd_dependencies(checksum terminal_app gui_app) \n```", "```cpp\ncmake --graphviz=test.dot . \n```", "```cpp\nset(GRAPHVIZ_CUSTOM_TARGETS TRUE) \n```", "```cpp\nget_target_property(<var> <target> <property-name>)\nset_target_properties(<target1> <target2> ...\n                      PROPERTIES <prop1-name> <value1>\n                      <prop2-name> <value2> ...) \n```", "```cpp\nset_property`(`TARGET `<target>` PROPERTY `<name> <value>)` \n```", "```cpp\ntarget_compile_definitions(<source> <INTERFACE|PUBLIC|PRIVATE> [items1...]) \n```", "```cpp\ntarget_link_libraries(<target>\n                     <PRIVATE|PUBLIC|INTERFACE> <item>...\n                    [<PRIVATE|PUBLIC|INTERFACE> <item>...]...) \n```", "```cpp\nCMake Error: The INTERFACE_POSITION_INDEPENDENT_CODE property of \"source_target\" does not agree with the value of POSITION_INDEPENDENT_CODE already determined for \"destination_target\". \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(PropagatedProperties CXX)\nadd_library(source1 empty.cpp)\nset_property(TARGET source1 PROPERTY **INTERFACE_LIB_VERSION** **4**)\nset_property(TARGET source1 APPEND PROPERTY\n             COMPATIBLE_INTERFACE_STRING LIB_VERSION)\nadd_library(source2 empty.cpp)\nset_property(TARGET source2 PROPERTY **INTERFACE_LIB_VERSION** **4**)\nadd_library(destination empty.cpp)\ntarget_link_libraries(destination source1 source2) \n```", "```cpp\nadd_executable(<name> ALIAS <target>)\nadd_library(<name> ALIAS <target>) \n```", "```cpp\nadd_library(Eigen **INTERFACE**\n  src/eigen.h src/vector.h src/matrix.h\n)\ntarget_include_directories(Eigen INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n  $<INSTALL_INTERFACE:include/Eigen>\n) \ngenerator expressions (these are indicated with dollar sign and angle brackets, $<...> and will be explained in the next chapter), we set its include directories to be ${CMAKE_CURRENT_SOURCE_DIR}/src when a target is exported and include/Eigen when itâ€™s installed (which will also be explained at the end of this chapter).\n```", "```cpp\ntarget_link_libraries(executable Eigen) \n```", "```cpp\nadd_library(warning_properties **INTERFACE**)\ntarget_compile_options(warning_properties INTERFACE\n  -Wall -Wextra -Wpedantic\n)\ntarget_link_libraries(executable warning_properties) \n```", "```cpp\nadd_library(<target> OBJECT <sources>) \n```", "```cpp\nadd_library(... $<TARGET_OBJECTS:objlib> ...)\nadd_executable(... $<TARGET_OBJECTS:objlib> ...) \n```", "```cpp\nadd_executable(<name> **EXCLUDE_FROM_ALL** [<source>...])\nadd_library(<name> **EXCLUDE_FROM_ALL** [<source>...]) \n```", "```cpp\nadd_custom_command(OUTPUT output1 [output2 ...]\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [MAIN_DEPENDENCY depend]\n                   [DEPENDS [depends...]]\n                   [BYPRODUCTS [files...]]\n                   [IMPLICIT_DEPENDS <lang1> depend1\n                                    [<lang2> depend2] ...]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [DEPFILE depfile]\n                   [JOB_POOL job_pool]\n                   [VERBATIM] [APPEND] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS]) \n```", "```cpp\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n} \n```", "```cpp\nadd_custom_command(OUTPUT person.pb.h person.pb.cc\n        COMMAND protoc ARGS person.proto\n        DEPENDS person.proto\n) \n```", "```cpp\nadd_executable(serializer serializer.cpp person.pb.cc) \n```", "```cpp\nadd_executable(main main.cpp constants.h)\ntarget_include_directories(main PRIVATE ${CMAKE_BINARY_DIR})\nadd_custom_command(OUTPUT constants.h **COMMAND** **cp**\n                   ARGS \"${CMAKE_SOURCE_DIR}/template.xyz\" constants.h) \n```", "```cpp\nadd_custom_command(**TARGET** **<target>**\n                   PRE_BUILD | PRE_LINK | POST_BUILD\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [BYPRODUCTS [files...]]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [VERBATIM] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS]) \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Command CXX)\nadd_executable(main main.cpp)\nadd_custom_command(TARGET main POST_BUILD\n                   COMMAND cksum\n                   ARGS \"$<TARGET_FILE:main>\" > \"main.ck\") \n```"]