["```cpp\nprogram hello_world\n\n  implicit none\n\n  interface\n    subroutine print_info() bind(c, name=\"print_info\")\n    end subroutine\n  end interface\n\n  call print_info()\n\nend program\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n\nvoid print_info(void) {\n  printf(\"\\n\");\n  printf(\"Configuration and build information\\n\");\n  printf(\"-----------------------------------\\n\");\n  printf(\"\\n\");\n  printf(\"Who compiled | %s\\n\", \"@_user_name@\");\n  printf(\"Compilation hostname | %s\\n\", \"@_host_name@\");\n  printf(\"Fully qualified domain name | %s\\n\", \"@_fqdn@\");\n  printf(\"Operating system | %s\\n\",\n         \"@_os_name@, @_os_release@, @_os_version@\");\n  printf(\"Platform | %s\\n\", \"@_os_platform@\");\n  printf(\"Processor info | %s\\n\",\n         \"@_processor_name@, @_processor_description@\");\n  printf(\"CMake version | %s\\n\", \"@CMAKE_VERSION@\");\n  printf(\"CMake generator | %s\\n\", \"@CMAKE_GENERATOR@\");\n  printf(\"Configuration time | %s\\n\", \"@_configuration_time@\");\n  printf(\"Fortran compiler | %s\\n\", \"@CMAKE_Fortran_COMPILER@\");\n  printf(\"C compiler | %s\\n\", \"@CMAKE_C_COMPILER@\");\n  printf(\"\\n\");\n\n  fflush(stdout);\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.10 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES Fortran C)\n```", "```cpp\nexecute_process(\n  COMMAND\n    whoami\n  TIMEOUT\n    1\n  OUTPUT_VARIABLE\n    _user_name\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n```", "```cpp\n# host name information\ncmake_host_system_information(RESULT _host_name QUERY HOSTNAME)\ncmake_host_system_information(RESULT _fqdn QUERY FQDN)\n\n# processor information\ncmake_host_system_information(RESULT _processor_name QUERY PROCESSOR_NAME)\ncmake_host_system_information(RESULT _processor_description QUERY PROCESSOR_DESCRIPTION)\n\n# os information\ncmake_host_system_information(RESULT _os_name QUERY OS_NAME)\ncmake_host_system_information(RESULT _os_release QUERY OS_RELEASE)\ncmake_host_system_information(RESULT _os_version QUERY OS_VERSION)\ncmake_host_system_information(RESULT _os_platform QUERY OS_PLATFORM)\n```", "```cpp\nstring(TIMESTAMP _configuration_time \"%Y-%m-%d %H:%M:%S [UTC]\" UTC)\n```", "```cpp\nconfigure_file(print_info.c.in print_info.c @ONLY)\n```", "```cpp\nadd_executable(example \"\")\n\ntarget_sources(example\n  PRIVATE\n    example.f90\n    ${CMAKE_CURRENT_BINARY_DIR}/print_info.c\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./example\n\nConfiguration and build information\n-----------------------------------\n\nWho compiled                | somebody\nCompilation hostname        | laptop\nFully qualified domain name | laptop\nOperating system            | Linux, 4.16.13-1-ARCH, #1 SMP PREEMPT Thu May 31 23:29:29 UTC 2018\nPlatform                    | x86_64\nProcessor info              | Unknown P6 family, 2 core Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz\nCMake version               | 3.11.3\nCMake generator             | Unix Makefiles\nConfiguration time          | 2018-06-25 15:38:03 [UTC]\nFortran compiler            | /usr/bin/f95\nC compiler                  | /usr/bin/cc\n```", "```cpp\nconfigure_file(print_info.c.in print_info.c @ONLY)\n```", "```cpp\ndef configure_file(input_file, output_file, vars_dict):\n\n    with input_file.open('r') as f:\n        template = f.read()\n\n    for var in vars_dict:\n        template = template.replace('@' + var + '@', vars_dict[var])\n\n    with output_file.open('w') as f:\n        f.write(template)\n```", "```cpp\nset(_config_script\n\"\nfrom pathlib import Path\nsource_dir = Path('${CMAKE_CURRENT_SOURCE_DIR}')\nbinary_dir = Path('${CMAKE_CURRENT_BINARY_DIR}')\ninput_file = source_dir / 'print_info.c.in'\noutput_file = binary_dir / 'print_info.c'\n\nimport sys\nsys.path.insert(0, str(source_dir))\n\nfrom configurator import configure_file\nvars_dict = {\n    '_user_name':             '${_user_name}',\n    '_host_name':             '${_host_name}',\n    '_fqdn':                  '${_fqdn}',\n    '_processor_name':        '${_processor_name}',\n    '_processor_description': '${_processor_description}',\n    '_os_name':               '${_os_name}',\n    '_os_release':            '${_os_release}',\n    '_os_version':            '${_os_version}',\n    '_os_platform':           '${_os_platform}',\n    '_configuration_time':    '${_configuration_time}',\n    'CMAKE_VERSION':          '${CMAKE_VERSION}',\n    'CMAKE_GENERATOR':        '${CMAKE_GENERATOR}',\n    'CMAKE_Fortran_COMPILER': '${CMAKE_Fortran_COMPILER}',\n    'CMAKE_C_COMPILER':       '${CMAKE_C_COMPILER}',\n}\nconfigure_file(input_file, output_file, vars_dict)\n\")\n```", "```cpp\nfind_package(PythonInterp QUIET REQUIRED)\n```", "```cpp\nexecute_process(\n  COMMAND\n    ${PYTHON_EXECUTABLE} \"-c\" ${_config_script}\n  )\n```", "```cpp\nget_cmake_property(_vars VARIABLES)\nforeach(_var IN ITEMS ${_vars})\n  message(\"variable ${_var} has the value ${${_var}}\")\nendforeach()\n```", "```cpp\n\"\"\"\nGenerates C++ vector of prime numbers up to max_number\nusing sieve of Eratosthenes.\n\"\"\"\nimport pathlib\nimport sys\n\n# for simplicity we do not verify argument list\nmax_number = int(sys.argv[-2])\noutput_file_name = pathlib.Path(sys.argv[-1])\n\nnumbers = range(2, max_number + 1)\nis_prime = {number: True for number in numbers}\n\nfor number in numbers:\n    current_position = number\n    if is_prime[current_position]:\n        while current_position <= max_number:\n            current_position += number\n            is_prime[current_position] = False\n\nprimes = (number for number in numbers if is_prime[number])\ncode = \"\"\"#pragma once\n\n#include <vector>\n\nconst std::size_t max_number = {max_number};\n\nstd::vector<int> & primes() {{\n  static std::vector<int> primes;\n\n{push_back}\n\n  return primes;\n}}\n\"\"\"\npush_back = '\\n'.join(['  primes.push_back({:d});'.format(x) for x in primes])\noutput_file_name.write_text(\n    code.format(max_number=max_number, push_back=push_back))\n```", "```cpp\n#include \"primes.hpp\"\n\n#include <iostream>\n#include <vector>\n\nint main() {\n  std::cout << \"all prime numbers up to \" << max_number << \":\";\n\n  for (auto prime : primes())\n    std::cout << \" \" << prime;\n\n  std::cout << std::endl;\n\n  return 0;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nfind_package(PythonInterp QUIET REQUIRED)\n```", "```cpp\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/generated)\n```", "```cpp\nset(MAX_NUMBER \"100\" CACHE STRING \"Upper bound for primes\")\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  COMMAND\n    ${PYTHON_EXECUTABLE} generate.py ${MAX_NUMBER} ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}\n  DEPENDS\n    generate.py\n  )\n```", "```cpp\nadd_executable(example \"\")\n\ntarget_sources(example\n  PRIVATE\n    example.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  )\n\ntarget_include_directories(example\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/generated\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./example\n\nall prime numbers up to 100: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  COMMAND\n    ${PYTHON_EXECUTABLE} generate.py ${MAX_NUMBER} ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}\n  DEPENDS\n    generate.py\n  )\n```", "```cpp\ntarget_sources(example\n  PRIVATE\n    example.cpp\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/primes.hpp\n  )\n```", "```cpp\n#include \"version.h\"\n\n#include <stdio.h>\n\nint main() {\n  printf(\"This is output from code %s\\n\", PROJECT_VERSION);\n  printf(\"Major version number: %i\\n\", PROJECT_VERSION_MAJOR);\n  printf(\"Minor version number: %i\\n\", PROJECT_VERSION_MINOR);\n\n  printf(\"Hello CMake world!\\n\");\n}\n```", "```cpp\n#pragma once\n\n#define PROJECT_VERSION_MAJOR @PROJECT_VERSION_MAJOR@\n#define PROJECT_VERSION_MINOR @PROJECT_VERSION_MINOR@\n#define PROJECT_VERSION_PATCH @PROJECT_VERSION_PATCH@\n\n#define PROJECT_VERSION \"v@PROJECT_VERSION@\"\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 VERSION 2.0.1 LANGUAGES C)\n```", "```cpp\nconfigure_file(\n  version.h.in\n  generated/version.h\n  @ONLY\n  )\n```", "```cpp\nadd_executable(example example.c)\n\ntarget_include_directories(example\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/generated\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./example\n\nThis is output from code v2.0.1\nMajor version number: 2\nMinor version number: 0\nHello CMake world!\n```", "```cpp\n2.0.1-rc-2\n```", "```cpp\n#pragma once\n\n#include <string>\n\nconst std::string PROGRAM_VERSION = \"@PROGRAM_VERSION@\";\n```", "```cpp\n// provides PROGRAM_VERSION\n#include \"version.hpp\"\n\n#include <iostream>\n\nint main() {\n  std::cout << \"This is output from code v\" << PROGRAM_VERSION\n                                            << std::endl;\n\n  std::cout << \"Hello CMake world!\" << std::endl;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-05 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\")\n  file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\" PROGRAM_VERSION)\n  string(STRIP \"${PROGRAM_VERSION}\" PROGRAM_VERSION)\nelse()\n  message(FATAL_ERROR \"File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION not found\")\nendif()\n```", "```cpp\nconfigure_file(\n  version.hpp.in\n  generated/version.hpp\n  @ONLY\n  )\n```", "```cpp\nadd_executable(example example.cpp)\n\ntarget_include_directories(example\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/generated\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./example\n\nThis is output from code v2.0.1-rc-2\nHello CMake world!\n```", "```cpp\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\")\n  file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION\" PROGRAM_VERSION)\n  string(STRIP \"${PROGRAM_VERSION}\" PROGRAM_VERSION)\nelse()\n  message(FATAL_ERROR \"File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION not found\")\nendif()\n```", "```cpp\nconfigure_file(\n  version.hpp.in\n  generated/version.hpp\n  @ONLY\n  )\n```", "```cpp\n#pragma once\n\n#include <string>\n\nconst std::string GIT_HASH = \"@GIT_HASH@\";\n```", "```cpp\n#include \"version.hpp\"\n\n#include <iostream>\n\nint main() {\n  std::cout << \"This code has been configured from version \" << GIT_HASH\n            << std::endl;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-06 LANGUAGES CXX)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```", "```cpp\n# in case Git is not available, we default to \"unknown\"\nset(GIT_HASH \"unknown\")\n\n# find Git and if available set GIT_HASH variable\nfind_package(Git QUIET)\nif(GIT_FOUND)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%h\n    OUTPUT_VARIABLE GIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n    WORKING_DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}\n    )\nendif()\n\nmessage(STATUS \"Git hash is ${GIT_HASH}\")\n```", "```cpp\n# generate file version.hpp based on version.hpp.in\nconfigure_file(\n  version.hpp.in\n  generated/version.hpp\n  @ONLY\n  )\n\n# example code\nadd_executable(example example.cpp)\n\n# needs to find the generated header file\ntarget_include_directories(example\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/generated\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./example\n\nThis code has been configured from version d58c64f\n```", "```cpp\nset(GIT_HASH \"unknown\")\n```", "```cpp\n#include \"version.hpp\"\n\n#include <iostream>\n\nint main() {\n  std::cout << \"This code has been built from version \" << GIT_HASH << std::endl;\n}\n```", "```cpp\n# in case Git is not available, we default to \"unknown\"\nset(GIT_HASH \"unknown\")\n\n# find Git and if available set GIT_HASH variable\nfind_package(Git QUIET)\nif(GIT_FOUND)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} log -1 --pretty=format:%h\n    OUTPUT_VARIABLE GIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n    )\nendif()\n\nmessage(STATUS \"Git hash is ${GIT_HASH}\")\n\n# generate file version.hpp based on version.hpp.in\nconfigure_file(\n  ${CMAKE_CURRENT_LIST_DIR}/version.hpp.in\n  ${TARGET_DIR}/generated/version.hpp\n  @ONLY\n  )\n```", "```cpp\n# set minimum cmake version\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\n# project name and language\nproject(recipe-07 LANGUAGES CXX)\n\n# require C++11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# example code\nadd_executable(example example.cpp)\n\n# needs to find the generated header file\ntarget_include_directories(example\n  PRIVATE\n    ${CMAKE_CURRENT_BINARY_DIR}/generated\n  )\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/version.hpp\n    ALL\n  COMMAND\n    ${CMAKE_COMMAND} -D TARGET_DIR=${CMAKE_CURRENT_BINARY_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/git-hash.cmake\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n\n# rebuild version.hpp every time\nadd_custom_target(\n  get_git_hash\n  ALL\n  DEPENDS\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/version.hpp\n  )\n\n# version.hpp has to be generated\n# before we start building example\nadd_dependencies(example get_git_hash)\n```", "```cpp\nadd_custom_command(\n  OUTPUT\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/version.hpp\n    ALL\n  COMMAND\n    ${CMAKE_COMMAND} -D TARGET_DIR=${CMAKE_CURRENT_BINARY_DIR} -P ${CMAKE_CURRENT_SOURCE_DIR}/git-hash.cmake\n  WORKING_DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n```", "```cpp\nadd_custom_target(\n  get_git_hash\n  ALL\n  DEPENDS\n    ${CMAKE_CURRENT_BINARY_DIR}/generated/version.hpp\n  )\n```"]