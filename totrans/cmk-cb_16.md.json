["```cpp\n$ git clone --single-branch -b v8.1.0290 https://github.com/vim/vim.git\n```", "```cpp\n$ git clone --single-branch -b cmake-support https://github.com/dev-cafe/vim\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(vim LANGUAGES C)\n```", "```cpp\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n```", "```cpp\ninclude(GNUInstallDirs)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY\n  ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n```", "```cpp\n$ ./configure --enable-gui=no\n\n... lot of output ...\n\n$ make > build.log\n```", "```cpp\nmessage(STATUS \"for debugging printing the value of ${some_variable}\")\n```", "```cpp\n--disable-netbeans    Disable NetBeans integration support.\n--disable-channel     Disable process communication support.\n--enable-terminal     Enable terminal emulation support.\n--with-features=TYPE  tiny, small, normal, big or huge (default: huge)\n```", "```cpp\noption(ENABLE_NETBEANS \"Enable netbeans\" ON)\noption(ENABLE_CHANNEL \"Enable channel\" ON)\noption(ENABLE_TERMINAL \"Enable terminal\" ON)\n```", "```cpp\nif(NOT FEATURES)\n  set(FEATURES \"huge\" CACHE STRING\n    \"FEATURES chosen by the user at CMake configure time\")\nendif()\n```", "```cpp\nlist(APPEND _available_features \"tiny\" \"small\" \"normal\" \"big\" \"huge\")\nif(NOT FEATURES IN_LIST _available_features)\n  message(FATAL_ERROR \"Unknown features: \\\"${FEATURES}\\\". Allowed values are: ${_available_features}.\")\nendif()\nset_property(CACHE FEATURES PROPERTY STRINGS ${_available_features})\n```", "```cpp\nadd_subdirectory(src)\n```", "```cpp\nadd_executable(vim\n  arabic.c beval.c buffer.c blowfish.c crypt.c crypt_zip.c dict.c diff.c digraph.c edit.c eval.c evalfunc.c ex_cmds.c ex_cmds2.c ex_docmd.c ex_eval.c ex_getln.c farsi.c fileio.c fold.c getchar.c hardcopy.c hashtab.c if_cscope.c if_xcmdsrv.c list.c mark.c memline.c menu.c misc1.c misc2.c move.c mbyte.c normal.c ops.c option.c os_unix.c auto/pathdef.c popupmnu.c pty.c quickfix.c regexp.c screen.c search.c sha256.c spell.c spellfile.c syntax.c tag.c term.c terminal.c ui.c undo.c userfunc.c window.c libvterm/src/encoding.c libvterm/src/keyboard.c libvterm/src/mouse.c libvterm/src/parser.c libvterm/src/pen.c libvterm/src/screen.c libvterm/src/state.c libvterm/src/unicode.c libvterm/src/vterm.c netbeans.c channel.c charset.c json.c main.c memfile.c message.c version.c\n  )\n```", "```cpp\n.\n├── CMakeLists.txt\n└── src\n    ├── CMakeLists.txt\n    └── libvterm\n        └── CMakeLists.txt\n```", "```cpp\nadd_executable(vim\n  main.c\n  )\n\ntarget_compile_definitions(vim\n  PRIVATE\n    \"HAVE_CONFIG_H\"\n  )\n```", "```cpp\nadd_library(basic_sources \"\")\n\ntarget_sources(basic_sources\n  PRIVATE\n    arabic.c beval.c blowfish.c buffer.c charset.c\n    crypt.c crypt_zip.c dict.c diff.c digraph.c\n    edit.c eval.c evalfunc.c ex_cmds.c ex_cmds2.c\n    ex_docmd.c ex_eval.c ex_getln.c farsi.c fileio.c\n    fold.c getchar.c hardcopy.c hashtab.c if_cscope.c\n    if_xcmdsrv.c json.c list.c main.c mark.c\n    memfile.c memline.c menu.c message.c misc1.c\n    misc2.c move.c mbyte.c normal.c ops.c\n    option.c os_unix.c auto/pathdef.c popupmnu.c pty.c\n    quickfix.c regexp.c screen.c search.c sha256.c\n    spell.c spellfile.c syntax.c tag.c term.c\n    terminal.c ui.c undo.c userfunc.c version.c\n    window.c\n  )\n\ntarget_include_directories(basic_sources\n  PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/proto\n    ${CMAKE_CURRENT_LIST_DIR}\n    ${CMAKE_CURRENT_BINARY_DIR}\n  )\n\ntarget_compile_definitions(basic_sources\n  PRIVATE\n    \"HAVE_CONFIG_H\"\n  )\n\ntarget_link_libraries(vim\n  PUBLIC\n    basic_sources\n  )\n```", "```cpp\nadd_library(extra_sources \"\")\n\nif(ENABLE_NETBEANS)\n  target_sources(extra_sources\n    PRIVATE\n      netbeans.c\n    )\nendif()\n\nif(ENABLE_CHANNEL)\n  target_sources(extra_sources\n    PRIVATE\n      channel.c\n    )\nendif()\n\ntarget_include_directories(extra_sources\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}/proto\n    ${CMAKE_CURRENT_BINARY_DIR}\n  )\n\ntarget_compile_definitions(extra_sources\n  PRIVATE\n    \"HAVE_CONFIG_H\"\n  )\n\ntarget_link_libraries(vim\n  PUBLIC\n    extra_sources\n  )\n```", "```cpp\nif(ENABLE_TERMINAL)\n  add_subdirectory(libvterm)\n\n  target_link_libraries(vim\n    PUBLIC\n      libvterm\n    )\nendif()\n```", "```cpp\nadd_library(libvterm \"\")\n\ntarget_sources(libvterm\n  PRIVATE\n    src/encoding.c\n    src/keyboard.c\n    src/mouse.c\n    src/parser.c\n    src/pen.c\n    src/screen.c\n    src/state.c\n    src/unicode.c\n    src/vterm.c\n  )\n\ntarget_include_directories(libvterm\n  PUBLIC\n    ${CMAKE_CURRENT_LIST_DIR}/include\n  )\n\ntarget_compile_definitions(libvterm\n  PRIVATE\n    \"HAVE_CONFIG_H\"\n    \"INLINE=\"\n    \"VSNPRINTF=vim_vsnprintf\"\n    \"IS_COMBINING_FUNCTION=utf_iscomposing_uint\"\n    \"WCWIDTH_FUNCTION=utf_uint2cells\"\n  )\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n-- The C compiler identification is GNU 8.2.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Configuring done\nCMake Error at src/CMakeLists.txt:12 (add_library):\n  Cannot find source file:\n\n    auto/pathdef.c\n\n  Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm\n  .hpp .hxx .in .txx\n```", "```cpp\n# generate config.h, pathdef.c, and osdef.h\ninclude(autogenerate.cmake)\ngenerate_config_h()\ngenerate_pathdef_c()\ngenerate_osdef_h()\n\nadd_executable(vim\n  main.c\n  )\n\n# ...\n```", "```cpp\ninclude(CheckTypeSize)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFiles)\ninclude(CheckLibraryExists)\ninclude(CheckCSourceCompiles)\n\nfunction(generate_config_h)\n  # ... to be written\nendfunction()\n\nfunction(generate_pathdef_c)\n  # ... to be written\nendfunction()\n\nfunction(generate_osdef_h)\n  # ... to be written\nendfunction()\n```", "```cpp\n/* Define if we have EBCDIC code */\n#undef EBCDIC\n\n/* Define unless no X support found */\n#undef HAVE_X11\n\n/* Define when terminfo support found */\n#undef TERMINFO\n\n/* Define when termcap.h contains ospeed */\n#undef HAVE_OSPEED\n\n/* ... */\n```", "```cpp\n/* Define if we have EBCDIC code */\n/* #undef EBCDIC */\n\n/* Define unless no X support found */\n#define HAVE_X11 1\n\n/* Define when terminfo support found */\n#define TERMINFO 1\n\n/* Define when termcap.h contains ospeed */\n/* #undef HAVE_OSPEED */\n\n/* ... */\n```", "```cpp\nset(TERMINFO 1)\nset(UNIX 1)\n\n# this is hardcoded to keep the discussion in the book chapter\n# which describes the migration to CMake simpler\nset(TIME_WITH_SYS_TIME 1)\nset(RETSIGTYPE void)\nset(SIGRETURN return)\n\nfind_package(X11)\nset(HAVE_X11 ${X11_FOUND})\n```", "```cpp\ncheck_type_size(\"int\" VIM_SIZEOF_INT)\ncheck_type_size(\"long\" VIM_SIZEOF_LONG)\ncheck_type_size(\"time_t\" SIZEOF_TIME_T)\ncheck_type_size(\"off_t\" SIZEOF_OFF_T)\n```", "```cpp\nforeach(\n  _function IN ITEMS\n  fchdir fchown fchmod fsync getcwd getpseudotty\n  getpwent getpwnam getpwuid getrlimit gettimeofday getwd lstat\n  memset mkdtemp nanosleep opendir putenv qsort readlink select setenv\n  getpgid setpgid setsid sigaltstack sigstack sigset sigsetjmp sigaction\n  sigprocmask sigvec strcasecmp strerror strftime stricmp strncasecmp\n  strnicmp strpbrk strtol towlower towupper iswupper\n  usleep utime utimes mblen ftruncate\n  )\n\n  string(TOUPPER \"${_function}\" _function_uppercase)\n  check_function_exists(${_function} HAVE_${_function_uppercase})\nendforeach()\n```", "```cpp\ncheck_library_exists(tinfo tgetent \"\" HAVE_TGETENT)\n\nif(NOT HAVE_TGETENT)\n  message(FATAL_ERROR \"Could not find the tgetent() function. You need to install a terminal library; for example ncurses.\")\nendif()\n```", "```cpp\nforeach(\n  _header IN ITEMS\n  setjmp.h dirent.h\n  stdint.h stdlib.h string.h\n  sys/select.h sys/utsname.h termcap.h fcntl.h\n  sgtty.h sys/ioctl.h sys/time.h sys/types.h\n  termio.h iconv.h inttypes.h langinfo.h math.h\n  unistd.h stropts.h errno.h sys/resource.h\n  sys/systeminfo.h locale.h sys/stream.h termios.h\n  libc.h sys/statfs.h poll.h sys/poll.h pwd.h\n  utime.h sys/param.h libintl.h libgen.h\n  util/debug.h util/msg18n.h frame.h sys/acl.h\n  sys/access.h sys/sysinfo.h wchar.h wctype.h\n  )\n\n  string(TOUPPER \"${_header}\" _header_uppercase)\n  string(REPLACE \"/\" \"_\" _header_normalized \"${_header_uppercase}\")\n  string(REPLACE \".\" \"_\" _header_normalized \"${_header_normalized}\")\n  check_include_files(${_header} HAVE_${_header_normalized})\nendforeach()\n```", "```cpp\nstring(TOUPPER \"${FEATURES}\" _features_upper)\nset(FEAT_${_features_upper} 1)\n\nset(FEAT_NETBEANS_INTG ${ENABLE_NETBEANS})\nset(FEAT_JOB_CHANNEL ${ENABLE_CHANNEL})\nset(FEAT_TERMINAL ${ENABLE_TERMINAL})\n```", "```cpp\ncheck_c_source_compiles(\n  \"\n  #include <sys/types.h>\n  #include <sys/stat.h>\n  int\n  main ()\n  {\n          struct stat st;\n          int n;\n\n          stat(\\\"/\\\", &st);\n          n = (int)st.st_blksize;\n    ;\n    return 0;\n  }\n  \"\n  HAVE_ST_BLKSIZE\n  )\n```", "```cpp\nconfigure_file(\n  ${CMAKE_CURRENT_LIST_DIR}/config.h.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/auto/config.h\n  @ONLY\n  )\n```", "```cpp\n#include \"vim.h\"\n\nchar_u *default_vim_dir = (char_u *)\"@_default_vim_dir@\";\nchar_u *default_vimruntime_dir = (char_u *)\"@_default_vimruntime_dir@\";\nchar_u *all_cflags = (char_u *)\"@_all_cflags@\";\nchar_u *all_lflags = (char_u *)\"@_all_lflags@\";\nchar_u *compiled_user = (char_u *)\"@_compiled_user@\";\nchar_u *compiled_sys = (char_u *)\"@_compiled_sys@\";\n```", "```cpp\nfunction(generate_pathdef_c)\n  set(_default_vim_dir ${CMAKE_INSTALL_PREFIX})\n  set(_default_vimruntime_dir ${_default_vim_dir})\n\n  set(_all_cflags \"${CMAKE_C_COMPILER} ${CMAKE_C_FLAGS}\")\n  if(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set(_all_cflags \"${_all_cflags} ${CMAKE_C_FLAGS_RELEASE}\")\n  else()\n    set(_all_cflags \"${_all_cflags} ${CMAKE_C_FLAGS_DEBUG}\")\n  endif()\n\n  # it would require a bit more work and execute commands at build time\n  # to get the link line into the binary\n  set(_all_lflags \"undefined\")\n\n  if(WIN32)\n    set(_compiled_user $ENV{USERNAME})\n  else()\n    set(_compiled_user $ENV{USER})\n  endif()\n\n  cmake_host_system_information(RESULT _compiled_sys QUERY HOSTNAME)\n\n  configure_file(\n    ${CMAKE_CURRENT_LIST_DIR}/pathdef.c.in\n    ${CMAKE_CURRENT_BINARY_DIR}/auto/pathdef.c\n    @ONLY\n    )\nendfunction()\n```", "```cpp\nfunction(generate_osdef_h)\n  find_program(BASH_EXECUTABLE bash)\n\n  execute_process(\n    COMMAND\n      ${BASH_EXECUTABLE} osdef.sh ${CMAKE_CURRENT_BINARY_DIR}\n    WORKING_DIRECTORY\n      ${CMAKE_CURRENT_LIST_DIR}\n    )\nendfunction()\n```", "```cpp\nif [ $# -eq 0 ]\n  then\n    # there are no arguments\n    # assume the target directory is current directory\n    target_directory=$PWD\n  else\n    # target directory is provided as argument\n    target_directory=$1\nfi\n```", "```cpp\n$CC -I. -I$srcdir -I${target_directory} -E osdef0.c >osdef0.cc\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n\n...\nScanning dependencies of target vim\n[ 98%] Building C object src/CMakeFiles/vim.dir/main.c.o\n[100%] Linking C executable ../bin/vim\n../lib64/libbasic_sources.a(term.c.o): In function `set_shellsize.part.12':\nterm.c:(.text+0x2bd): undefined reference to `tputs'\n../lib64/libbasic_sources.a(term.c.o): In function `getlinecol':\nterm.c:(.text+0x902): undefined reference to `tgetent'\nterm.c:(.text+0x915): undefined reference to `tgetent'\nterm.c:(.text+0x935): undefined reference to `tgetnum'\nterm.c:(.text+0x948): undefined reference to `tgetnum'\n\n... many other undefined references ...\n```", "```cpp\n# find X11 and link to it\nfind_package(X11 REQUIRED)\nif(X11_FOUND)\n  target_link_libraries(vim\n    PUBLIC\n      ${X11_LIBRARIES}\n    )\nendif()\n\n# a couple of more system libraries that the code requires\nforeach(_library IN ITEMS Xt SM m tinfo acl gpm dl)\n  find_library(_${_library}_found ${_library} REQUIRED)\n  if(_${_library}_found)\n    target_link_libraries(vim\n      PUBLIC\n        ${_library}\n      )\n  endif()\nendforeach()\n```", "```cpp\n$ cmake --build .\n\n...\nScanning dependencies of target vim\n[ 98%] Building C object src/CMakeFiles/vim.dir/main.c.o\n[100%] Linking C executable ../bin/vim\n[100%] Built target vim\n```", "```cpp\nif(CMAKE_C_COMPILER_ID MATCHES GNU)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -O2\")\nendif()\n```", "```cpp\n# <- we will define flags right here\n\ninclude(autogenerate.cmake)\ngenerate_config_h()\ngenerate_pathdef_c()\ngenerate_osdef_h()\n```", "```cpp\nif(CMAKE_C_COMPILER_ID MATCHES GNU)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -U_FORTIFY_SOURCE \n-D_FORTIFY_SOURCE=1\")\n  set(CMAKE_C_FLAGS_RELEASE \"-O2\")\n  set(CMAKE_C_FLAGS_DEBUG \"-O0\")\nendif()\n```", "```cpp\nadd_subdirectory(testdir)\n```", "```cpp\n# enable the test target\nenable_testing()\n\n# process src/CMakeLists.txt in its own scope\nadd_subdirectory(src)\n```", "```cpp\nfunction(execute_test _vim_executable _working_dir _test_script)\n  # generates test.out\n  execute_process(\n    COMMAND ${_vim_executable} -f -u unix.vim -U NONE --noplugin --not-a-term -s dotest.in ${_test_script}.in\n    WORKING_DIRECTORY ${_working_dir}\n    )\n\n  # compares test*.ok and test.out\n  execute_process(\n    COMMAND ${CMAKE_COMMAND} -E compare_files ${_test_script}.ok test.out\n    WORKING_DIRECTORY ${_working_dir}\n    RESULT_VARIABLE files_differ\n    OUTPUT_QUIET\n    ERROR_QUIET\n    )\n\n  # removes leftovers\n  file(REMOVE ${_working_dir}/Xdotest)\n\n  # we let the test fail if the files differ\n  if(files_differ)\n    message(SEND_ERROR \"test ${_test_script} failed\")\n  endif()\nendfunction()\n\nexecute_test(${VIM_EXECUTABLE} ${WORKING_DIR} ${TEST_SCRIPT})\n```", "```cpp\nadd_test(\n  NAME\n    test1\n  COMMAND\n    ${CMAKE_COMMAND} -D VIM_EXECUTABLE=$<TARGET_FILE:vim>\n                     -D WORKING_DIR=${CMAKE_CURRENT_LIST_DIR}\n                     -D TEST_SCRIPT=test1\n                     -P ${CMAKE_CURRENT_LIST_DIR}/test.cmake\n  WORKING_DIRECTORY\n    ${PROJECT_BINARY_DIR}\n  )\n```", "```cpp\n$ ./configure --prefix=/some/install/path\n$ make\n$ make install\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -D CMAKE_INSTALL_PREFIX=/some/install/path ..\n$ cmake --build .\n$ cmake --build . --target install\n```", "```cpp\ninstall(\n  TARGETS\n    vim\n  RUNTIME DESTINATION\n    ${CMAKE_INSTALL_BINDIR}\n  )\n```", "```cpp\n.\n├── CMakeLists.txt\n└── src\n    ├── autogenerate.cmake\n    ├── CMakeLists.txt\n    ├── config.h.cmake.in\n    ├── libvterm\n    │   └── CMakeLists.txt\n    ├── pathdef.c.in\n    └── testdir\n        ├── CMakeLists.txt\n        └── test.cmake\n```"]