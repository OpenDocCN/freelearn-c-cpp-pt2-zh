- en: Setting up Your System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before diving into CMake and the recipes in this book, you will need to set
    your system up to successfully run all of the examples. In this section, we will
    discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to obtain the code for the recipes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to install all of the tools required to run the code samples on GNU/Linux,
    macOS, and Windows
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How the automated testing for the repository works
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to report problems with the recipes and suggest improvements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have strived to make our discussions of the topics in this book as accessible
    to novices as possible. However, this book does not start from absolute scratch.
    We assume that you have basic knowledge of the native tools for building software
    that are available on your platform of choice. It is also helpful (but not required)
    to have basic experience with version control using Git, to interact with the
    repository holding the recipe sources.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The source code for the recipes in this book is available on GitHub, at [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook).
    The code is licensed under the standard open source MIT license: this is a permissive
    software license, and you can reuse and remix the code in whatever way you see
    fit, as long as the original copyright and license notice are included in any
    copies of the software/source. The full text of the license is available at [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test the recipes by yourself, you will need a working installation
    of Git, obtained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: All major GNU/Linux distributions offer Git prepackaged, *via* their package
    managers. If that is not your case, a binary distribution can be downloaded from
    the Git project website at [https://git-scm.com](https://git-scm.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On macOS, it is possible to use Homebrew or MacPorts to install Git.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, you can download the Git executable from the Git project website
    at [https://git-scm.com](https://git-scm.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, you can access the examples with the GitHub desktop client at [https://desktop.github.com](https://desktop.github.com).
  prefs: []
  type: TYPE_NORMAL
- en: Yet another alternative is to download and extract the ZIP file from [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Git installed, you can clone the repository to your local machine,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will create a folder named `cmake-cookbook`. The book and the repository
    are organized in chapters and recipes. The numbering of chapters and the order
    of recipes in the repository reflect the order in the text. Each recipe is further
    organized into example folders. Some of the recipes have more than one example,
    usually when similar CMake concepts are illustrated in different programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes are tested on GNU/Linux, macOS, and Windows, using state-of-the-art
    continuous integration services. We will discuss the testing set up shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have tagged the precise versions that correspond to the examples printed
    in this book with the tag `v1.0`. For maximum overlap with the book text, you
    can fetch this particular version as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We expect to receive bug fixes and the GitHub repository to evolve. To get the
    latest updates, you may prefer to follow the `master` branch of the repository,
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Docker image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will likely find that the easiest approach to testing the book's recipes
    in a software environment (which contains all of the dependencies preinstalled)
    is to use a Docker image that we have set up, based on Ubuntu 18.04. You can install
    Docker on your favorite operating system, following the official documentation
    at [https://docs.docker.com](https://docs.docker.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Docker is installed, you can run our image and test the recipes with the
    full software environment in place, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing prerequisite software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An alternative to running the book recipes in a container is to install the
    dependencies directly on the host operating system. For this, we have assembled
    a minimal toolstack that can be used as a basic starting point for all of our
    recipes. You will have to install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CMake
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Language-specific tools, that is, the compilers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build automation tools
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also detail how to install the additional dependencies required by some
    of the recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting CMake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CMake 3.5 is the minimum required version of CMake for this book. Only a few,
    specific recipes and examples that demonstrate useful features that were introduced
    after version 3.5 will require a more recent version of CMake. The introduction
    to every recipe features an info box, pointing out where the code is available,
    which examples are given, and the minimum version of CMake required. The info
    boxes will look like the following box:'
  prefs: []
  type: TYPE_NORMAL
- en: The code for this recipe is available at [https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10](https://github.com/dev-cafe/cmake-cookbook/tree/v1.0/chapter-03/recipe-10),
    and includes a C example. The recipe is valid with CMake version 3.5 (and higher)
    and has been tested on GNU/Linux, macOS, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Some, if not most, of the recipes will still be valid with older versions of
    CMake. However, we have made no attempts to test this assumption, since we consider
    CMake 3.5 to be the default on most systems and distributions. We also consider
    upgrading to later versions of CMake to be a straightforward step.
  prefs: []
  type: TYPE_NORMAL
- en: CMake can be installed in a number of different ways. Downloading and extracting
    the binary distribution maintained by Kitware will work across all platforms.
    The download page is at [https://cmake.org/download/](https://cmake.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Most GNU/Linux distributions have CMake available in their package managers.
    However, on some distributions, the packaged version can be rather old, so downloading
    the binary maintained by Kitware is still the preferred option. The following
    commands will download and install CMake 3.5.2 under `$HOME/Deps/cmake` (adjust
    this path to your preference), from the version packaged by CMake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Homebrew for macOS reliably ships the latest version of CMake:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: On Windows, you can use Visual Studio 2017, which provides CMake support. The
    installation of Visual Studio 2017 is documented in [Chapter 13](ea785243-b9e8-4993-ac0d-1038f181b496.xhtml),
    *Alternative Generators and Cross-compilation*, Recipe 1, *Building a CMake project
    using Visual Studio 2017*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can download the MSYS2 installer from [https://www.msys2.org](https://www.msys2.org) ,
    follow the instructions given therein to update the list of packages, and then
    install CMake using the package manager, `pacman`. The following code assumes
    that we are building the 64-bit version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For the 32-bit version, use the following (though we will only refer to 64-bit
    versions in future, for the sake of brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Another nice feature of MSYS2 is that it provides a terminal on Windows that
    feels and behaves like a terminal on a Unix-like operating system, providing a
    useful development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need compilers for C++, C, and Fortran. These should be fairly recent,
    as we require support for recent language standards in most of the recipes. CMake
    offers very good support for many compilers, from both commercial and non-commercial
    vendors. To keep the recipes consistently cross-platform and as operating system
    independent as possible, we have worked with open source compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On GNU/Linux, the GNU Compiler Collection (GCC) is the obvious choice. It is
    free and available for all distributions. For example, on Ubuntu, you can install
    the compilers as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Clang, in the LLVM family, is also a good choice for C++ and C:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, the LLVM compilers shipped with XCode will work for C++ and C. We
    have used the Fortran compiler from GCC in our macOS testing. This has to be installed
    separately, using the package manager. For example, the command for Homebrew is
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you can use Visual Studio for the C++ and C recipes. Alternatively,
    you can use the MSYS2 installer and install the entire toolchain, including a
    C++, C, and Fortran compiler, with the following single command in an MSYS2 environment
    (for the 64-bit version):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Build-automation tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These build-automation tools will provide the infrastructure for building and
    linking the projects presented in the recipes. What you will end up installing
    and using strongly depends on your operating system and your taste:'
  prefs: []
  type: TYPE_NORMAL
- en: On GNU/Linux, GNU Make will most likely be installed automatically, when installing
    the compilers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On macOS, XCode will provide GNU Make.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, Visual Studio will provide you with the complete infrastructure.
    In the MSYS2 environment, GNU Make is installed as a part of the `mingw64/mingw-w64-x86_64-toolchain`
    package, which we installed previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For maximum portability, we have made the recipes as agnostic about these system-dependent
    details as possible. A clear advantage of this approach is that configuring, building,
    and linking are native to each platform and each set of compilers.
  prefs: []
  type: TYPE_NORMAL
- en: The Ninja program is a different build-automation tool that works on GNU/Linux,
    macOS, and Windows. Ninja is a new build tool, with a focus on speed, especially
    for incremental rebuilds. Prepackaged binaries for GNU/Linux, macOS, and Windows
    can be found on the project's GitHub repository at [https://github.com/ninja-build/ninja/releases](https://github.com/ninja-build/ninja/releases).
  prefs: []
  type: TYPE_NORMAL
- en: Using CMake and Ninja with Fortran projects requires some care. CMake 3.7.2
    or later is required, along with the version of Ninja maintained by Kitware, available
    at [https://github.com/Kitware/ninja/releases](https://github.com/Kitware/ninja/releases).
  prefs: []
  type: TYPE_NORMAL
- en: 'On GNU/Linux, you can install Ninja with the following series of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, using the MSYS2 environment (assuming the 64-bit version), executing
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We recommend reading the essay at [http://www.aosabook.org/en/posa/ninja.html](http://www.aosabook.org/en/posa/ninja.html)
    for an enlightening discussion of Ninja's history and design choices.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is about CMake, but some of the recipes, along with the whole infrastructure
    powering testing, need Python. Thus, first and foremost, you will need a working
    installation of Python: the interpreter, header files, and libraries. The end
    of life for Python 2.7 was announced for 2020, and we will thus use Python 3.5.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ubuntu 14.04 LTS (this is the environment used by Travis CI which we will
    discuss later on), Python 3.5 can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, using the MSYS2 environment, the Python environment can be installed
    as follows (assuming the 64-bit version):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Specific Python modules are also required, in order to run the testing machinery
    that we have put in place. These can be installed system-wide by using your favorite
    package manager, or in an isolated environment. The latter approach is highly
    recommended, as it offers the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: You can install packages and clean up installations without affecting the system
    environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packages can be installed without administrator privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You lower the risk of version and dependency clashes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You gain much better control over package dependencies, for reproducibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have prepared a `Pipfile` for this purpose. In combination with its `Pipfile.lock`,
    you can use Pipenv ([http://pipenv.readthedocs.io](http://pipenv.readthedocs.io))
    to generate an isolated environment, with all packages installed. To create this
    environment for the recipe example repository, run the following commands in the
    top-level directory of the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The **`pipenv shell`** command will drop you into a command-line environment
    with the specific version of Python and all of the packages available. Executing
    `exit` will bring you back to a clean environment. You can also use `pipenv run`
    to directly execute a command within the isolated environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the `requirements.txt` file in the repository can be used, in
    combination with Virtualenv ([http://docs.python-guide.org/en/latest/dev/virtualenvs/](http://docs.python-guide.org/en/latest/dev/virtualenvs/))
    and `pip`, to achieve the same effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The virtual environment can be exited by using the `deactivate` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yet another alternative is to use Conda environments. To do so, we suggest
    installing Miniconda. The following instructions will install the latest Miniconda
    to the directory `$HOME/Deps/conda`, for GNU/Linux (download from [https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh))
    or macOS (download from [https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, you can download the latest Miniconda from [https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe](https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe).
    The package can be installed using PowerShell, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Conda is installed, the Python modules can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Executing `conda deactivate` will drop you outside of the isolated environment.
  prefs: []
  type: TYPE_NORMAL
- en: Additional software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some recipes will require additional software, which will be covered in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: BLAS and LAPACK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most Linux distributions provide packages for BLAS and LAPACK. For example,
    on Ubuntu 14.04 LTS, you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: On macOS, the Accelerate libraries, shipped with XCode, are enough for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, using the MSYS2 environment, these libraries can be installed as
    follows (assuming the 64-bit version):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can download the reference implementation of BLAS and LAPACK
    from GitHub ([https://github.com/Reference-LAPACK/lapack](https://github.com/Reference-LAPACK/lapack))
    and compile the libraries from sources. Commercial vendors might offer packages
    for their own implementations of the BLAS and LAPACK APIs, available as installers
    for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Message passing interface (MPI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many commercial and non-commercial implementations of MPI. For our
    introductory purposes, it is enough to install any of the freely available non-commercial
    implementations. On Ubuntu 14.04 LTS, we recommend OpenMPI. It can be installed
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS, Homebrew distributes MPICH:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to compile OpenMPI from the sources publicly available at
    [https://www.open-mpi.org/software/](https://www.open-mpi.org/software/).
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, the Microsoft MPI implementation can be installed *via *[https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx).
  prefs: []
  type: TYPE_NORMAL
- en: The Eigen linear algebra template library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some recipes will need the Eigen linear algebra template library, version 3.3
    or later. If your package manager does not provide Eigen, you can install it from
    the online source archive ([http://eigen.tuxfamily.org](http://eigen.tuxfamily.org)).
    For example, on GNU/Linux and macOS, you can install Eigen to the directory `$HOME/Deps/eigen`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The Boost libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Boost packages are available for every operating system; most Linux distributions
    have packages available through their package managers. On Ubuntu 14.04 LTS, for
    instance, the Boost Filesystem, Boost Python, and Boost Test libraries can be
    installed with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For macOS, both MacPorts and Homebrew provide packages for recent versions
    of Boost. Our testing setup on macOS installs Boost as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Prebuilt binary distributions for Windows are also available for download from
    the Boost website at [http://www.boost.org](http://www.boost.org). Alternatively,
    you can download the sources from [https://www.boost.org](https://www.boost.org)
    and compile the libraries yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-compilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Debian/Ubuntu-like systems, cross-compilers can be installed with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, using Brew, the cross-compilers can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Other package managers offer corresponding packages.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to using packaged cross-compilers is to build them from sources,
    using the M cross environment ([https://mxe.cc](https://mxe.cc)).
  prefs: []
  type: TYPE_NORMAL
- en: ZeroMQ, pkg-config, UUID, and Doxygen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Ubuntu 14.04 LTS, these packages can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'On macOS, we recommend installing with Brew:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `pkg-config` program and UUID library are only available on Unix-like systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, using the MSYS2 environment, these dependencies can be installed
    as follows (assuming the 64-bit version):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Conda build and deployment tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes exploring packaging with Conda will need Miniconda and the Conda
    build and deployment tools installed on the system. The instructions for the installation
    of Miniconda were given previously. To install Conda build and deployment tools
    on GNU/Linux and macOS, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'These tools can be installed on Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Testing the recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recipes are tested on state-of-the-art continuous integration (CI) services:
    Travis ([https://travis-ci.org](https://travis-ci.org)) for GNU/Linux and macOS,
    Appveyor ([https://www.appveyor.com](https://www.appveyor.com)) for Windows, and
    CircleCI ([https://circleci.com](https://circleci.com)) for additional GNU/Linux
    testing with commercial compilers. The configuration files for the CI services
    can be found in the repository ([https://github.com/dev-cafe/cmake-cookbook/](https://github.com/dev-cafe/cmake-cookbook/)):
    `.travis.yml` for Travis, `.appveyor.yml` for Appveyor, and `.circleci/config.yml`
    for CircleCI. Additional installation scripts for Travis and Appveyor can be found
    in the folder `testing/dependencies`.'
  prefs: []
  type: TYPE_NORMAL
- en: We test the recipes with CMake 3.5.2 and CMake 3.12.1 on the Travis GNU/Linux
    infrastructure. CMake 3.12.1 is used on the Travis macOS infrastructure. On Appveyor,
    testing uses CMake 3.11.3\. On Circle, CMake 3.12.1 is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The testing machinery is a set of Python scripts that are also contained in
    the `testing` folder. The script `collect_tests.py` will run tests and report
    their statuses. Recipes can be tested in isolation, or in batches; `collect_tests.py`
    accepts a regular expression as command-line input, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will run tests for Recipes 1, 2, and 5, in Chapters 1 and 7\.
    A sample of the output looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ab8549e-aed8-4858-be83-758264c930bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get more verbose output, set `VERBOSE_OUTPUT=ON`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Reporting problems and suggesting improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please report issues at [https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues).
  prefs: []
  type: TYPE_NORMAL
- en: To contribute changes,we recommend forking the repository [https://github.com/dev-cafe/cmake-cookbook](https://github.com/dev-cafe/cmake-cookbook) and
    submitting changes using pull requests, following [https://help.github.com/articles/creating-a-pull-request-from-a-fork/](https://help.github.com/articles/creating-a-pull-request-from-a-fork/)[.](https://github.com/dev-cafe/cmake-cookbook)
  prefs: []
  type: TYPE_NORMAL
- en: For non-trivial changes, we recommend to first describe and discuss the proposed
    change by opening an issue on [https://github.com/dev-cafe/cmake-cookbook/issues](https://github.com/dev-cafe/cmake-cookbook/issues) before
    sending a pull request.
  prefs: []
  type: TYPE_NORMAL
