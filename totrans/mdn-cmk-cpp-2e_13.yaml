- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generating Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High-quality code is not only well written, working, and tested—it is also thoroughly
    documented. Documentation allows us to share information that might otherwise
    get lost, draw a bigger picture, give context, reveal intent, and—finally—educate
    both external users and maintainers.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember the last time you joined a new project and got lost for hours
    in a maze of directories and files? This can be avoided. Truly excellent documentation
    leads a complete newcomer to the exact line of code they’re looking for in seconds.
    Sadly, the issue of missing documentation is often overlooked. No wonder—it takes
    considerable skill, and many of us aren’t very good at it. Furthermore, documentation
    and code can quickly become outdated. Unless a strict update and review process
    is implemented, it’s easy to forget that documentation needs attention too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some teams (in the interest of time or because they are encouraged to do so
    by managers) follow a practice of writing *self-documenting code*. By choosing
    meaningful, readable identifiers for filenames, functions, variables, and so on,
    they hope to avoid the chore of documenting. Even the best function signatures
    don’t ensure that all necessary information is conveyed—for example, `int removeDuplicates();`
    is descriptive, but it doesn’t reveal what is returned. It could be the number
    of duplicates found, the number of items remaining, or something else—it’s unclear.
    While the habit of good naming is absolutely correct, it cannot replace the act
    of conscientious documentation. Remember: there’s no such thing as a free lunch.'
  prefs: []
  type: TYPE_NORMAL
- en: To make things easier, professionals use automatic documentation generators
    that analyze code and comments in source files to produce comprehensive documentation
    in various formats. Adding such generators to a CMake project is very simple—let’s
    see how!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Doxygen to your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating documentation with a modern look
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing output with custom HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files that are present in this chapter on GitHub at [https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13](https://github.com/PacktPublishing/Modern-CMake-for-Cpp-2E/tree/main/examples/ch13).
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the examples provided in this book, always use the recommended commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Be sure to replace the placeholders `<build tree>` and `<source tree>` with
    appropriate paths. As a reminder: **build tree** is the path to the target/output
    directory, and **source tree** is the path at which your source code is located.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Doxygen to your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most established and popular tools for generating documentation
    from C++ sources is Doxygen. And when I say “established,” I mean it: the first
    version was released by Dimitri van Heesch in October 1997\. Since then, it has
    grown immensely and is actively supported by almost 250 contributors to its repository
    ([https://github.com/doxygen/doxygen](https://github.com/doxygen/doxygen)).'
  prefs: []
  type: TYPE_NORMAL
- en: You might be concerned about the challenge of incorporating Doxygen into larger
    projects that haven’t used documentation generation from the start. Indeed, the
    task of annotating every function can appear overwhelming. However, I encourage
    you to start small. Focus on documenting elements you’ve recently worked on in
    your latest commits. Remember, even partially complete documentation is a step
    forward compared to none at all, and it gradually helps in building a more comprehensive
    understanding of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doxygen can produce documentation in the following formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HyperText Markup Language** (**HTML**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rich Text Format** (**RTF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portable Document Format** (**PDF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lamport TeX** (**LaTeX**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostScript** (**PS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unix manual (man pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Compiled HTML** Help (.CHM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you annotate your code with comments providing additional information in
    the format specified by Doxygen, it will parse them to enrich the output file.
    Moreover, the code structure will be analyzed to produce helpful charts and diagrams.
    The latter is optional, as it requires the external Graphviz tool ([https://graphviz.org/](https://graphviz.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The developer should first consider the following question: *Will the users
    of the project only receive the documentation, or will they generate it themselves
    (perhaps when building from source)*? The first option implies that documentation
    is distributed with the binaries, available online, or (less elegantly) checked
    in with the source code into the repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This consideration matters because if you want users to generate documentation
    during the build, they will need the dependencies present in their system. This
    isn’t a significant problem since Doxygen and Graphviz are available through most
    package managers, and all that’s required is a simple command, such as this one
    for Debian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Binaries are also available for Windows (check the project’s website in the
    *Further reading* section).
  prefs: []
  type: TYPE_NORMAL
- en: However, some users might not be comfortable installing this tooling. We must
    decide whether to generate documentation for users or have them add the dependencies
    if needed. The project could automatically add them for users as well, as described
    in *Chapter 9*, *Managing Dependencies in CMake*. Note that Doxygen is built with
    CMake, so you already know how to compile it from sources if needed.
  prefs: []
  type: TYPE_NORMAL
- en: When Doxygen and Graphviz are installed in the system, we can add the generation
    to our project. Contrary to what some online sources suggest, this isn’t as difficult
    or involved as it might seem. We don’t need to create external configuration files,
    provide paths to the Doxygen executable, or add custom targets. Since CMake 3.9,
    we can use the `doxygen_add_docs()` function from the `FindDoxygen` find-module,
    which sets up the documentation target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signature looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first argument specifies the target name, which we need to build explicitly
    with the `-t` argument to `cmake` (after generating a build tree), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Or, we can ensure that the documentation is always built by adding the `ALL`
    argument, although this is usually not necessary. The `WORKING_DIRECTORY` option
    is straightforward; it specifies the directory where the command should be run.
    The value set by the `COMMENT` option is displayed before the documentation generation
    starts, providing useful information or instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll follow the practice from previous chapters and create a utility module
    with a helper function (so it can be reused in other projects), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/01-doxygen/cmake/Doxygen.cmake**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The function accepts two arguments—`input` and `output` directories—and creates
    a custom `doxygen` target. Here’s what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we use CMake’s built-in Doxygen find-module to determine whether Doxygen
    is available in the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn’t available, we create a dummy `doxygen` target that informs the user
    and runs a `false` command, which (on Unix-like systems) returns `1`, causing
    the build to fail. We terminate the function at that point with `return()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Doxygen is available, we configure it to generate HTML output in the provided
    `output` directory. Doxygen is extremely configurable (find out more in the official
    documentation). To set any option, simply follow the example by calling `set()`
    and prepend its name with `DOXYGEN_`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the actual `doxygen` target. All the `DOXYGEN_` variables will be forwarded
    to Doxygen’s configuration file, and documentation will be generated from the
    provided `input` directory in the source tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your documentation is to be generated by users, *step 2* should probably
    involve installing Doxygen instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this function, we can incorporate it into the main listfile of our project
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/01-doxygen/CMakeLists.txt**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Not difficult at all! Building the `doxygen` target generates HTML documentation
    that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19844_13_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.1: Class reference generated with Doxygen'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add important details in **Member Function Documentation**, we can precede
    the C++ method declaration with an appropriate comment in the header file, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/01-doxygen/src/calc.h (fragment)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This format is known as Javadoc. It is important to begin the comment block
    with double asterisks: `/**`. More information can be found in the description
    of Doxygen’s docblocks (see the link in the *Further reading* section). The `Multiply`
    function with such annotations will be rendered as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19844_13_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: Annotations of the parameters and result'
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, if Graphviz is installed, Doxygen will detect it and
    generate dependency diagrams, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19844_13_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.3: Inheritance and collaboration diagrams generated by Doxygen'
  prefs: []
  type: TYPE_NORMAL
- en: By generating documentation directly from the source code, we establish a process
    that enables quick updates in tandem with any code changes during the development
    cycle. Also, any overlooked updates in the comments are likely to be noticed during
    code review.
  prefs: []
  type: TYPE_NORMAL
- en: Many developers express concerns that the design provided by Doxygen appears
    dated, making them hesitant to showcase the generated documentation to their clients.
    However, there is a simple solution to this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Generating documentation with a modern look
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having your project documented with a clean, fresh design is important. After
    all, if we put all this work into writing high-quality documentation for our cutting-edge
    project, it is imperative that the user perceives it as such. Although Doxygen
    is feature-rich, it isn’t renowned for adhering to the latest visual trends. However,
    revamping its appearance doesn’t require substantial effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, a developer named `jothepro` created a theme called `doxygen-awesome-css`,
    which offers a modern, customizable design. This theme is presented in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19844_13_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: HTML documentation in doxygen-awesome-css theme'
  prefs: []
  type: TYPE_NORMAL
- en: The theme doesn’t require any additional dependencies and can be easily fetched
    from its GitHub page at [https://github.com/jothepro/doxygen-awesome-css](https://github.com/jothepro/doxygen-awesome-css).
  prefs: []
  type: TYPE_NORMAL
- en: While some online sources recommend using a combination of applications, like
    transforming Doxygen’s output with Sphinx via Breathe and Exhale extensions, this
    method can be complex and dependency-heavy (requiring Python, for example). A
    simpler approach is usually more practical, particularly for teams where not all
    members are deeply familiar with CMake.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can efficiently implement this theme with an automated process. Let’s see
    how we can extend our `Doxygen.cmake` file to use it by adding a new macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We already know all of these commands from previous chapters of the book, but
    let’s reiterate what happens for perfect clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching `doxygen-awesome-css` from Git using the `FetchContent` module
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring extra options for Doxygen (these are specifically recommended by
    the theme’s `README` file)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copying the theme’s `css` file to Doxygen’s output directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can imagine, it’s best to call this macro in the `Doxygen` function
    right before `doxygen_add_docs()`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Remember, all variables in macros are set in the scope of the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: We can now enjoy a modern style in our generated HTML documentation and share
    it proudly with the world. However, our theme offers some JavaScript modules to
    enhance the experience. How do we include them?
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing output with custom HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Doxygen Awesome offers a few additional features that can be enabled by including
    a few JavaScript snippets in the documentation header, within the HTML `<head>`
    tags. They can be quite useful, as they allow switching between light and dark
    mode, adding a **Copy** button for code snippets, paragraph-header permalinks,
    and an interactive table of contents.
  prefs: []
  type: TYPE_NORMAL
- en: However, implementing these features requires copying additional code to the
    output directory and including it in the generated HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the JavaScript code to be included just before the `</head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/cmake/extra_headers**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this code will first include a few JavaScript files and then
    initialize different extensions. Unfortunately, this code cannot be simply added
    to a variable somewhere. Instead, we’ll need to override the default header with
    a custom file. Such an override can be done by providing a path to this file in
    the Doxygen’s `HTML_HEADER` configuration variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a custom header without hardcoding the entire content, you can use
    Doxygen’s command-line tool to generate a default header file and edit it before
    generating the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Although we won’t be using or changing the `footer.html` or `style.css`, they
    are required arguments, so we need to create them anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to automatically prepend the `</head>` tag with the contents
    of the `ch13/cmake/extra_headers` file to include the required JavaScript. This
    can be done with the Unix command-line tool `sed`, which will edit the `header.html`
    file in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to codify those steps in CMake language. Here’s the macro that
    achieves that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code looks complex, but after a close inspection, you’ll find it’s actually
    quite straightforward. Here’s what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: Copies the four JavaScript files to the output directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executes the `doxygen` command to generate the default HTML files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Executes the `sed` command to inject the required JavaScript into the header
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Overrides the default header with the custom version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To complete the integration, call this macro right after enabling the basic
    stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ch13/02-doxygen-nice/cmake/Doxygen.cmake (fragment)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this example, along with practical examples, is available
    in the online repository for the book. As always, I recommend reviewing and exploring
    these examples in a practical environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Other documentation generation utilities**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are dozens of other tools that are not covered in this book, as we’re
    focusing on projects supported by CMake. Nevertheless, some of them may be more
    appropriate for your use case. If you’re feeling adventurous, visit the websites
    of two projects I found interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adobe’s Hyde ([https://github.com/adobe/hyde](https://github.com/adobe/hyde)):
    Aimed at the Clang compiler, Hyde produces Markdown files that can be consumed
    by tools such as Jekyll ([https://jekyllrb.com/](https://jekyllrb.com/)), a static
    page generator supported by GitHub'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Standardese ([https://github.com/standardese/standardese](https://github.com/standardese/standardese)):
    This uses libclang to compile your code and provides output in HTML, Markdown,
    LaTex, and man pages. It aims (quite boldly) to be the next Doxygen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the practicalities of adding Doxygen, a powerful
    documentation generation tool, to your CMake project and enhancing its appeal.
    This task, though seemingly daunting, is quite manageable and significantly enhances
    the flow and clarity of information within your solution. As you’ll find, the
    time invested in adding and maintaining documentation is a worthwhile effort,
    especially when you or your teammates grapple with understanding complex relationships
    in the application.
  prefs: []
  type: TYPE_NORMAL
- en: After exploring how to use CMake’s built-in Doxygen support to generate documentation
    in practice, we took a slight turn, to ensure not only the readability of the
    documentation but also its legibility.
  prefs: []
  type: TYPE_NORMAL
- en: Since dated design can be difficult on the eye, we explored alternative looks
    of the produced HTML. This was done using the Doxygen Awesome extension. To enable
    enhancements it comes with, we customized the standard header by adding the necessary
    javascript.
  prefs: []
  type: TYPE_NORMAL
- en: By generating documentation, you ensure its proximity to the actual code, making
    it easier to maintain written explanations in sync with the logic, especially
    if they’re both in the same file. Also, as a programmer, you’re likely juggling
    numerous tasks and details. Documentation acts as a memory aid, helping you retain
    and recall project intricacies. Keep in mind that even “the shortest pencil is
    longer than the longest memory.” Do yourself a favor—write long things down, and
    prosper.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up, this chapter emphasizes the value of Doxygen in your project management
    toolkit, aiding both understanding and communication within your team.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I’ll take you through automating packaging and the installation
    of projects with CMake, further enhancing your project management skills.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Official website of Doxygen: [https://www.doxygen.nl/](https://www.doxygen.nl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FindDoxygen` find-module documentation: [https://cmake.org/cmake/help/latest/module/FindDoxygen.html](https://cmake.org/cmake/help/latest/module/FindDoxygen.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Doxygen’s docblocks: [https://www.doxygen.nl/manual/docblocks.html#specialblock](https://www.doxygen.nl/manual/docblocks.html#specialblock)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://discord.com/invite/vXN53A7ZcA](https://discord.com/invite/vXN53A7ZcA)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code94081075213645359.png)'
  prefs: []
  type: TYPE_IMG
