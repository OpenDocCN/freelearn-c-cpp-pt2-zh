["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\nadd_library(<target> OBJECT <sources>)\n```", "```cpp\nadd_library(... $<TARGET_OBJECTS:objlib> ...)\nadd_executable(... $<TARGET_OBJECTS:objlib> ...)\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Calc VERSION 1.0.0 LANGUAGES CXX)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\ninclude(NoInSourceBuilds)\nadd_subdirectory(src bin)\nadd_subdirectory(test)\ninclude(Install)\n```", "```cpp\nif(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)\n  message(FATAL_ERROR\n    \"\\n\"\n    \"In-source builds are not allowed.\\n\"\n    \"Instead, provide a path to build tree like so:\\n\"\n    \"cmake -B <destination>\\n\"\n    \"\\n\"\n    \"To remove files you accidentally created execute:\\n\"\n    \"rm -rf CMakeFiles CMakeCache.txt\\n\"\n  )\nendif()\n```", "```cpp\nadd_subdirectory(calc)\nadd_subdirectory(calc_console)\n```", "```cpp\nadd_library(calc_obj OBJECT calc.cpp)\ntarget_include_directories(calc_obj INTERFACE\n  \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n  \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n)\nset_target_properties(calc_obj PROPERTIES\n    PUBLIC_HEADER src/calc/include/calc/calc.h\n    POSITION_INDEPENDENT_CODE 1\n)\nadd_library(calc_shared SHARED)\ntarget_link_libraries(calc_shared calc_obj)\nadd_library(calc_static STATIC)\ntarget_link_libraries(calc_static calc_obj)\n# ... testing and program analysis modules\n# ... documentation generation\n```", "```cpp\n#pragma once\nnamespace Calc {\nint Sum(int a, int b);\nint Multiply(int a, int b);\n}  // namespace Calc\n```", "```cpp\nnamespace Calc {\nint Sum(int a, int b) {\n  return a + b;\n}\nint Multiply(int a, int b) {\n  return a * b;\n}\n}  // namespace Calc\n```", "```cpp\ninclude(GetFTXUI)\nadd_library(calc_console_static STATIC tui.cpp)\ntarget_include_directories(calc_console_static PUBLIC\ninclude)\ntarget_precompile_headers(calc_console_static PUBLIC\n<string>)\ntarget_link_libraries(calc_console_static PUBLIC\ncalc_shared\n  ftxui::screen ftxui::dom ftxui::component)\ninclude(BuildInfo)\nBuildInfo(calc_console_static)\n# … testing and program analysis modules\n# ... documentation generation\nadd_executable(calc_console bootstrap.cpp)\ntarget_link_libraries(calc_console calc_console_static)\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n FTXTUI\n GIT_REPOSITORY https://github.com/ArthurSonzogni/FTXUI.git\n GIT_TAG        v0.11\n)\noption(FTXUI_ENABLE_INSTALL \"\" OFF)\noption(FTXUI_BUILD_EXAMPLES \"\" OFF)\noption(FTXUI_BUILD_DOCS \"\" OFF)\nFetchContent_MakeAvailable(FTXTUI) \n```", "```cpp\nstruct BuildInfo {\n  static inline const std::string CommitSHA =\n    \"@COMMIT_SHA@\";\n  static inline const std::string Timestamp =\n    \"@TIMESTAMP@\";\n  static inline const\n  std::string Version = \"@PROJECT_VERSION@\";\n};\n```", "```cpp\nset(BUILDINFO_TEMPLATE_DIR ${CMAKE_CURRENT_LIST_DIR})\nset(DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo\")\nstring(TIMESTAMP TIMESTAMP)\nfind_program(GIT_PATH git REQUIRED)\nexecute_process(COMMAND\n  ${GIT_PATH} log --pretty=format:'%h' -n 1\n  OUTPUT_VARIABLE COMMIT_SHA)\nconfigure_file(\n  \"${BUILDINFO_TEMPLATE_DIR}/buildinfo.h.in\"\n  \"${DESTINATION}/buildinfo.h\" @ONLY\n)\nfunction(BuildInfo target)\n  target_include_directories(${target} PRIVATE\n    ${DESTINATION})\nendfunction()\n```", "```cpp\n#include \"tui.h\"\n#include <ftxui/dom/elements.hpp>\n#include \"buildinfo.h\"\n#include \"calc/calc.h\"\nusing namespace ftxui;\nusing namespace std;\nstring a{\"12\"}, b{\"90\"};\nauto input_a = Input(&a, \"\");\nauto input_b = Input(&b, \"\");\nauto component = Container::Vertical({input_a, input_b});\nComponent getTui() {\n  return Renderer(component, [&] {\n    auto sum = Calc::Sum(stoi(a), stoi(b));\n    return vbox({\n      text(\"CalcConsole \" + BuildInfo::Version),\n      text(\"Built: \" + BuildInfo::Timestamp),\n      text(\"SHA: \" + BuildInfo::CommitSHA),\n       separator(),\n       input_a->Render(),\n       input_b->Render(),\n       separator(),\n       text(\"Sum: \" + to_string(sum)),\n   }) |\n   border;\n });\n}\n```", "```cpp\n#include <ftxui/component/component.hpp>\nftxui::Component getTui();\n```", "```cpp\n#include <ftxui/component/screen_interactive.hpp>\n#include \"tui.h\"\nint main(int argc, char** argv) {\n  ftxui::ScreenInteractive::FitComponent().Loop(getTui());\n}\n```", "```cpp\ninclude(Testing)\nadd_subdirectory(calc)\nadd_subdirectory(calc_console)\n```", "```cpp\nenable_testing()\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  GIT_REPOSITORY https://github.com/google/googletest.git\n  GIT_TAG release-1.11.0\n)\n# For Windows: Prevent overriding the parent project's\n# compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\noption(INSTALL_GMOCK \"Install GMock\" OFF)\noption(INSTALL_GTEST \"Install GTest\" OFF)\nFetchContent_MakeAvailable(googletest)\n...\n```", "```cpp\n...\ninclude(GoogleTest)\ninclude(Coverage)\ninclude(Memcheck)\nmacro(AddTests target)\n  target_link_libraries(${target} PRIVATE gtest_main gmock)\n  gtest_discover_tests(${target})\n  AddCoverage(${target})\n  AddMemcheck(${target})\nendmacro()\n```", "```cpp\nfunction(EnableCoverage target)\n  if (CMAKE_BUILD_TYPE STREQUAL Debug)\n    target_compile_options(${target} PRIVATE --coverage \n      -fno-inline)\n    target_link_options(${target} PUBLIC --coverage)\n  endif()\nendfunction()\nfunction(CleanCoverage target)\n  add_custom_command(TARGET ${target} PRE_BUILD COMMAND\n    find ${CMAKE_BINARY_DIR} -type f\n    -name '*.gcda' -exec rm {} +)\nendfunction()\n```", "```cpp\nfunction(AddCoverage target)\n  find_program(LCOV_PATH lcov REQUIRED)\n  find_program(GENHTML_PATH genhtml REQUIRED)\n  add_custom_target(coverage-${target}\n    COMMAND ${LCOV_PATH} -d . --zerocounters\n    COMMAND $<TARGET_FILE:${target}>\n    COMMAND ${LCOV_PATH} -d . --capture -o coverage.info\n    COMMAND ${LCOV_PATH} -r coverage.info '/usr/include/*'\n      -o filtered.info\n    COMMAND ${GENHTML_PATH} -o coverage-${target}\n      filtered.info --legend\n    COMMAND rm -rf coverage.info filtered.info\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\nendfunction()\n```", "```cpp\ncmake --build <build-tree> -t coverage-calc_test\ncmake --build <build-tree> -t coverage-calc_console_test\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  memcheck-cover\n  GIT_REPOSITORY https://github.com/Farigh/memcheck-\n    cover.git\n  GIT_TAG        release-1.2\n)\nFetchContent_MakeAvailable(memcheck-cover)\n```", "```cpp\nfunction(AddMemcheck target)\n  set(MEMCHECK_PATH ${memcheck-cover_SOURCE_DIR}/bin)\n  set(REPORT_PATH \"${CMAKE_BINARY_DIR}/valgrind-${target}\")\n  add_custom_target(memcheck-${target}\n    COMMAND ${MEMCHECK_PATH}/memcheck_runner.sh -o\n      \"${REPORT_PATH}/report\"\n      -- $<TARGET_FILE:${target}>\n    COMMAND ${MEMCHECK_PATH}/generate_html_report.sh\n      -i ${REPORT_PATH}\n      -o ${REPORT_PATH}\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\nendfunction()\n```", "```cpp\ncmake --build <build-tree> -t memcheck-calc_test\ncmake --build <build-tree> -t memcheck-calc_console_test\n```", "```cpp\nadd_executable(calc_test calc_test.cpp)\ntarget_link_libraries(calc_test PRIVATE calc_static)\nAddTests(calc_test)\nEnableCoverage(calc_obj)\n```", "```cpp\nadd_executable(calc_console_test tui_test.cpp)\ntarget_link_libraries(calc_console_test\n  PRIVATE calc_console_static)\nAddTests(calc_console_test)\nEnableCoverage(calc_console_static)\n```", "```cpp\n#include \"calc/calc.h\"\n#include <gtest/gtest.h>\nTEST(CalcTest, SumAddsTwoInts) {\n  EXPECT_EQ(4, Calc::Sum(2, 2));\n}\nTEST(CalcTest, MultiplyMultipliesTwoInts) {\n  EXPECT_EQ(12, Calc::Multiply(3, 4));\n}\n```", "```cpp\n#include \"tui.h\"\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n#include <ftxui/screen/screen.hpp>\nusing namespace ::ftxui;\nTEST(ConsoleCalcTest, RunWorksWithDefaultValues) {\n  auto component = getTui();\n  auto document = component->Render();\n  auto screen = Screen::Create(Dimension::Fit(document));\n  Render(screen, document);\n  auto output = screen.ToString();\n  ASSERT_THAT(output, testing::HasSubstr(\"Sum: 102\"));\n}\n```", "```cpp\n# ... calc_test target definition\nAddTests(calc_test)\nEnableCoverage(calc_obj)\n```", "```cpp\n# ... calc_console_test target definition\nAddTests(calc_console_test)\nEnableCoverage(calc_console_static)\n```", "```cpp\n# ... calc_static target definition\ninclude(Coverage)\nCleanCoverage(calc_static)\ninclude(Format)\nFormat(calc_static .)\ninclude(CppCheck)\nAddCppCheck(calc_obj)\n# ... documentation generation\n```", "```cpp\n# ... calc_console_static target definition\ninclude(BuildInfo)\nBuildInfo(calc_console_static)\ninclude(Coverage)\nCleanCoverage(calc_console_static)\ninclude(Format)\nFormat(calc_console_static .)\ninclude(CppCheck)\nAddCppCheck(calc_console_static)\n# ... documentation generation\n# ... calc_console bootstrap target definition\n```", "```cpp\nfunction(Format target directory)\n  find_program(CLANG-FORMAT_PATH clang-format REQUIRED)\n  set(EXPRESSION h hpp hh c cc cxx cpp)\n  list(TRANSFORM EXPRESSION PREPEND \"${directory}/*.\")\n  file(GLOB_RECURSE SOURCE_FILES FOLLOW_SYMLINKS\n    LIST_DIRECTORIES false ${EXPRESSION}\n  )\n  add_custom_command(TARGET ${target} PRE_BUILD COMMAND\n    ${CLANG-FORMAT_PATH} -i --style=file ${SOURCE_FILES}\n  )\nendfunction()\n```", "```cpp\nfunction(AddCppCheck target)\n  find_program(CPPCHECK_PATH cppcheck REQUIRED)\n  set_target_properties(${target}\n    PROPERTIES CXX_CPPCHECK\n    \"${CPPCHECK_PATH};--enable=warning;--error-exitcode=10\"\n  )\nendfunction()\n```", "```cpp\n...\ninclude(Install)\n```", "```cpp\n# Includes\n# Installation of Calc library\n# Installation of Calc Console executable\n# Configuration of CPack\n```", "```cpp\ninclude(GNUInstallDirs)\n# Calc library\ninstall(TARGETS calc_obj calc_shared calc_static\n  EXPORT CalcLibrary\n  ARCHIVE COMPONENT development\n  LIBRARY COMPONENT runtime \n  PUBLIC_HEADER DESTINATION\n    ${CMAKE_INSTALL_INCLUDEDIR}/calc\n      COMPONENT runtime\n)\n```", "```cpp\nif (UNIX)\n  install(CODE \"execute_process(COMMAND ldconfig)\"\n    COMPONENT runtime\n  )\nendif()\n```", "```cpp\ninstall(EXPORT CalcLibrary\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake\n  NAMESPACE Calc::\n  COMPONENT runtime\n)\ninstall(FILES \"CalcConfig.cmake\"\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/calc/cmake\n)\n```", "```cpp\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/CalcLibrary.cmake\")\n```", "```cpp\n# CalcConsole runtime\ninstall(TARGETS calc_console\n  RUNTIME COMPONENT runtime\n)\n```", "```cpp\n# CPack configuration\nset(CPACK_PACKAGE_VENDOR \"Rafal Swidzinski\")\nset(CPACK_PACKAGE_CONTACT \"email@example.com\")\nset(CPACK_PACKAGE_DESCRIPTION \"Simple Calculator\")\ninclude(CPack)\n```", "```cpp\n# cpack -G TGZ -B packages\nCPack: Create package using TGZ\nCPack: Install projects\nCPack: - Run preinstall target for: Calc\nCPack: - Install project: Calc []\nCPack: Create package\nCPack: - package: /tmp/b/packages/Calc-1.0.0-Linux.tar.gz generated. \n```", "```cpp\nfind_package(Doxygen REQUIRED)\ninclude(FetchContent)\nFetchContent_Declare(doxygen-awesome-css\n  GIT_REPOSITORY\n    https://github.com/jothepro/doxygen-awesome-css.git\n  GIT_TAG\n    v1.6.0\n)\nFetchContent_MakeAvailable(doxygen-awesome-css)\n```", "```cpp\nfunction(Doxygen target input)\n  set(NAME \"doxygen-${target}\")\n  set(DOXYGEN_HTML_OUTPUT\n    ${PROJECT_BINARY_DIR}/${NAME})\n  set(DOXYGEN_GENERATE_HTML         YES)\n  set(DOXYGEN_GENERATE_TREEVIEW     YES)\n  set(DOXYGEN_HAVE_DOT              YES)\n  set(DOXYGEN_DOT_IMAGE_FORMAT      svg)\n  set(DOXYGEN_DOT_TRANSPARENT       YES)\n  set(DOXYGEN_HTML_EXTRA_STYLESHEET\n      ${doxygen-awesome-css_SOURCE_DIR}/doxygen-\n        awesome.css)\n  doxygen_add_docs(${NAME}\n    ${PROJECT_SOURCE_DIR}/${input}\n      COMMENT \"Generate HTML documentation\"\n  )\nendfunction()\n```", "```cpp\n# ... calc_static target definition\n# ... testing and program analysis modules\ninclude(Doxygen)\nDoxygen(calc src/calc)\n```", "```cpp\n# ... calc_static target definition\n# ... testing and program analysis modules\ninclude(Doxygen)\nDoxygen(calc_console src/calc_console)\nadd_executable(calc_console bootstrap.cpp)\ntarget_link_libraries(calc_console calc_console_static)\n```", "```cpp\n# Calc Console\nCalc Console is a calculator that adds two numbers in a\nterminal. It does all the math by using a **Calc** library.\nThis library is also available in this package.\nThis application is written in C++ and built with CMake.\n## More information\n- Installation instructions are in the INSTALL file\n- License is in the LICENSE file\n```", "```cpp\nTo install this software you'll need to provide the following:\n- C++ compiler supporting C++17\n- CMake >= 3.20\n- GIT\n- Doxygen + Graphviz\n- CPPCheck\n- Valgrind\nThis project also depends on GTest, GMock and FXTUI. This\nsoftware is automatically pulled from external repositories\nduring the installation.\nTo configure the project type:\ncmake -B <temporary-directory>\nThen you can build the project:\ncmake --build <temporary-directory>\nAnd finally install it:\ncmake --install <temporary-directory>\nTo generate the documentation run:\ncmake --build <temporary-directory> -t doxygen-calc\ncmake --build <temporary-directory> -t doxygen-calc_console\n```", "```cpp\nCopyright 2022 Rafal Swidzinski\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```", "```cpp\n1.0.0 Public version with installer\n0.8.2 Multiplication added to the Calc Library\n0.5.1 Introducing the Calc Console application\n0.2.0 Basic Calc library with Sum function\n```"]