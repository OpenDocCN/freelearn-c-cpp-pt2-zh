["```cpp\nfind_file (\n          <VAR>\n          name | NAMES name1 [name2 ...]\n          [HINTS [path | ENV var]... ]\n          [PATHS [path | ENV var]... ]\n          [PATH_SUFFIXES suffix1 [suffix2 ...]]\n          [DOC \"cache documentation string\"]\n          [NO_CACHE]\n          [REQUIRED]\n          [NO_DEFAULT_PATH]\n          [NO_PACKAGE_ROOT_PATH]\n          [NO_CMAKE_PATH]\n          [NO_CMAKE_ENVIRONMENT_PATH]\n          [NO_SYSTEM_ENVIRONMENT_PATH]\n          [NO_CMAKE_SYSTEM_PATH]\n          [CMAKE_FIND_ROOT_PATH_BOTH |\n           ONLY_CMAKE_FIND_ROOT_PATH |\n           NO_CMAKE_FIND_ROOT_PATH]\n         )\n```", "```cpp\nfind_library(MYSTUFF_LIBRARY libmystuff.a)\nfind_library(MYSTUFF_LIBRARY mystuff)\n```", "```cpp\nfind_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]\n             [REQUIRED] [[COMPONENTS] [components...]]\n             [OPTIONAL_COMPONENTS components...]\n             [NO_POLICY_SCOPE])\n```", "```cpp\nfind_package(OpenSSL REQUIRED COMPONENTS SSL)\nadd_executable(find_package_example)\ntarget_link_libraries(find_package_example PRIVATE OpenSSL::SSL)\n```", "```cpp\nfind_package(OpenSSL 3.0 REQUIRED)\n```", "```cpp\ncmake --help-module-list #< lists all available modules\ncmake --help-module <mod> #< prints the documentation for module\n  <mod>\ncmake --help-modules #< lists all modules and their documentation\n```", "```cpp\n<prefix>/\n<prefix>/(cmake|CMake)/\n<prefix>/<packageName>*/\n<prefix>/<packageName>*/(cmake|CMake)/\n<prefix>/(lib/<arch>|lib*|share)/cmake/<packageName>*/\n<prefix>/(lib/<arch>|lib*|share)/<packageName>*/\n<prefix>/(lib/<arch>|lib*|share)/<packageName>*/(cmake|CMake)/\n<prefix>/<packageName>*/(lib/<arch>|lib*|share)/cmake/\n  <packageName>*/\n<prefix>/<packageName>*/(lib/<arch>|lib*|share)/<packageName>*/\n<prefix>/<packageName>*/(lib/<arch>|lib*|share)/<packageName>*/\n  (cmake|CMake)/\n```", "```cpp\n<prefix>/<packageName>.framework/Resources/\n<prefix>/<packageName>.framework/Resources/CMake/\n<prefix>/<packageName>.framework/Versions/*/Resources/\n<prefix>/<packageName>.framework/Versions/*/Resources/CMake/\n<prefix>/<packageName>.app/Contents/Resources/\n<prefix>/<packageName>.app/Contents/Resources/CMake/\n```", "```cpp\n./chapter05/find_module\n├── cmake\n│   └── FindObscure.cmake <- This what we need to write\n├── CMakeLists.txt\n├── dep <- The folder where we locally keep depdendencies\n└── src\n    └── main.cpp\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n```", "```cpp\ncmake_minimum_required(VERSION 3.21)\nfind_library(\n    OBSCURE_LIBRARY\n    NAMES obscure\n    HINTS ${PROJECT_SOURCE_DIR}/dep/\n    PATH_SUFFIXES  lib  bin  build/Release  build/Debug\n)\nfind_path(\n    OBSCURE_INCLUDE_DIR\n    NAMES obscure/obscure.hpp\n    HINTS ${PROJECT_SOURCE_DIR}/dep/include/\n)\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(\n    Obscure\n    DEFAULT_MSG\n    OBSCURE_LIBRARY\n    OBSCURE_INCLUDE_DIR\n)\nmark_as_advanced(OBSCURE_LIBRARY OBSCURE_INCLUDE_DIR)\nif(NOT TARGET Obscure::Obscure)\n    add_library(Obscure::Obscure UNKNOWN IMPORTED )\n    set_target_properties(Obscure::Obscure  PROPERTIES\n               IMPORTED_LOCATION \"${OBSCURE_LIBRARY}\"\n               INTERFACE_INCLUDE_DIRECTORIES\n                 \"${OBSCURE_INCLUDE_DIR}\"\n               IMPORTED_LINK_INTERFACE_LANGUAGES \"CXX\"\n)\nendif()\n```", "```cpp\n    find_package_handle_standard_args(<PackageName>\n    ```", "```cpp\n      (DEFAULT_MSG|<custom-failure-message>)\n    ```", "```cpp\n      <required-var>...\n    ```", "```cpp\n      )\n    ```", "```cpp\nfind_package(Obscure REQUIRED)\n...\ntarget_link_libraries(find_module_example PRIVATE  Obscure::Obscure)\n```", "```cpp\nconan profile detect --name myprofile\n```", "```cpp\n[settings]\narch=x86_64\nbuild_type=Release\ncompiler=gcc\ncompiler.cppstd=gnu20\ncompiler.libcxx=libstdc++11\ncompiler.version=12\nos=Linux\n```", "```cpp\nmy_project/\n├── src/\n│   └── main.cpp\n├── CMakeLists.txt\n└── conanfile.txt\n```", "```cpp\n[requires]\nfmt/10.2.1\n[generators]\nCMakeDeps\n```", "```cpp\nfind_package(fmt 10.2.1 REQUIRED)\nadd_executable(conan_example src/main.cpp)\ntarget_link_libraries(conan_example PRIVATE fmt::fmt)\n```", "```cpp\ncmake -S . -B build -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=./cmake-conan/conan_provider.cmake -DCMAKE_BUILD_TYPE=Release\n```", "```cpp\nconan install . --output-folder ./build --build=missing --settings=build_type=Debug\n```", "```cpp\ncmake -S . -B build/ -DCMAKE_PREFIX_PATH=./build -DCMAKE_BUILD_TYPE=Debug\n```", "```cpp\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR})\n```", "```cpp\nconan install . --output-folder ./build --build=missing --settings=build_type=Debug –g CMakeToolchain\n```", "```cpp\ncmake --preset conan-debug\n```", "```cpp\nvcpkg install [packages]\n```", "```cpp\n{\n      \"name\" : \"vcpkg-example\",\n      \"version-semver\" : \"0.0.1\",\n      \"dependencies\" :\n      [\n      \"someLibrary\",\n      \"anotherLibrary\",\n]\n}\n```", "```cpp\ncmake -S . -B ./build --toolchain=~/.local/opt/vcpkg/scripts/buildsystems/vcpkg.cmake\n```", "```cpp\ncmake -S <source_dir> -D <binary_dir> -DCMAKE_TOOLCHAIN_FILE=[vcpkg\nroot]/scripts/buildsystems/vcpkg.cmake -DVCPKG_CHAINLOAD_TOOLCHAIN_\nFILE=/path/to/other/toolchain.cmake\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(\n  bertrand\n  GIT_REPOSITORY https://github.com/bernedom/bertrand.git\n  GIT_TAG 0.0.17)\nFetchContent_MakeAvailable(bertrand)\nadd_executable(fetch_content_example)\ntarget_link_libraries(\n    fetch_content_example\n    PRIVATE bertrand::bertrand\n)\n```", "```cpp\nFetchContent_Declare(\n  bertrand\n  GIT_REPOSITORY https://github.com/bernedom/bertrand.git\n  GIT_TAG 0.0.17)\nif(NOT bertrand_POPULATED)\nFetchContent_Populate(bertrand)\nadd_subdirectory(${bertrand_SOURCE_DIR} ${bertrand_BINARY_DIR})\nendif()\n```", "```cpp\nFetchContent_Populate( <name>\n  [QUIET]\n  [SUBBUILD_DIR <subBuildDir>]\n  [SOURCE_DIR <srcDir>]\n  [BINARY_DIR <binDir>]\n  ...\n)\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(Project_A GIT_REPOSITORY ... GIT_TAG ...)\nFetchContent_Declare(Project_B GIT_REPOSITORY ... GIT_TAG ...)\n# Force AwesomeLib dependency to a certain version\nFetchContent_Declare(AwesomeLib\nGIT_REPOSITORY … GIT_TAG 1.2 )\nFetchContent_MakeAvailable(Project_A)\nFetchContent_MakeAvailable(Project_B)\n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(\n  bertrand\n  URL https://github.com/bernedom/bertrand/archive\n    /refs/tags/0.0.17.tar.gz\n  URL_HASH MD5=354141c50b8707f2574b69f30cef0238\n  INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/bertrand_install\n   CMAKE_CACHE_ARGS -DBERTRAND_BUILD_TESTING:BOOL=OFF\n-DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>\n)\n```", "```cpp\nExternalProject_Get_Property(bertrand INSTALL_DIR)\nset(BERTRAND_DOWNLOADED_INSTALL_DIR \"${INSTALL_DIR}\")\n# Create a target to build an executable\nadd_executable(external_project_example)\n# make the executable to be built depend on the external project\n# to force downloading first\nadd_dependencies(external_project_example bertrand)\n# make the header file for bertrand available\ntarget_include_directories(external_project_example PRIVATE\n  ${BERTRAND_DOWNLOADED_INSTALL_DIR}/include)\n```", "```cpp\nExternalProject_Add(MyProject GIT_REPOSITORY\n  https://github.com/PacktPublishing/SomeRandomProject.git\n    GIT_TAG 56cc1aaf50918f208e2ff2ef5e8ec0111097fb8d )\n```", "```cpp\nfind_program(MAKE_EXECUTABLE NAMES nmake gmake make)\nExternalProject_Add(MyAutotoolsProject\n   URL    someUrl\n   INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/myProject_install\n   CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>\n    BUILD_COMMAND ${MAKE_EXECUTABLE}\n)\n```", "```cpp\nExternalProject_Add(MyAutotoolsProject\n   URL    someUrl\n   CONFIGURE_COMMAND <SOURCE_DIR>/configure\n    BUILD_COMMAND ${MAKE_EXECUTABLE}\n    INSTALL_COMMAND \"\"\n)\n```", "```cpp\nExternalProject_Add(ProjectForADifferentPlatform\nSOURCE_DIR $\n    {CMAKE_CURRENT_LIST_DIR}/ProjectForADifferentPlatform\nINSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/\n  ProjectForADifferentPlatform-install\nCMAKE_ARGS\n-D CMAKE_TOOLCHAIN_FILE=${CMAKE_CURRENT_LIST_DIR}/fwtoolchain.cmake\n-D CMAKE_BUILD_TYPE=Release\n-D CMAKE_INSTALL_PREFIX=<INSTALL_DIR>\nBUILD_ALWAYS YES\n)\n```", "```cpp\nExternalProject_Add(MyProject\n   # various options\n   STEP_TARGETS configure build\n)\nExternalProject_Add_StepTargets(MyProject configure build)\n```", "```cpp\nExternalProject_Add(ProjectA\n... # various options\n        STEP_TARGETS install\n)\nExternalProject_Add(ProjectB\n... # various options\n)\nExternalProject_Add_StepDependencies(ProjectB configure ProjectA)\n```", "```cpp\nExternalProject_Add_Step(bertrand_downloaded copy_license\n     COMMAND ${CMAKE_COMMAND} -E tar \"cvzf\" ${CMAKE_CURRENT_\n       BINARY_DIR}/licenses.tar.gz <SOURCE_DIR>/LICENSE\n         DEPENDEES build\n)\n```"]