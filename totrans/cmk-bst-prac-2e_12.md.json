["```cpp\nif(CH10_EX01_USE_SUPERBUILD)\n  include(superbuild.cmake)\nelse()\n  find_package(GTest 1.10.0 REQUIRED)\n  find_package(benchmark 1.6.1 REQUIRED)\nendif()\nadd_executable(ch10_ex01_tests)\ntarget_sources(ch10_ex01_tests PRIVATE src/tests.cpp)\ntarget_link_libraries(ch10_ex01_tests PRIVATE GTest::Main)\nadd_executable(ch10_ex01_benchmarks)\ntarget_sources(ch10_ex01_benchmarks PRIVATE src\n  /benchmarks.cpp)\ntarget_link_libraries(ch10_ex01_benchmarks PRIVATE\n  benchmark::benchmark)\n```", "```cpp\ninclude(FetchContent)\nFetchContent_Declare(benchmark\n    GIT_REPOSITORY https://github.com/google/benchmark.git\n    GIT_TAG        v1.6.1\n)\nFetchContent_Declare(GTest\n    GIT_REPOSITORY https://github.com/google/googletest.git\n    GIT_TAG        release-1.10.0\n)\nFetchContent_MakeAvailable(GTest benchmark)\nadd_library(GTest::Main ALIAS gtest_main)\n```", "```cpp\ncd chapter_10/ex01_external_deps\ncmake -S ./ -B build -DCH10_EX01_USE_SUPERBUILD:BOOL=ON\ncmake --build build/ --parallel $(nproc)\n```", "```cpp\n# ...\ninclude(superbuild.cmake)\nadd_executable(ch10_ex02_tests)\ntarget_sources(ch10_ex02_tests PRIVATE src/tests.cpp)\ntarget_link_libraries(ch10_ex02_tests PRIVATE catch2)\n```", "```cpp\ninclude(ExternalProject)\nExternalProject_Add(catch2_download\n    GIT_REPOSITORY https://github.com/catchorg/Catch2.git\n    GIT_TAG v2.13.9\n    INSTALL_COMMAND \"\"\n    # For disabling the warning that treated as an error\n    CMAKE_ARGS -DCMAKE_CXX_FLAGS=\"-Wno-error=pragmas\"\n)\nSET(CATCH2_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}\n  /catch2_download-\n  prefix/src/catch2_download/single_include)\nfile(MAKE_DIRECTORY ${CATCH2_INCLUDE_DIR})\nadd_library(catch2 IMPORTED INTERFACE GLOBAL)\nadd_dependencies(catch2 catch2_download)\nset_target_properties(catch2 PROPERTIES \"INTERFACE_INCLUDE_\n  DIRECTORIES\" \"${CATCH2_INCLUDE_DIR}\")\n```", "```cpp\ncd chapter_10/ex02_external_deps_with_extproject\ncmake -S ./ -B build\ncmake --build build/ --parallel $(nproc)\n```", "```cpp\n[ 10%] Creating directories for 'catch2_download'\n[ 20%] Performing download step (git clone) for\n  'catch2_download'\nCloning into 'catch2_download'...\nHEAD is now at 62fd6605 v2.13.9\n[ 30%] Performing update step for 'catch2_download'\n[ 40%] No patch step for 'catch2_download'\n[ 50%] Performing configure step for 'catch2_download'\n/* ... */\n[ 60%] Performing build step for 'catch2_download'\n/* ... */\n[ 70%] No install step for 'catch2_download'\n[ 80%] Completed 'catch2_download'\n[ 80%] Built target catch2_download\n/* ... */\n[100%] Built target ch10_ex02_tests\n```", "```cpp\n===========================================================\nAll tests passed (4 assertions in 1 test case)\n```", "```cpp\n#include <qapplication.h>\n#include <qpushbutton.h>\nint main( int argc, char **argv )\n{\n    QApplication a( argc, argv );\n    QPushButton hello( \"Hello from CMake Best Practices!\",\n      0 );\n    hello.resize( 250, 30 );\n    hello.show();\n    return a.exec();\n}\n```", "```cpp\nif(CH10_EX03_USE_SUPERBUILD)\n  include(superbuild.cmake)\nelse()\n    set(CMAKE_AUTOMOC ON)\n    set(CMAKE_AUTORCC ON)\n    set(CMAKE_AUTOUIC ON)\n    find_package(Qt6 COMPONENTS Core Widgets REQUIRED)\nendif()\nadd_executable(ch10_ex03_simple_qt_app main.cpp)\ntarget_compile_features(ch10_ex03_simple_qt_app PRIVATE\n  cxx_std_11)\ntarget_link_libraries(ch10_ex03_simple_qt_app Qt6::Core\n  Qt6::Widgets)\n```", "```cpp\ninclude(FetchContent)\nmessage(STATUS \"Chapter 10, example 03 superbuild enabled.\n  Will try to satisfy dependencies for the example.\")\nset(FETCHCONTENT_QUIET FALSE) # Enable message output for\n  FetchContent commands\nset(QT_BUILD_SUBMODULES \"qtbase\" CACHE STRING \"Submodules\n  to build\")\nset(QT_WILL_BUILD_TOOLS on)\nset(QT_FEATURE_sql off)\nset(QT_FEATURE_network off)\nset(QT_FEATURE_dbus off)\nset(QT_FEATURE_opengl off)\nset(QT_FEATURE_testlib off)\nset(QT_BUILD_STANDALONE_TESTS off)\nset(QT_BUILD_EXAMPLES off)\nset(QT_BUILD_TESTS off)\nFetchContent_Declare(qt6\n    GIT_REPOSITORY https://github.com/qt/qt5.git\n    GIT_TAG        v6.3.0\n    GIT_SHALLOW TRUE\n    GIT_PROGRESS TRUE # Since the clone process is lengthy,\n      show progress of download\n    GIT_SUBMODULES qtbase # The only QT submodule we need\n)\nFetchContent_MakeAvailable(qt6)\n```", "```cpp\ncd chapter_10/ex03_simple_qt_app/\ncmake -S ./ -B build -DCH10_EX03_USE_SUPERBUILD:BOOL=ON\ncmake --build build/ --parallel $(nproc)\n```", "```cpp\n/*...*/\n[ 11%] Creating directories for 'qt6-populate'\n[ 22%] Performing download step (git clone) for\n  'qt6-populate'\nCloning into 'qt6-src'...\n/*...*/\n[100%] Completed 'qt6-populate'\n[100%] Built target qt6-populate\n/*...*/\n-- Configuring done\n-- Generating done\n/*...*/\n[  0%] Generating ../../mkspecs/modules\n  /qt_lib_widgets_private.pri\n[  0%] Generating ../../mkspecs/modules\n  /qt_lib_gui_private.pri\n[  0%] Generating ../../mkspecs/modules/qt_lib_core_private.pri\n/* ... */\n[ 98%] Linking CXX executable ch10_ex03_simple_qt_app\n[ 98%] Built target ch10_ex03_simple_qt_app\n/*...*/\n```", "```cpp\n./build/ch10_ex03_simple_qt_app\n```"]