["```cpp\n#include <cstdlib>\n#include <iostream>\n#include <string>\n\nstd::string say_hello() { return std::string(\"Hello, CMake world!\"); }\n\nint main() {\n  std::cout << say_hello() << std::endl;\n  return EXIT_SUCCESS;\n}\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n```", "```cpp\nproject(recipe-01 LANGUAGES CXX)\n```", "```cpp\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n-- The CXX compiler identification is GNU 8.1.0\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/cmake-cookbook/chapter-01/recipe-01/cxx-example/build\n```", "```cpp\n$ cmake --build .\n\nScanning dependencies of target hello-world\n[ 50%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world\n[100%] Built target hello-world\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-01 LANGUAGES CXX)\n\nadd_executable(hello-world hello-world.cpp)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n```", "```cpp\n$ cmake -H. -Bbuild\n```", "```cpp\n$ cmake ..\n\n-- The CXX compiler identification is GNU 8.1.0\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/cmake-cookbook/chapter-01/recipe-01/cxx-example/build\n```", "```cpp\n$ cmake --build .\n```", "```cpp\n$ ./hello-world\n\nHello, CMake world!\n```", "```cpp\n$ mkdir -p /tmp/someplace\n$ cd /tmp/someplace\n$ cmake /path/to/source\n$ cmake --build .\n```", "```cpp\n$ cmake --build . --target help\n\nThe following are some of the valid targets for this Makefile:\n... all (the default if no target is provided)\n... clean\n... depend\n... rebuild_cache\n... hello-world\n... edit_cache\n... hello-world.o\n... hello-world.i\n... hello-world.s\n```", "```cpp\n$ cmake --help\n```", "```cpp\nGenerators\n\nThe following generators are available on this platform:\n  Unix Makefiles = Generates standard UNIX makefiles.\n  Ninja = Generates build.ninja files.\n  Watcom WMake = Generates Watcom WMake makefiles.\n  CodeBlocks - Ninja = Generates CodeBlocks project files.\n\n  CodeBlocks - Unix Makefiles = Generates CodeBlocks project files.\n  CodeLite - Ninja = Generates CodeLite project files.\n  CodeLite - Unix Makefiles = Generates CodeLite project files.\n  Sublime Text 2 - Ninja = Generates Sublime Text 2 project files.\n  Sublime Text 2 - Unix Makefiles = Generates Sublime Text 2 project files.\n  Kate - Ninja = Generates Kate project files.\n  Kate - Unix Makefiles = Generates Kate project files.\n  Eclipse CDT4 - Ninja = Generates Eclipse CDT 4.0 project files.\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -G Ninja ..\n\n-- The CXX compiler identification is GNU 8.1.0\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/user/cmake-cookbook/chapter-01/recipe-02/cxx-example/build\n```", "```cpp\n$ cmake --build .\n\n[2/2] Linking CXX executable hello-world\n```", "```cpp\n#include \"Message.hpp\"\n\n#include <cstdlib>\n#include <iostream>\n\nint main() {\n  Message say_hello(\"Hello, CMake World!\");\n\n  std::cout << say_hello << std::endl;\n\n  Message say_goodbye(\"Goodbye, CMake World\");\n\n  std::cout << say_goodbye << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n#pragma once\n\n#include <iosfwd>\n#include <string>\n\nclass Message {\npublic:\n  Message(const std::string &m) : message_(m) {}\n\n  friend std::ostream &operator<<(std::ostream &os, Message &obj) {\n    return obj.printObject(os);\n  }\n\nprivate:\n  std::string message_;\n  std::ostream &printObject(std::ostream &os);\n};\n```", "```cpp\n#include \"Message.hpp\"\n\n#include <iostream>\n#include <string>\n\nstd::ostream &Message::printObject(std::ostream &os) {\n  os << \"This is my very nice message: \" << std::endl;\n  os << message_;\n\n  return os;\n}\n```", "```cpp\nadd_library(message \n  STATIC\n    Message.hpp\n    Message.cpp\n  )\n```", "```cpp\nadd_executable(hello-world hello-world.cpp) \n```", "```cpp\ntarget_link_libraries(hello-world message)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n\nScanning dependencies of target message\n[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o\n[ 50%] Linking CXX static library libmessage.a\n[ 50%] Built target message\nScanning dependencies of target hello-world\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world\n[100%] Built target hello-world\n\n$ ./hello-world\n\nThis is my very nice message: \nHello, CMake World!\nThis is my very nice message: \nGoodbye, CMake World\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-03 LANGUAGES CXX)\n\nadd_library(message-objs\n  OBJECT\n    Message.hpp\n    Message.cpp\n  )\n\n# this is only needed for older compilers\n# but doesn't hurt either to have it\nset_target_properties(message-objs\n  PROPERTIES\n    POSITION_INDEPENDENT_CODE 1\n  )\n\nadd_library(message-shared\n  SHARED\n    $<TARGET_OBJECTS:message-objs>\n  )\n\nadd_library(message-static\n  STATIC\n    $<TARGET_OBJECTS:message-objs>\n  )\n\nadd_executable(hello-world hello-world.cpp)\n\ntarget_link_libraries(hello-world message-static)\n```", "```cpp\nadd_library(message-shared\n  SHARED\n    $<TARGET_OBJECTS:message-objs>\n  )\nset_target_properties(message-shared\n  PROPERTIES\n    OUTPUT_NAME \"message\"\n  )\n\nadd_library(message-static\n  STATIC\n    $<TARGET_OBJECTS:message-objs>\n  )\nset_target_properties(message-static\n  PROPERTIES\n    OUTPUT_NAME \"message\"\n  )\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-04 LANGUAGES CXX)\n```", "```cpp\nset(USE_LIBRARY OFF)\n\nmessage(STATUS \"Compile sources into a library? ${USE_LIBRARY}\")\n```", "```cpp\nset(BUILD_SHARED_LIBS OFF)\n```", "```cpp\nlist(APPEND _sources Message.hpp Message.cpp)\n```", "```cpp\nif(USE_LIBRARY)\n  # add_library will create a static library\n  # since BUILD_SHARED_LIBS is OFF\n  add_library(message ${_sources})\n\n  add_executable(hello-world hello-world.cpp)\n\n  target_link_libraries(hello-world message)\nelse()\n  add_executable(hello-world hello-world.cpp ${_sources})\nendif()\n```", "```cpp\noption(USE_LIBRARY \"Compile sources into a library\" OFF)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake -D USE_LIBRARY=ON ..\n\n-- ...\n-- Compile sources into a library? ON\n-- ...\n\n$ cmake --build .\n\nScanning dependencies of target message\n[ 25%] Building CXX object CMakeFiles/message.dir/Message.cpp.o\n[ 50%] Linking CXX static library libmessage.a\n[ 50%] Built target message\nScanning dependencies of target hello-world\n[ 75%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\n[100%] Linking CXX executable hello-world\n[100%] Built target hello-world\n```", "```cpp\n option(<option_variable> \"help string\" [initial value])\n```", "```cpp\ninclude(CMakeDependentOption)\n\n# second option depends on the value of the first\ncmake_dependent_option(\n  MAKE_STATIC_LIBRARY \"Compile sources into a static library\" OFF\n  \"USE_LIBRARY\" ON\n  )\n\n# third option depends on the value of the first\ncmake_dependent_option(\n  MAKE_SHARED_LIBRARY \"Compile sources into a shared library\" ON\n  \"USE_LIBRARY\" ON\n  )\n```", "```cpp\n$ cmake -D USE_LIBRARY=OFF -D MAKE_SHARED_LIBRARY=ON ..\n```", "```cpp\n$ cmake -D CMAKE_CXX_COMPILER=clang++ ..\n```", "```cpp\n$ env CXX=clang++ cmake ..\n```", "```cpp\n$ cmake --system-information information.txt\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-06 LANGUAGES C CXX)\n\nmessage(STATUS \"Is the C++ compiler loaded? ${CMAKE_CXX_COMPILER_LOADED}\")\nif(CMAKE_CXX_COMPILER_LOADED)\n  message(STATUS \"The C++ compiler ID is: ${CMAKE_CXX_COMPILER_ID}\")\n  message(STATUS \"Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCXX}\")\n  message(STATUS \"The C++ compiler version is: ${CMAKE_CXX_COMPILER_VERSION}\")\nendif()\n\nmessage(STATUS \"Is the C compiler loaded? ${CMAKE_C_COMPILER_LOADED}\")\nif(CMAKE_C_COMPILER_LOADED)\n  message(STATUS \"The C compiler ID is: ${CMAKE_C_COMPILER_ID}\")\n  message(STATUS \"Is the C from GNU? ${CMAKE_COMPILER_IS_GNUCC}\")\n  message(STATUS \"The C compiler version is: ${CMAKE_C_COMPILER_VERSION}\")\nendif()\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n...\n-- Is the C++ compiler loaded? 1\n-- The C++ compiler ID is: GNU\n-- Is the C++ from GNU? 1\n-- The C++ compiler version is: 8.1.0\n-- Is the C compiler loaded? 1\n-- The C compiler ID is: GNU\n-- Is the C from GNU? 1\n-- The C compiler version is: 8.1.0\n...\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-07 LANGUAGES C CXX)\n```", "```cpp\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\nendif()\n\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n```", "```cpp\nmessage(STATUS \"C flags, Debug configuration: ${CMAKE_C_FLAGS_DEBUG}\")\nmessage(STATUS \"C flags, Release configuration: ${CMAKE_C_FLAGS_RELEASE}\")\nmessage(STATUS \"C flags, Release configuration with Debug info: ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"C flags, minimal Release configuration: ${CMAKE_C_FLAGS_MINSIZEREL}\")\n\nmessage(STATUS \"C++ flags, Debug configuration: ${CMAKE_CXX_FLAGS_DEBUG}\")\nmessage(STATUS \"C++ flags, Release configuration: ${CMAKE_CXX_FLAGS_RELEASE}\")\nmessage(STATUS \"C++ flags, Release configuration with Debug info: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\nmessage(STATUS \"C++ flags, minimal Release configuration: ${CMAKE_CXX_FLAGS_MINSIZEREL}\")\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n...\n-- Build type: Release\n-- C flags, Debug configuration: -g\n-- C flags, Release configuration: -O3 -DNDEBUG\n-- C flags, Release configuration with Debug info: -O2 -g -DNDEBUG\n-- C flags, minimal Release configuration: -Os -DNDEBUG\n-- C++ flags, Debug configuration: -g\n-- C++ flags, Release configuration: -O3 -DNDEBUG\n-- C++ flags, Release configuration with Debug info: -O2 -g -DNDEBUG\n-- C++ flags, minimal Release configuration: -Os -DNDEBUG\n```", "```cpp\n$ cmake -D CMAKE_BUILD_TYPE=Debug ..\n\n-- Build type: Debug\n-- C flags, Debug configuration: -g\n-- C flags, Release configuration: -O3 -DNDEBUG\n-- C flags, Release configuration with Debug info: -O2 -g -DNDEBUG\n-- C flags, minimal Release configuration: -Os -DNDEBUG\n-- C++ flags, Debug configuration: -g\n-- C++ flags, Release configuration: -O3 -DNDEBUG\n-- C++ flags, Release configuration with Debug info: -O2 -g -DNDEBUG\n-- C++ flags, minimal Release configuration: -Os -DNDEBUG\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake .. -G\"Visual Studio 12 2017 Win64\" -D CMAKE_CONFIGURATION_TYPES=\"Release;Debug\"\n```", "```cpp\n$ cmake --build . --config Release\n```", "```cpp\n#include \"geometry_circle.hpp\"\n#include \"geometry_polygon.hpp\"\n#include \"geometry_rhombus.hpp\"\n#include \"geometry_square.hpp\"\n\n#include <cstdlib>\n#include <iostream>\n\nint main() {\n  using namespace geometry;\n\n  double radius = 2.5293;\n  double A_circle = area::circle(radius);\n  std::cout << \"A circle of radius \" << radius << \" has an area of \" << A_circle\n            << std::endl;\n\n  int nSides = 19;\n  double side = 1.29312;\n  double A_polygon = area::polygon(nSides, side);\n  std::cout << \"A regular polygon of \" << nSides << \" sides of length \" << side\n            << \" has an area of \" << A_polygon << std::endl;\n\n  double d1 = 5.0;\n  double d2 = 7.8912;\n  double A_rhombus = area::rhombus(d1, d2);\n  std::cout << \"A rhombus of major diagonal \" << d1 << \" and minor diagonal \" << d2\n            << \" has an area of \" << A_rhombus << std::endl;\n\n  double l = 10.0;\n  double A_square = area::square(l);\n  std::cout << \"A square of side \" << l << \" has an area of \" << A_square\n            << std::endl;\n\n  return EXIT_SUCCESS;\n}\n```", "```cpp\n.\n├── CMakeLists.txt\n├── compute-areas.cpp\n├── geometry_circle.cpp\n├── geometry_circle.hpp\n├── geometry_polygon.cpp\n├── geometry_polygon.hpp\n├── geometry_rhombus.cpp\n├── geometry_rhombus.hpp\n├── geometry_square.cpp\n└── geometry_square.hpp\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n```", "```cpp\nproject(recipe-08 LANGUAGES CXX)\n```", "```cpp\nmessage(\"C++ compiler flags: ${CMAKE_CXX_FLAGS}\")\n```", "```cpp\nlist(APPEND flags \"-fPIC\" \"-Wall\")\nif(NOT WIN32)\n  list(APPEND flags \"-Wextra\" \"-Wpedantic\")\nendif()\n```", "```cpp\nadd_library(geometry\n  STATIC\n    geometry_circle.cpp\n    geometry_circle.hpp\n    geometry_polygon.cpp\n    geometry_polygon.hpp\n    geometry_rhombus.cpp\n    geometry_rhombus.hpp\n    geometry_square.cpp\n    geometry_square.hpp\n  )\n```", "```cpp\ntarget_compile_options(geometry\n  PRIVATE\n    ${flags}\n  )\n```", "```cpp\nadd_executable(compute-areas compute-areas.cpp)\n```", "```cpp\ntarget_compile_options(compute-areas\n  PRIVATE\n    \"-fPIC\"\n  )\n```", "```cpp\ntarget_link_libraries(compute-areas geometry)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build . -- VERBOSE=1\n\n... lots of output ...\n\n[ 14%] Building CXX object CMakeFiles/geometry.dir/geometry_circle.cpp.o\n/usr/bin/c++ -fPIC -Wall -Wextra -Wpedantic -o CMakeFiles/geometry.dir/geometry_circle.cpp.o -c /home/bast/tmp/cmake-cookbook/chapter-01/recipe-08/cxx-example/geometry_circle.cpp\n[ 28%] Building CXX object CMakeFiles/geometry.dir/geometry_polygon.cpp.o\n/usr/bin/c++ -fPIC -Wall -Wextra -Wpedantic -o CMakeFiles/geometry.dir/geometry_polygon.cpp.o -c /home/bast/tmp/cmake-cookbook/chapter-01/recipe-08/cxx-example/geometry_polygon.cpp\n[ 42%] Building CXX object CMakeFiles/geometry.dir/geometry_rhombus.cpp.o\n/usr/bin/c++ -fPIC -Wall -Wextra -Wpedantic -o CMakeFiles/geometry.dir/geometry_rhombus.cpp.o -c /home/bast/tmp/cmake-cookbook/chapter-01/recipe-08/cxx-example/geometry_rhombus.cpp\n[ 57%] Building CXX object CMakeFiles/geometry.dir/geometry_square.cpp.o\n/usr/bin/c++ -fPIC -Wall -Wextra -Wpedantic -o CMakeFiles/geometry.dir/geometry_square.cpp.o -c /home/bast/tmp/cmake-cookbook/chapter-01/recipe-08/cxx-example/geometry_square.cpp\n\n... more output ...\n\n[ 85%] Building CXX object CMakeFiles/compute-areas.dir/compute-areas.cpp.o\n/usr/bin/c++ -fPIC -o CMakeFiles/compute-areas.dir/compute-areas.cpp.o -c /home/bast/tmp/cmake-cookbook/chapter-01/recipe-08/cxx-example/compute-areas.cpp\n\n... more output ...\n```", "```cpp\n$ cmake -D CMAKE_CXX_FLAGS=\"-fno-exceptions -fno-rtti\" ..\n```", "```cpp\n$ cmake -D CMAKE_CXX_FLAGS=\"-fno-exceptions -fno-rtti\" ..\n```", "```cpp\nif(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n  list(APPEND CMAKE_CXX_FLAGS \"-fno-rtti\" \"-fno-exceptions\")\n  list(APPEND CMAKE_CXX_FLAGS_DEBUG \"-Wsuggest-final-types\" \"-Wsuggest-final-methods\" \"-Wsuggest-override\")\n  list(APPEND CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-Wno-unused\")\nendif()\n\nif(CMAKE_CXX_COMPILER_ID MATCHES Clang)  \n  list(APPEND CMAKE_CXX_FLAGS \"-fno-rtti\" \"-fno-exceptions\" \"-Qunused-arguments\" \"-fcolor-diagnostics\")\n  list(APPEND CMAKE_CXX_FLAGS_DEBUG \"-Wdocumentation\")\n  list(APPEND CMAKE_CXX_FLAGS_RELEASE \"-O3\" \"-Wno-unused\")\nendif()\n```", "```cpp\nset(COMPILER_FLAGS)\nset(COMPILER_FLAGS_DEBUG)\nset(COMPILER_FLAGS_RELEASE)\n\nif(CMAKE_CXX_COMPILER_ID MATCHES GNU)\n  list(APPEND CXX_FLAGS \"-fno-rtti\" \"-fno-exceptions\")\n  list(APPEND CXX_FLAGS_DEBUG \"-Wsuggest-final-types\" \"-Wsuggest-final-methods\" \"-Wsuggest-override\")\n  list(APPEND CXX_FLAGS_RELEASE \"-O3\" \"-Wno-unused\")\nendif()\n\nif(CMAKE_CXX_COMPILER_ID MATCHES Clang)  \n  list(APPEND CXX_FLAGS \"-fno-rtti\" \"-fno-exceptions\" \"-Qunused-arguments\" \"-fcolor-diagnostics\")\n  list(APPEND CXX_FLAGS_DEBUG \"-Wdocumentation\")\n  list(APPEND CXX_FLAGS_RELEASE \"-O3\" \"-Wno-unused\")\nendif()\n```", "```cpp\ntarget_compile_option(compute-areas\n  PRIVATE\n    ${CXX_FLAGS}\n    \"$<$<CONFIG:Debug>:${CXX_FLAGS_DEBUG}>\"\n    \"$<$<CONFIG:Release>:${CXX_FLAGS_RELEASE}>\"\n  )\n```", "```cpp\nstd::unique_ptr<Animal> cat = Cat(\"Simon\");\nstd::unique_ptr<Animal> dog = Dog(\"Marlowe);\n```", "```cpp\ntypedef std::function<std::unique_ptr<Animal>(const std::string &)> CreateAnimal;\n```", "```cpp\nstd::unique_ptr<Animal> simon = farm.create(\"CAT\", \"Simon\");\nstd::unique_ptr<Animal> marlowe = farm.create(\"DOG\", \"Marlowe\");\n```", "```cpp\nFactory<CreateAnimal> farm;\nfarm.subscribe(\"CAT\", [](const std::string & n) { return std::make_unique<Cat>(n); });\nfarm.subscribe(\"DOG\", [](const std::string & n) { return std::make_unique<Dog>(n); });\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-09 LANGUAGES CXX)\n```", "```cpp\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n```", "```cpp\nadd_library(animals\n  SHARED\n    Animal.cpp\n    Animal.hpp\n    Cat.cpp\n    Cat.hpp\n    Dog.cpp\n    Dog.hpp\n    Factory.hpp\n  )\n```", "```cpp\nset_target_properties(animals\n  PROPERTIES\n    CXX_STANDARD 14\n    CXX_EXTENSIONS OFF\n    CXX_STANDARD_REQUIRED ON\n    POSITION_INDEPENDENT_CODE 1\n  )\n```", "```cpp\nadd_executable(animal-farm animal-farm.cpp)\n\nset_target_properties(animal-farm\n  PROPERTIES\n    CXX_STANDARD 14\n    CXX_EXTENSIONS OFF\n    CXX_STANDARD_REQUIRED ON\n  )\n```", "```cpp\ntarget_link_libraries(animal-farm animals)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n$ cmake --build .\n$ ./animal-farm\n\nI'm Simon the cat!\nI'm Marlowe the dog!\n```", "```cpp\ncmake_minimum_required(VERSION 3.5 FATAL_ERROR)\n\nproject(recipe-10 LANGUAGES CXX)\n\nadd_library(geometry\n  STATIC\n    geometry_circle.cpp\n    geometry_circle.hpp\n    geometry_polygon.cpp\n    geometry_polygon.hpp\n    geometry_rhombus.cpp\n    geometry_rhombus.hpp\n    geometry_square.cpp\n    geometry_square.hpp\n  )\n```", "```cpp\ntarget_compile_options(geometry\n  PRIVATE\n    -O3\n  )\n```", "```cpp\nlist(\n  APPEND sources_with_lower_optimization\n    geometry_circle.cpp\n    geometry_rhombus.cpp\n  )\n```", "```cpp\nmessage(STATUS \"Setting source properties using IN LISTS syntax:\")\nforeach(_source IN LISTS sources_with_lower_optimization)\n  set_source_files_properties(${_source} PROPERTIES COMPILE_FLAGS -O2)\n  message(STATUS \"Appending -O2 flag for ${_source}\")\nendforeach()\n```", "```cpp\nmessage(STATUS \"Querying sources properties using plain syntax:\")\nforeach(_source ${sources_with_lower_optimization})\n  get_source_file_property(_flags ${_source} COMPILE_FLAGS)\n  message(STATUS \"Source ${_source} has the following extra COMPILE_FLAGS: ${_flags}\")\nendforeach()\n```", "```cpp\nadd_executable(compute-areas compute-areas.cpp)\n\ntarget_link_libraries(compute-areas geometry)\n```", "```cpp\n$ mkdir -p build\n$ cd build\n$ cmake ..\n\n...\n-- Setting source properties using IN LISTS syntax:\n-- Appending -O2 flag for geometry_circle.cpp\n-- Appending -O2 flag for geometry_rhombus.cpp\n-- Querying sources properties using plain syntax:\n-- Source geometry_circle.cpp has the following extra COMPILE_FLAGS: -O2\n-- Source geometry_rhombus.cpp has the following extra COMPILE_FLAGS: -O2\n```", "```cpp\n$ cmake --build . -- VERBOSE=1\n```"]