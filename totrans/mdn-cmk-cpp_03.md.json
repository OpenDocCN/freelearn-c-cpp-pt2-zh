["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree>\n```", "```cpp\nadd_executable(app1 a.cpp b.cpp c.cpp)\n```", "```cpp\nadd_custom_target(Name [ALL] [command1 [args1...]]\n                  [COMMAND command2 [args2...] ...]\n                  [DEPENDS depend depend depend ... ]\n                  [BYPRODUCTS [files...]]\n                  [WORKING_DIRECTORY dir]\n                  [COMMENT comment]\n                  [JOB_POOL job_pool]\n                  [VERBATIM] [USES_TERMINAL]\n                  [COMMAND_EXPAND_LISTS]\n                  [SOURCES src1 [src2...]])\n```", "```cpp\nadd_custom_target(clean_stale_coverage_files \n          COMMAND find . -name \"*.gcda\" -type f -delete)\n```", "```cpp\ncmake_minimum_required(VERSION 3.19.2)\nproject(BankApp CXX)\nadd_executable(terminal_app terminal_app.cpp)\nadd_executable(gui_app gui_app.cpp)\ntarget_link_libraries(terminal_app calculations)\ntarget_link_libraries(gui_app calculations drawing)\nadd_library(calculations calculations.cpp)\nadd_library(drawing drawing.cpp)\nadd_custom_target(checksum ALL\n    COMMAND sh -c \"cksum terminal_app>terminal.ck\"\n    COMMAND sh -c \"cksum gui_app>gui.ck\"\n    BYPRODUCTS terminal.ck gui.ck\n    COMMENT \"Checking the sums...\"\n)\n```", "```cpp\nadd_dependencies(checksum terminal_app gui_app)\n```", "```cpp\ncmake --graphviz=test.dot .\n```", "```cpp\nget_target_property(<var> <target> <property-name>)\nset_target_properties(<target1> <target2> ...\n                      PROPERTIES <prop1-name> <value1>\n                      <prop2-name> <value2> ...)\n```", "```cpp\nset_property(TARGET <target> PROPERTY <name> <value>)\n```", "```cpp\ntarget_compile_definitions(<source> <INTERFACE|PUBLIC|PRIVATE> [items1...])\n```", "```cpp\ntarget_link_libraries(<target>\n                     <PRIVATE|PUBLIC|INTERFACE> <item>...\n                    [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)\n```", "```cpp\nCMake Error: The INTERFACE_POSITION_INDEPENDENT_CODE property of \"source_target2\" does not agree with the value of POSITION_INDEPENDENT_CODE already determined for \"destination_target\".\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(PropagatedProperties CXX)\nadd_library(source1 empty.cpp)\nset_property(TARGET source1 PROPERTY INTERFACE_LIB_VERSION\n   4)\nset_property(TARGET source1 APPEND PROPERTY\n COMPATIBLE_INTERFACE_STRING LIB_VERSION\n)\nadd_library(source2 empty.cpp)\nset_property(TARGET source2 PROPERTY INTERFACE_LIB_VERSION\n   4)\nadd_library(destination empty.cpp)\ntarget_link_libraries(destination source1 source2)\n```", "```cpp\nadd_executable(<name> ALIAS <target>)\nadd_library(<name> ALIAS <target>)\n```", "```cpp\nadd_library(Eigen INTERFACE \n  src/eigen.h src/vector.h src/matrix.h\n)\ntarget_include_directories(Eigen INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n  $<INSTALL_INTERFACE:include/Eigen>\n)\n```", "```cpp\ntarget_link_libraries(executable Eigen)\n```", "```cpp\nadd_library(warning_props INTERFACE)\ntarget_compile_options(warning_props INTERFACE \n  -Wall -Wextra -Wpedantic\n) \ntarget_link_libraries(executable warning_props)\n```", "```cpp\nadd_executable(<name> EXCLUDE_FROM_ALL [<source>...])\nadd_library(<name> EXCLUDE_FROM_ALL [<source>...])\n```", "```cpp\nadd_custom_command(OUTPUT output1 [output2 ...]\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [MAIN_DEPENDENCY depend]\n                   [DEPENDS [depends...]]\n                   [BYPRODUCTS [files...]]\n                   [IMPLICIT_DEPENDS <lang1> depend1\n                                    [<lang2> depend2] ...]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [DEPFILE depfile]\n                   [JOB_POOL job_pool]\n                   [VERBATIM] [APPEND] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS])\n```", "```cpp\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n}\n```", "```cpp\nadd_custom_command(OUTPUT person.pb.h person.pb.cc\n        COMMAND protoc ARGS person.proto\n        DEPENDS person.proto\n)\n```", "```cpp\nadd_executable(serializer serializer.cpp person.pb.cc)\n```", "```cpp\nadd_executable(main main.cpp constants.h)\ntarget_include_directories(main PRIVATE\n  ${CMAKE_BINARY_DIR})\nadd_custom_command(OUTPUT constants.h \nCOMMAND cp \nARGS \"${CMAKE_SOURCE_DIR}/template.xyz\" constants.h)\n```", "```cpp\nadd_custom_command(TARGET <target>\n                   PRE_BUILD | PRE_LINK | POST_BUILD\n                   COMMAND command1 [ARGS] [args1...]\n                   [COMMAND command2 [ARGS] [args2...] ...]\n                   [BYPRODUCTS [files...]]\n                   [WORKING_DIRECTORY dir]\n                   [COMMENT comment]\n                   [VERBATIM] [USES_TERMINAL]\n                   [COMMAND_EXPAND_LISTS])\n```", "```cpp\ncmake_minimum_required(VERSION 3.20.0)\nproject(Command CXX)\nadd_executable(main main.cpp)\nadd_custom_command(TARGET main POST_BUILD\n                   COMMAND cksum \n                   ARGS \"$<TARGET_FILE:main>\" > \"main.ck\")\n```", "```cpp\ntarget_compile_definitions(foo PUBLIC\n  BAR=$<TARGET_FILE:foo>)\n```", "```cpp\n$<UPPER_CASE:$<PLATFORM_ID>>\n```", "```cpp\n$<UPPER_CASE:${my_variable}>\n```", "```cpp\n$<IF:condition,true_string,false_string>\n```", "```cpp\n$<IF:condition,true_string,>\n```", "```cpp\n$<condition:true_string >\n```", "```cpp\n$<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:AppleClan\n  g,Clang>>:COMPILING_CXX_WITH_CLANG>\n```", "```cpp\n    target_compile_definitions(myapp PRIVATE \n     $<$<COMPILE_LANG_AND_ID:CXX,AppleClang,Clang>:CXX_CLAN\n      G>\n     $<$<COMPILE_LANG_AND_ID:CXX,Intel>:CXX_INTEL>\n     $<$<COMPILE_LANG_AND_ID:C,Clang>:C_CLANG>\n    )\n    ```", "```cpp\n    target_compile_options(myapp\n      PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>\n    )\n    ```", "```cpp\ntarget_compile_options(tgt $<$<CONFIG:DEBUG>:-ginline-\n  points>)\n```", "```cpp\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n     target_compile_definitions(myProject PRIVATE LINUX=1)\nendif()\n```", "```cpp\ntarget_compile_definitions(myProject PRIVATE\n  $<$<CMAKE_SYSTEM_NAME:LINUX>:LINUX=1>)\n```", "```cpp\nadd_library(enable_rtti INTERFACE)\ntarget_compile_options(enable_rtti INTERFACE\n  $<$<OR:$<COMPILER_ID:GNU>,$<COMPILER_ID:Clang>>:-rtti>\n)\n```", "```cpp\nset(myvar \"small text\")\nset(myvar2 \"small > text\")\nfile(GENERATE OUTPUT nesting CONTENT\n  \"1 $<PLATFORM_ID>\n  2 $<UPPER_CASE:$<PLATFORM_ID>>\n  3 $<UPPER_CASE:hello world>\n  4 $<UPPER_CASE:${myvar}>\n  5 $<UPPER_CASE:${myvar2}>\n\")\n```", "```cpp\n# cat nesting\n1 Linux\n  2 LINUX\n  3 HELLO WORLD\n  4 SMALL TEXT\n  5 SMALL  text>\n```", "```cpp\nfile(GENERATE OUTPUT boolean CONTENT\n  \"1 $<0:TRUE>\n  2 $<0:TRUE,FALSE> (won't work)\n  3 $<1:TRUE,FALSE>\n  4 $<IF:0,TRUE,FALSE>\n  5 $<IF:0,TRUE,>\n\")\n```", "```cpp\n# cat boolean\n1\n  2  (won't work)\n  3 TRUE,FALSE\n  4 FALSE\n  5\n```"]