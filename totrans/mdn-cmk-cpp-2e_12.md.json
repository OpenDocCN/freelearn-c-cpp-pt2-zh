["```cpp\ncmake -B <build tree> -S <source tree>\ncmake --build <build tree> \n```", "```cpp\nclang-format -i --style=LLVM filename1.cpp filename2.cpp \n```", "```cpp\nfunction(Format target directory)\n  find_program(CLANG-FORMAT_PATH clang-format REQUIRED)\n  set(EXPRESSION h hpp hh c cc cxx cpp)\n  list(TRANSFORM EXPRESSION PREPEND \"${directory}/*.\")\n  file(GLOB_RECURSE SOURCE_FILES FOLLOW_SYMLINKS\n       LIST_DIRECTORIES false ${EXPRESSION}\n  )\n  add_custom_command(TARGET ${target} PRE_BUILD COMMAND\n    ${CLANG-FORMAT_PATH} -i --style=file ${SOURCE_FILES}\n  )\nendfunction() \n```", "```cpp\n- CMakeLists.txt\n- .clang-format\n- cmake\n  |- Format.cmake\n- src\n  |- CMakeLists.txt\n  |- header.h\n  |- main.cpp \n```", "```cpp\ncmake_minimum_required(VERSION 3.26)\nproject(Formatting CXX)\nenable_testing()\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\nadd_subdirectory(src bin) \n```", "```cpp\nadd_executable(main main.cpp)\ninclude(Format)\nFormat(main .) \n```", "```cpp\nint unused() { return 2 + 2; } \n```", "```cpp\n#include <iostream>\n                               using namespace std;\n                       int main() {\n      cout << \"Hello, world!\" << endl;\n                                          } \n```", "```cpp\nBasedOnStyle: Google\nColumnLimit: 140\nUseTab: Never\nAllowShortLoopsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false \n```", "```cpp\nint unused() {\n  return 2 + 2;\n} \n```", "```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello, world!\" << endl;\n} \n```", "```cpp\nset(CMAKE_CXX_CLANG_TIDY /usr/bin/clang-tidy-3.9;-checks=*) \n```", "```cpp\nfunction(AddClangTidy target)\n  find_program(CLANG-TIDY_PATH clang-tidy REQUIRED)\n  set_target_properties(${target}\n    PROPERTIES CXX_CLANG_TIDY\n    \"${CLANG-TIDY_PATH};-checks=*;--warnings-as-errors=*\"\n  )\nendfunction() \n```", "```cpp\nadd_library(sut STATIC calc.cpp run.cpp)\ntarget_include_directories(sut PUBLIC .)\nadd_executable(bootstrap bootstrap.cpp)\ntarget_link_libraries(bootstrap PRIVATE sut)\ninclude(ClangTidy)\nAddClangTidy(sut) \n```", "```cpp\n[  6%] Building CXX object bin/CMakeFiles/sut.dir/calc.cpp.o\n/root/examples/ch12/04-clang-tidy/src/calc.cpp:3:11: warning: method 'Sum' can be made static [readability-convert-member-functions-to-static]\nint Calc::Sum(int a, int b) {\n          ^\n[ 12%] Building CXX object bin/CMakeFiles/sut.dir/run.cpp.o\n/root/examples/ch12/04-clang-tidy/src/run.cpp:1:1: warning: #includes are not sorted properly [llvm-include-order]\n#include <iostream>\n^        ~~~~~~~~~~\n/root/examples/ch12/04-clang-tidy/src/run.cpp:3:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]\nusing namespace std;\n^\n/root/examples/ch12/04-clang-tidy/src/run.cpp:6:3: warning: initializing non-owner 'Calc *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]\n  auto c = new Calc();\n  ^ \n```", "```cpp\nvalgrind [valgrind-options] tested-binary [binary-options] \n```", "```cpp\nvalgrind --tool=memcheck tested-binary \n```", "```cpp\ncmake --build <build-tree> -t valgrind \n```", "```cpp\nfunction(AddValgrind target)\n  find_program(VALGRIND_PATH valgrind REQUIRED)\n  add_custom_target(valgrind\n    COMMAND ${VALGRIND_PATH} --leak-check=yes\n            $<TARGET_FILE:${target}>\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\nendfunction() \n```", "```cpp\n# ...\nadd_executable(unit_tests calc_test.cpp run_test.cpp)\n# ...\n**include****(Valgrind)**\n**AddValgrind****(unit_tests)** \n```", "```cpp\n# cmake -B <build tree> -S <source tree> -DCMAKE_BUILD_TYPE=Debug\n# cmake --build <build-tree> -t valgrind \n```", "```cpp\n[100%] Built target unit_tests\n==954== Memcheck, a memory error detector\n==954== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==954== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==954== Command: ./unit_tests \n```", "```cpp\n[==========] Running 3 tests from 2 test suites.\n[----------] Global test environment set-up.\n...\n[==========] 3 tests from 2 test suites ran. (42 ms total)\n[  PASSED  ] 3 tests. \n```", "```cpp\n==954==\n==954== HEAP SUMMARY:\n==954==     in use at exit: 1 bytes in 1 blocks\n==954==   total heap usage: 209 allocs, 208 frees, 115,555 bytes allocated \n```", "```cpp\n==954== 1 bytes in 1 blocks are definitely lost in loss record 1 of 1\n==954==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\n==954==    by 0x114FC5: run() (run.cpp:6)\n==954==    by 0x1142B9: RunTest_RunOutputsCorrectEquations_Test::TestBody() (run_test.cpp:14) \n```", "```cpp\n==954== LEAK SUMMARY:\n==954==    definitely lost: 1 bytes in 1 blocks\n==954==    indirectly lost: 0 bytes in 0 blocks\n==954==      possibly lost: 0 bytes in 0 blocks\n==954==    still reachable: 0 bytes in 0 blocks\n==954==         suppressed: 0 bytes in 0 blocks\n==954==\n==954== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0) \n```", "```cpp\n#include <iostream>\n#include \"calc.h\"\nusing namespace std;\nint run() {\n  **auto** **c =** **new****Calc****();**\n  cout << \"2 + 2 = \" << c->Sum(2, 2) << endl;\n  cout << \"3 * 3 = \" << c->Multiply(3, 3) << endl;\n  return 0;\n} \n```", "```cpp\nfunction(AddMemcheck target)\n  include(FetchContent)\n  FetchContent_Declare(\n   memcheck-cover\n   GIT_REPOSITORY https://github.com/Farigh/memcheck-cover.git\n   GIT_TAG        release-1.2\n  )\n  FetchContent_MakeAvailable(memcheck-cover)\n  set(MEMCHECK_PATH ${memcheck-cover_SOURCE_DIR}/bin) \n```", "```cpp\n add_custom_target(memcheck\n    COMMAND ${MEMCHECK_PATH}/memcheck_runner.sh -o\n      \"${CMAKE_BINARY_DIR}/valgrind/report\"\n      -- $<TARGET_FILE:${target}>\n    COMMAND ${MEMCHECK_PATH}/generate_html_report.sh\n      -i \"${CMAKE_BINARY_DIR}/valgrind\"\n      -o \"${CMAKE_BINARY_DIR}/valgrind\"\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  )\nendfunction() \n```", "```cpp\ninclude(Memcheck)\nAddMemcheck(unit_tests) \n```", "```cpp\n# cmake -B <build tree> -S <source tree> -DCMAKE_BUILD_TYPE=Debug\n# cmake --build <build-tree> -t memcheck \n```"]