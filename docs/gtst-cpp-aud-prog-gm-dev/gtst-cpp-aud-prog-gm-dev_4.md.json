["```cpp\nsystem->createSound(\"explosion.wav\", FMOD_3D, 0, &sound);\n```", "```cpp\nFMOD_VECTOR position = { 3.0f, 4.0f, 2.0f };\nFMOD_VECTOR velocity = { 1.0f, 0.0f, 0.0f };\nchannel->set3DAttributes(&position, &velocity);\n```", "```cpp\nFMOD_VECTOR velocity;\nvelocity.x = (position.x - lastPosition.x) * elapsed;\nvelocity.y = (position.y - lastPosition.y) * elapsed;\nvelocity.z = (position.z - lastPosition.z) * elapsed;\n```", "```cpp\nFMOD_VECTOR direction = { 1.0f, 2.0f, 3.0f };\nchannel->set3DConeOrientation(&direction);\nchannel->set3DConeSettings(30.0f, 60.0f, 0.5f);\n```", "```cpp\nchannel->set3DMinMaxDistance(1.0f, 10000.0f);\n```", "```cpp\nvolume = min / distance;\n```", "```cpp\nif (distance <= min) volume = 1.0\nelse if (distance >= max) volume = 0.0\nelse volume = (distance - min) / (max - min);\n```", "```cpp\nFMOD_VECTOR pos = { 3.0f, 4.0f, 2.0f };\nFMOD_VECTOR vel = { 1.0f, 0.0f, 0.0f };\nFMOD_VECTOR forward = { 1.0f, 0.0f, 0.0f };\nFMOD_VECTOR up = { 0.0f, 1.0f, 0.0f };\nsystem->set3DListenerAttributes(0, &pos, &vel, &forward, &up);\n```", "```cpp\nFMOD::Reverb* reverb;\nsystem->createReverb(&reverb);\n```", "```cpp\nreverb->setActive(false);       // Disable temporarily\nreverb->release();              // Destroy reverb\n```", "```cpp\nFMOD_REVERB_PROPERTIES properties = FMOD_PRESET_CONCERTHALL;\nreverb->setProperties(&properties);\n```", "```cpp\nFMOD_VECTOR position = { 10.0f, 0.0f, 0.0f };\nreverb->set3DAttributes(&position, 10.0f, 20.0f);\n```", "```cpp\nFMOD_REVERB_PROPERTIES properties = FMOD_PRESET_OFF;\nsystem->setReverbAmbientProperties(&properties);\n```", "```cpp\nFMOD::Geometry* geometry;\nsystem->createGeometry(numTriangles, numVertices, &geometry);\n```", "```cpp\nFMOD_VECTOR vertices[3]; // Fill with triangle vertices\nint polygonIndex; // Gets an index for the new polygon\ngeometry->addPolygon(0.5f, 0.5f, false, 3, vertices, &polygonIndex);\n```", "```cpp\nFMOD::DSP* dsp;\nsystem->createDSPByType(FMOD_DSP_TYPE_ECHO, &dsp);\n```", "```cpp\nchannel->addDSP(dsp, 0);\n```", "```cpp\ndsp->setParameter(FMOD_DSP_ECHO_DECAYRATIO, 0.75f);\n```", "```cpp\n// Play at half speed\nfloat amount = 0.5f;\n\n// Modify frequency which changes both speed and pitch\nfloat frequency;\nchannel->getFrequency(&frequency);\nchannel->setFrequency(frequency * amount);\n\n// Create a pitch shift DSP to get pitch back to normal\n// by applying the inverse amount\nFMOD::DSP* dsp;\nsystem->createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &dsp);\ndsp->setParameter(FMOD_DSP_PITCHSHIFT_PITCH, 1.0f / amount);\ndsp->setParameter(FMOD_DSP_PITCHSHIFT_FFTSIZE, 4096);\n\n// Now only the speed will change\nchannel->addDSP(dsp, 0);\n```", "```cpp\nFMOD::DSP* distortion;\nsystem->createDSPByType(FMOD_DSP_TYPE_DISTORTION, &distortion);\ndistortion->setParameter(FMOD_DSP_DISTORTION_LEVEL, 0.85f);\n\nFMOD::DSP* highpass;\nsystem->createDSPByType(FMOD_DSP_TYPE_HIGHPASS, &highpass);\nhighpass->setParameter(FMOD_DSP_HIGHPASS_CUTOFF, 2000.0f);\n\nchannel->addDSP(distortion, 0);\nchannel->addDSP(highpass, 0);\n```"]