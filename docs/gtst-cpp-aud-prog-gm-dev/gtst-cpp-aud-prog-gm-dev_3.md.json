["```cpp\nFMOD::Channel* channel;\nsystem->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);\n```", "```cpp\nchannel->stop();\n```", "```cpp\n// Pause the sound\nchannel->setPaused(true);\n// Resume the sound\nchannel->setPaused(false);\n```", "```cpp\nvoid TogglePaused(FMOD::Channel* channel) {\n  bool paused;\n  channel->getPaused(&paused);\n  channel->setPaused(!paused);\n}\n```", "```cpp\nchannel->setPosition(0, FMOD_TIMEUNIT_MS);\n```", "```cpp\n// Repeat endlessly\nchannel->setLoopCount(-1);\n// Play once then, stop\nchannel->setLoopCount(0);\n// Play three times, then stop\nchannel->setLoopCount(2);\n```", "```cpp\nchannel->setVolume(1.0f);\n```", "```cpp\nchannel->setMute(true);\n```", "```cpp\nfloat levels[2] = {0.0f, 1.0f};\nchannel->setInputChannelMix(levels, 2);\n```", "```cpp\nchannel->setFrequency(261.626f);\n```", "```cpp\n#include <math.h>\n\nfloat ChangeOctave(float frequency, float variation) {\n  static float octave_ratio = 2.0f;\n  return frequency * pow(octave_ratio, variation);\n}\nfloat ChangeSemitone(float frequency, float variation) {\n  static float semitone_ratio = pow(2.0f, 1.0f / 12.0f);\n  return frequency * pow(semitone_ratio, variation);\n}\n```", "```cpp\nfloat frequency;\nchannel->getFrequency(&frequency);\nfloat newFrequency = ChangeSemitone(frequency, -3.0f);\nchannel->setFrequency(newFrequency);\n```", "```cpp\nchannel->setPan(-1.0f);\n```", "```cpp\nFMOD::ChannelGroup* musicGroup;\nsystem->createChannelGroup(\"music\", &musicGroup);\n```", "```cpp\nchannel->setChannelGroup(musicGroup);\n```", "```cpp\nchannelGroup->addGroup(anotherGroup);\n```", "```cpp\nFMOD::ChannelGroup* masterGroup;\nsystem->getMasterChannelGroup(&masterGroup);\n```", "```cpp\n// Calls stop on all channels in the group\nchannelGroup->stop();\n// Mute or pause all channels\nchannelGroup->setMute(true);\nchannelGroup->setPaused(true);\n// Halve the volume of all sounds in the group\nchannelGroup->setVolume(0.5f);\n// Double the frequency of all sounds in the group\nchannelGroup->setPitch(2.0f);\n```", "```cpp\n#include <string>\n#include <map>\n#include <fmod.hpp>\n\nclass AudioManager {\n public:\n  AudioManager();\n  ~AudioManager();\n  void Update(float elapsed);\n\n  void LoadSFX(const std::string& path);\n  void LoadSong(const std::string& path);\n\n  void PlaySFX(const std::string& path, \n               float minVolume, float maxVolume,\n               float minPitch, float maxPitch);\n  void PlaySong(const std::string& path);\n\n  void StopSFXs();\n  void StopSongs();\n\n  void SetMasterVolume(float volume);\n  void SetSFXsVolume(float volume);\n  void SetSongsVolume(float volume);\n\n private:\n  typedef std::map<std::string, FMOD::Sound*> SoundMap;\n  enum Category { CATEGORY_SFX, CATEGORY_SONG, CATEGORY_COUNT };\n\n  void Load(Category type, const std::string& path);\n\n  FMOD::System* system;\n  FMOD::ChannelGroup* master;\n  FMOD::ChannelGroup* groups[CATEGORY_COUNT];\n  SoundMap sounds[CATEGORY_COUNT];\n  FMOD_MODE modes[CATEGORY_COUNT];\n\n  FMOD::Channel* currentSong;\n  std::string currentSongPath;\n  std::string nextSongPath;\n\n  enum FadeState { FADE_NONE,  FADE_IN, FADE_OUT };\n  FadeState fade;\n};\n```", "```cpp\nAudioManager::AudioManager() : currentSong(0), fade(FADE_NONE) {\n  // Initialize system\n  FMOD::System_Create(&system);\n  system->init(100, FMOD_INIT_NORMAL, 0);\n\n // Create channels groups for each category\n system->getMasterChannelGroup(&master);\n for(int i = 0; i < CATEGORY_COUNT; ++i) {\n system->createChannelGroup(0, &groups[i]);\n master->addGroup(groups[i]);\n }\n\n // Set up modes for each category\n modes[CATEGORY_SFX] = FMOD_DEFAULT;\n modes[CATEGORY_SONG] = FMOD_DEFAULT | FMOD_CREATESTREAM |\n FMOD_LOOP_NORMAL;\n\n // Seed random number generator for SFXs\n srand(time(0));\n}\n```", "```cpp\nAudioManager::~AudioManager() {\n  // Release sounds in each category\n  SoundMap::iterator iter;\n for(int i = 0; i < CATEGORY_COUNT; ++i) {\n    for (iter = sounds[i].begin(); iter != sounds[i].end(); ++iter)\n      iter->second->release();\n    sounds[i].clear();\n  }\n  // Release system\n  system->release();\n}\n```", "```cpp\nvoid AudioManager::LoadSFX(const std::string& path) {\n  Load(CATEGORY_SFX, path);\n}\nvoid AudioManager::LoadSong(const std::string& path) {\n  Load(CATEGORY_SONG, path);\n}\nvoid AudioManager::Load(Category type, const std::string& path) {\n  if (sounds[type].find(path) != sounds[type].end()) return;\n  FMOD::Sound* sound;\n  system->createSound(path.c_str(), modes[type], 0, &sound);\n  sounds[type].insert(std::make_pair(path, sound));\n}\n```", "```cpp\nvoid AudioManager::PlaySFX(const std::string& path,\n                           float minVolume, float maxVolume,\n                           float minPitch, float maxPitch) {\n  // Try to find sound effect and return if not found\n  SoundMap::iterator sound = sounds[CATEGORY_SFX].find(path);\n  if (sound == sounds[CATEGORY_SFX].end()) return;\n\n  // Calculate random volume and pitch in selected range\n  float volume = RandomBetween(minVolume, maxVolume);\n  float pitch = RandomBetween(minPitch, maxPitch);\n\n  // Play the sound effect with these initial values\n  FMOD::Channel* channel;\n  system->playSound(FMOD_CHANNEL_FREE, sound->second,\n                    true, &channel);\n  channel->setChannelGroup(groups[CATEGORY_SFX]);\n  channel->setVolume(volume);\n  float frequency;\n  channel->getFrequency(&frequency);\n  channel->setFrequency(ChangeSemitone(frequency, pitch));\n  channel->setPaused(false);\n}\n```", "```cpp\n#include <stdlib.h>\n#include <time.h>\n\nfloat RandomBetween(float min, float max) {\n  if(min == max) return min;\n  float n = (float)rand()/(float)RAND_MAX;\n  return min + n * (max - min);\n}\n```", "```cpp\nvoid AudioManager::StopSFXs() {\n  groups[CATEGORY_SFX]->stop();\n}\n```", "```cpp\nFMOD::Channel* currentSong;\nstd::string currentSongPath;\nstd::string nextSongPath;\nenum FadeState { FADE_NONE,  FADE_IN, FADE_OUT };\nFadeState fade;\n```", "```cpp\n    void AudioManager::PlaySong(const std::string& path) {\n      // Ignore if this song is already playing\n      if(currentSongPath == path) return;\n\n      // If a song is playing stop them and set this as the next song\n      if(currentSong != 0) {\n        StopSongs();\n        nextSongPath = path;\n        return;\n      }\n      // Find the song in the corresponding sound map\n      SoundMap::iterator sound = sounds[CATEGORY_SONG].find(path);\n      if (sound == sounds[CATEGORY_SONG].end()) return;\n\n      // Start playing song with volume set to 0 and fade in\n      currentSongPath = path;\n      system->playSound(FMOD_CHANNEL_FREE, \n                        sound->second, true, &currentSong);\n      currentSong->setChannelGroup(groups[CATEGORY_SONG]);\n      currentSong->setVolume(0.0f);\n      currentSong->setPaused(false);\n      fade = FADE_IN;\n    }\n    ```", "```cpp\n    void AudioManager::StopSongs() {\n      if(currentSong != 0) \n        fade = FADE_OUT;\n      nextSongPath.clear();\n    }\n    ```", "```cpp\n    void AudioManager::Update(float elapsed) {\n      const float fadeTime = 1.0f; // in seconds\n      if(currentSong != 0 && fade == FADE_IN) {\n        float volume;\n        currentSong->getVolume(&volume);\n        float nextVolume = volume + elapsed / fadeTime;\n        if(nextVolume >= 1.0f) {\n          currentSong->setVolume(1.0f);\n          fade = FADE_NONE;\n        } else {\n          currentSong->setVolume(nextVolume);\n        }\n      } else if(currentSong != 0 && fade == FADE_OUT) {\n        float volume;\n        currentSong->getVolume(&volume);\n        float nextVolume = volume - elapsed / fadeTime;\n        if(nextVolume <= 0.0f) {\n          currentSong->stop();\n          currentSong = 0;\n          currentSongPath.clear();\n          fade = FADE_NONE;\n        } else {\n          currentSong->setVolume(nextVolume);\n        }\n      } else if(currentSong == 0 && !nextSongPath.empty()) {\n        PlaySong(nextSongPath);\n        nextSongPath.clear();\n      }\n      system->update();\n    }\n    ```", "```cpp\nvoid AudioManager::SetMasterVolume(float volume) {\n  master->setVolume(volume);\n}\nvoid AudioManager::SetSFXsVolume(float volume) {\n  groups[CATEGORY_SFX]->setVolume(volume);\n}\nvoid AudioManager::SetSongsVolume(float volume) {\n  groups[CATEGORY_SONG]->setVolume(volume);\n}\n```"]