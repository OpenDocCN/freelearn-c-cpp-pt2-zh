["```cpp\nFMOD::System* system;\nFMOD::System_Create(&system);\n```", "```cpp\nsystem->init(100, FMOD_INIT_NORMAL, 0);\n```", "```cpp\nsystem->update();\n```", "```cpp\nsystem->release();\n```", "```cpp\nFMOD::Sound* sound;\nsystem->createSound(\"sfx.wav\", FMOD_DEFAULT, 0, &sound);\n```", "```cpp\nFMOD::Sound* stream;\nsystem->createStream(\"song.ogg\", FMOD_DEFAULT, 0, &stream);\n```", "```cpp\nsound->release();\n```", "```cpp\nFMOD::Channel* channel;\nsystem->playSound(FMOD_CHANNEL_FREE, sound, false, &channel);\n```", "```cpp\nsystem->playSound(FMOD_CHANNEL_FREE, sound, false, 0);\n```", "```cpp\nFMOD_RESULT result = system->init(100, FMOD_INIT_NORMAL, 0);\nif (result != FMOD_OK) {\n  // There was an error, do something about it\n}\n```", "```cpp\n#include <iostream>\n#include <fmod_errors.h>\n\nvoid ExitOnError(FMOD_RESULT result) {\n  if (result != FMOD_OK) {\n    std::cout << FMOD_ErrorString(result) << std::endl;\n    exit(-1);\n  }\n}\n```", "```cpp\nExitOnError(system->init(100, FMOD_INIT_NORMAL, 0));\n```", "```cpp\nSimpleAudioManager audio;\naudio.Load(\"explosion.wav\");\naudio.Play(\"explosion.wav\");\n```", "```cpp\n#include <string>\n#include <map>\n#include <fmod.hpp>\n\ntypedef std::map<std::string, FMOD::Sound*> SoundMap;\n\nclass SimpleAudioManager {\n public:\n  SimpleAudioManager();\n  ~SimpleAudioManager();\n  void Update(float elapsed);\n  void Load(const std::string& path);\n  void Stream(const std::string& path);\n  void Play(const std::string& path);\n private:\n  void LoadOrStream(const std::string& path, bool stream);\n  FMOD::System* system;\n  SoundMap sounds;\n};\n```", "```cpp\nSimpleAudioManager::SimpleAudioManager() {\n  FMOD::System_Create(&system);\n  system->init(100, FMOD_INIT_NORMAL, 0);\n}\n```", "```cpp\nvoid SimpleAudioManager::Update(float elapsed) {\n  system->update();\n}\n```", "```cpp\nSimpleAudioManager::~SimpleAudioManager() {\n  // Release every sound object and clear the map\n  SoundMap::iterator iter;\n  for (iter = sounds.begin(); iter != sounds.end(); ++iter)\n    iter->second->release();\n  sounds.clear();\n\n  // Release the system object\n  system->release();\n  system = 0;\n}\n```", "```cpp\nvoid SimpleAudioManager::LoadOrStream(const std::string& path, bool stream) {\n  // Ignore call if sound is already loaded\n  if (sounds.find(path) != sounds.end()) return;\n\n  // Load (or stream) file into a sound object\n  FMOD::Sound* sound;\n  if (stream)\n    system->createStream(path.c_str(), FMOD_DEFAULT, 0, &sound);\n  else\n    system->createSound(path.c_str(), FMOD_DEFAULT, 0, &sound);\n\n  // Store the sound object in the map using the path as key\n  sounds.insert(std::make_pair(path, sound));\n}\n```", "```cpp\nvoid SimpleAudioManager::Load(const std::string& path) {\n  LoadOrStream(path, false);\n}\nvoid SimpleAudioManager::Stream(const std::string& path) {\n  LoadOrStream(path, true);\n}\n```", "```cpp\nvoid SimpleAudioManager::Play(const std::string& path) {\n  // Search for a matching sound in the map\n  SoundMap::iterator sound = sounds.find(path);\n\n  // Ignore call if no sound was found\n  if (sound == sounds.end()) return;\n\n  // Otherwise play the sound\n  system->playSound(FMOD_CHANNEL_FREE, sound->second, false, 0);\n}\n```", "```cpp\n#include <SFML/Window.hpp>\n#include \"SimpleAudioManager.h\"\n\nint main() {\n  sf::Window window(sf::VideoMode(320, 240), \"AudioPlayback\");\n  sf::Clock clock;\n\n  // Place your initialization logic here\n SimpleAudioManager audio;\n audio.Load(\"explosion.wav\");\n\n  // Start the game loop\n  while (window.isOpen()) {\n    // Only run approx 60 times per second\n    float elapsed = clock.getElapsedTime().asSeconds();\n    if (elapsed < 1.0f / 60.0f) continue;\n    clock.restart();\n    sf::Event event;\n    while (window.pollEvent(event)) {\n      // Handle window events\n      if (event.type == sf::Event::Closed) \n        window.close();\n\n      // Handle user input\n      if (event.type == sf::Event::KeyPressed &&\n          event.key.code == sf::Keyboard::Space)\n audio.Play(\"explosion.wav\");\n    }\n    // Place your update and draw logic here\n audio.Update(elapsed);\n  }\n  // Place your shutdown logic here\n  return 0;\n}\n```"]