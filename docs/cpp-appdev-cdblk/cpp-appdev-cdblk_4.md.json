["```cpp\n    #include <windows.h>\n\n    int WINAPI WinMain(HINSTANCE thisInstance,\n                       HINSTANCE prevInstance,\n                       LPSTR     commandLine,\n                       int       cmdShow\n                       )\n    {\n        MessageBox(NULL, \"Hello World!\", \"Title\", MB_OK | MB_ICONINFORMATION);\n        return 0;\n    }\n    ```", "```cpp\nMessageBox(NULL, TEXT(\"holaao valD-\"), TEXT(\"Title\"), MB_OK | MB_ICONINFORMATION);\n```", "```cpp\n#include <windows.h>\n#define ID_BTN_CLICK_ME 100\n// This function is called by the Windows function DispatchMessage()\nLRESULT CALLBACK WindowProcedure (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam);\n\n// Make the class name into a global variable\nTCHAR szClassName[ ] = TEXT(\"CodeBlocksWindowsApp\");\n```", "```cpp\nint WINAPI WinMain (HINSTANCE hThisInstance,\n                    HINSTANCE hPrevInstance,\n                    LPSTR lpszArgument,\n                    int nCmdShow)\n{\n    HWND hwnd;    // This is the handle for our window\n    MSG messages; // Here messages to the application are saved\n    WNDCLASSEX wincl; //Data structure for the windowclass\n\n    // The Window structure\n    wincl.hInstance = hThisInstance;\n    wincl.lpszClassName = szClassName;\n    wincl.lpfnWndProc = WindowProcedure;  // Callback function\n    wincl.style = CS_DBLCLKS; // Catch double-clicks\n    wincl.cbSize = sizeof (WNDCLASSEX);\n\n    // Use default icon and mouse-pointer\n    wincl.hIcon = LoadIcon (NULL, IDI_APPLICATION);\n    wincl.hIconSm = LoadIcon (NULL, IDI_APPLICATION);\n    wincl.hCursor = LoadCursor (NULL, IDC_ARROW);\n    wincl.lpszMenuName = NULL;  /* No menu */\n    wincl.cbClsExtra = 0;  // No extra bytes after the window class\n    wincl.cbWndExtra = 0;  // structure or the window instance\n    // Use Windows's default colour as the background of the window\n    wincl.hbrBackground = (HBRUSH) COLOR_BACKGROUND;\n\n    // Register the window class, and if it fails quit the program\n    if (!RegisterClassEx (&wincl))\n        return 0;\n\n    // The class is registered, let's create the window\n    hwnd = CreateWindowEx (\n           0,            // Extended possibilites for variation\n           szClassName,         // Classname\n           TEXT(\"App for Windows\"), // Title Text\n           WS_OVERLAPPEDWINDOW, // default window\n           CW_USEDEFAULT,  // Windows decides the position\n           CW_USEDEFAULT,  // where the window ends up on the screen\n           300,            // The programs width\n           250,            // and height in pixels\n           HWND_DESKTOP,   // The window is a child-window to desktop\n           NULL,           // No menu\n           hThisInstance,  // Program Instance handler\n           NULL            // No Window Creation data\n           );\n\n    // Make the window visible on the screen\n    ShowWindow (hwnd, nCmdShow);\n\n    // Run the message loop. It will run until GetMessage() returns 0\n    while (GetMessage (&messages, NULL, 0, 0))\n    {\n        // Translate virtual-key messages into character messages\n        TranslateMessage(&messages);\n        // Send message to WindowProcedure\n        DispatchMessage(&messages);\n    }\n\n    // Return value of PostQuitMessage()\n    return messages.wParam;\n}\n```", "```cpp\nLRESULT CALLBACK WindowProcedure (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)\n{switch (message) // handle the messages\n    {\n        case WM_CREATE:\n            CreateWindow(TEXT(\"button\"), TEXT(\"Click Me!\"),                     WS_VISIBLE | WS_CHILD, 20, 50, 80, 25, hwnd, (HMENU) ID_BTN_CLICK_ME, NULL, NULL);\n            break;\n        case WM_COMMAND:\n            if (LOWORD(wParam) == ID_BTN_CLICK_ME) {\n                MessageBox(hwnd, TEXT(\"Hello World!\"),             TEXT(\"Information\"), MB_OK | MB_ICONINFORMATION);\n            }\n            break;\n        case WM_DESTROY:\n            PostQuitMessage (0); // send a WM_QUIT to the message queue\n            break;\n        default:  // for messages that we don't deal with\n            return DefWindowProc (hwnd, message, wParam, lParam);\n    }\n\n    return 0;\n}\n```", "```cpp\n    #ifndef APP11MAIN_H\n    #define APP11MAIN_H\n\n    #include <wx/wx.h>\n    #include <wx/sizer.h>\n    #include <wx/button.h>\n\n    class App11Frame: public wxFrame {\n        public:\n            App11Frame(wxFrame *frame, const wxString& title);\n            ~App11Frame();\n        private:\n            static const long idBtnClickMe;\n            wxBoxSizer* m_boxSizerMain;\n            wxButton* m_btnClickMe;\n            void OnClickMe(wxCommandEvent& event);\n            void OnClose(wxCloseEvent& event);\n            DECLARE_EVENT_TABLE()\n    };\n    ```", "```cpp\n    #include \"App11Main.h\"\n    const long App11Frame::idBtnClickMe = ::wxNewId();\n\n    BEGIN_EVENT_TABLE(App11Frame, wxFrame)\n        EVT_BUTTON(idBtnClickMe, App11Frame::OnClickMe)\n        EVT_CLOSE(App11Frame::OnClose)\n    END_EVENT_TABLE()\n\n    App11Frame::App11Frame(wxFrame *frame, const wxString& title)\n        : wxFrame(frame, -1, title)\n    {\n        this->SetSizeHints(wxDefaultSize, wxDefaultSize);\n        m_boxSizerMain = new wxBoxSizer(wxHORIZONTAL);\n        m_btnClickMe = new wxButton(this, idBtnClickMe, _T(\"Click Me!\"),\n                                    wxDefaultPosition, wxDefaultSize, 0);\n        m_boxSizerMain->Add(m_btnClickMe, 0, wxALL, 5);\n        this->SetSizer(m_boxSizerMain);\n        this->Layout();\n    }\n\n    App11Frame::~App11Frame() {\n    }\n\n    void App11Frame::OnClose(wxCloseEvent &event) {\n        Destroy();\n    }\n\n    void App11Frame::OnClickMe(wxCommandEvent& event) {\n        wxMessageBox(_T(\"Hello World!\"), _T(\"Information\"), wxOK | wxICON_INFORMATION, this);\n    }\n    ```", "```cpp\n    #ifndef APP11APP_H\n    #define APP11APP_H\n\n    #include <wx/app.h>\n\n    class App11App : public wxApp\n    {\n        public:\n            virtual bool OnInit();\n    };\n\n    #endif // APP11APP_H\n    ```", "```cpp\n    #include \"App11App.h\"\n    #include \"App11Main.h\"\n\n    IMPLEMENT_APP(App11App);\n\n    bool App11App::OnInit() {\n        App11Frame* frame = new App11Frame(0L, _(\"wxWidgets Application Template\"));\n        #ifdef __WXMSW__\n        frame->SetIcon(wxICON(aaaa)); // To Set App Icon\n        #endif\n        frame->Show();\n\n        return true;\n    }\n    ```", "```cpp\n    CPP=g++\n    CXXFLAGS=-c $(shell wx-config --cflags)\n    LDFLAGS=$(shell wx-config --libs)\n    SOURCES=App11Main.cpp App11App.cpp\n\n    App11: App11Main.o App11App.o\n      $(CPP) $(LDFLAGS) App11Main.o App11App.o -o App11\n\n    App11Main.o:\n      $(CPP) $(CXXFLAGS) App11Main.cpp\n\n    App11App.o:\n      $(CPP) $(CXXFLAGS) App11App.cpp\n\n    clean:\n      rm -rf *.o App11\n    ```", "```cpp\n    [biplab@centos App11]$ make\n\n    ```", "```cpp\n    [biplab@centos App11]$ ./App11\n\n    ```", "```cpp\n    int result;\n    wxTextFile textFile;\n    wxString fileContent;\n\n    result = NotePadFileDialog->ShowModal();\n    if (result == wxID_OK) {\n      if (textFile.Open(NotePadFileDialog->GetPath())) {\n        for (size_t i = 0; i < textFile.GetLineCount(); i++) {\n          fileContent << textFile.GetLine(i) << _T(\"\\r\\n\");\n        }\n        textFile.Close();\n        TextCtrlNotePad->SetLabel(fileContent);\n      }\n    }\n    ```", "```cpp\n    #include <wx/textfile.h>\n\n    ```", "```cpp\n    int result;\n\n    result = NotePadFileDialog->ShowModal();\n    if (result == wxID_OK) {\n      if (!TextCtrlNotePad->SaveFile(NotePadFileDialog->GetPath())) {\n        wxMessageBox(_T(\"Couldn't save \") + NotePadFileDialog->GetPath(),\n            _T(\"Error\"), wxOK | wxICON_ERROR);\n      }\n    }\n    ```"]