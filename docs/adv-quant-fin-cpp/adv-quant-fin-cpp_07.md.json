["```cpp\nSTEP 1) to the output of the premium value (STEP 6).\n```", "```cpp\n for CR1_main.cpp file:\n```", "```cpp\n// CR2_main.cpp\n\n// It requires CR2_source.cpp\n#include \"CR2.h\"\n\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  cout << \"\\n *** START CR2: Credit Default Swap *** \\n\";\n\n  // STEP 1: INPUT PARAMETERS\n\n  auto T = 1.0; // maturity\n  auto N = 4; // number of payments per year\n  auto notional = 100.0; // notional\n  auto r = 0.05; // risk free interest rate\n  auto h = 0.01; // hazard rate\n  auto rr = 0.50; // recovery rate\n\n  // Construct a CR2 object from the input parameters:\n\n  CR2 cr2(T, N, notional, r, h, rr);\n\n  // Obtain the value of premium from member function \"get_premium()\":\n\n  auto cr2_results = cr2.get_pv_premium_and_default_legs_and_cds_spread();\n\n  // STEP 6: OUTPUT RESULTS\n\n  cout << \"\\n PV premium leg =  \"\n    << cr2_results.pv_premium_leg << \"\\n\";\n\n  cout << \"\\n PV default leg =  \"\n    << cr2_results.pv_default_leg << \" \\n\";\n\n  cout << \"\\n cds_spread =  \"\n    << cr2_results.cds_spread_in_bps << \"  bps \\n\";\n\n  cout << \"\\n *** END CR2: Credit Default Swap *** \\n\";\n\n  return 0;\n}\n```", "```cpp\n CR1_source.cpp file:\n```", "```cpp\n// CR2_source.cpp\n\n#include \"CR2.H\"\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nCR2_results CR2::find_pv_premium_and_default_legs_and_cds_spread() const\n{\n  auto pv_premium_leg = 0.0; // sum premium leg\n  auto pv_default_leg = 0.0; // sum default leg\n  auto t = 0.0; // current time\n  auto cds_spread = 0.0;\n  auto array_size = static_cast<int>(N*T + 1);\n  vector <double> DF(array_size);\n  vector <double> P(array_size);\n  P[0] = 1.0;\n  auto dt = T / N;\n\n  // STEP 2: LOOP FOR ALL PAYMENTS\n  for (int j = 1; j < array_size; j++)\n  {\n    t = j*dt;\n    DF[j] = exp(-r*t);\n    P[j] = exp(-h*t);\n\n    // STEP 3: COMPUTE PREMIUM PAYMENTS\n    pv_premium_leg = pv_premium_leg + DF[j] * notional*dt*P[j];\n\n    // STEP 4: COMPUTE DEFAULT PAYMENTS\n    pv_default_leg = pv_default_leg + DF[j] * (1.0 - rr)*notional*(P[j - 1] - P[j]);\n  }\n\n  // STEP 5: COMPUTE CDS SPREAD\n  cds_spread = pv_default_leg / pv_premium_leg;\n\n  // Composing the CR2_results class:\n  CR2_results results;\n  results.pv_premium_leg = pv_premium_leg;\n  results.pv_default_leg = pv_default_leg;\n  results.cds_spread_in_bps = cds_spread * 10000;\n  return results;\n}\n```", "```cpp\nCR1.h, please refer to the code in the code bundle.\n```", "```cpp\nWe will consider the example where the contract duration is one year, quarterly payments (that is, four payments per year), notional = 100 million USD, risk-free rate = 5 percent pa, hazard rate of underlying = 1 percent pa, recovery rate = 50 percent. For these inputs, the CDS spread is 50.0626 basis points.\n```", "```cpp\nfor CR2_main.cpp file:\n```", "```cpp\n// CR2_main.cpp\n\n// It requires CR2_source.cpp\n#include \"CR2.h\"\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  cout << \"\\n *** START CR2: Credit Default Swap *** \\n\";\n\n  // STEP 1: INPUT PARAMETERS\n  auto T = 1.0; // maturity\n  auto N = 4; // number of payments per year\n  auto notional = 100.0; // notional\n  auto r = 0.05; // risk free interest rate\n  auto h = 0.01; // hazard rate\n  auto rr = 0.50; // recovery rate\n\n  // Construct a CR2 object from the input parameters:\n  CR2 cr2(T, N, notional, r, h, rr);\n\n  // Obtain the value of premium from member function \"get_premium()\":\n\n  auto cr2_results = cr2.get_pv_premium_and_default_legs_and_cds_spread();\n\n  // STEP 6: OUTPUT RESULTS\n  cout << \"\\n PV premium leg =  \"\n    << cr2_results.pv_premium_leg << \"\\n\";\n\n  cout << \"\\n PV default leg =  \"\n    << cr2_results.pv_default_leg << \" \\n\";\n\n  cout << \"\\n cds_spread =  \"\n    << cr2_results.cds_spread_in_bps << \"  bps \\n\";\n\n  cout << \"\\n *** END CR2: Credit Default Swap *** \\n\";\n\n  return 0;\n}\n```", "```cpp\n// CR2_source.cpp\n\n#include \"CR2.H\"\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nCR2_results CR2::find_pv_premium_and_default_legs_and_cds_spread() const\n{\n  auto pv_premium_leg = 0.0; // sum premium leg\n  auto pv_default_leg = 0.0; // sum default leg\n  auto t = 0.0; // current time\n  auto cds_spread = 0.0;\n  auto array_size = static_cast<int>(N*T + 1);\n  vector <double> DF(array_size);\n  vector <double> P(array_size);\n\n  P[0] = 1.0;\n\n  auto dt = T / N;\n\n  // STEP 2: LOOP FOR ALL PAYMENTS\n  for (int j = 1; j < array_size; j++)\n  {\n    t = j*dt;\n    DF[j] = exp(-r*t);\n    P[j] = exp(-h*t);\n\n    // STEP 3: COMPUTE PREMIUM PAYMENTS\n    pv_premium_leg = pv_premium_leg + DF[j] * notional*dt*P[j];\n\n    // STEP 4: COMPUTE DEFAULT PAYMENTS\n    pv_default_leg = pv_default_leg + DF[j] * (1.0 - rr)*notional*(P[j - 1] - P[j]);\n  }\n\n  // STEP 5: COMPUTE CDS SPREAD\n  cds_spread = pv_default_leg / pv_premium_leg;\n\n  // Composing the CR2_results class:\n  CR2_results results;\n  results.pv_premium_leg = pv_premium_leg;\n  results.pv_default_leg = pv_default_leg;\n  results.cds_spread_in_bps = cds_spread * 10000;\n  return results;\n}\n```", "```cpp\nCR2.h, please refer to the code in the code bundle.\n```"]