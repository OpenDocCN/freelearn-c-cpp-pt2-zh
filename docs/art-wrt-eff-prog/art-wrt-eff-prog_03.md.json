["```cpp\nbool compare(const char* s1, const char* s2, unsigned int l);\nint main() {\n\u00a0\u00a0constexpr unsigned int L = \u2026, N = \u2026;\n\u00a0\u00a0unique_ptr<char[]> s(new char[L]);\n\u00a0\u00a0vector<const char*> vs(N);\n\u00a0\u00a0\u00a0\u00a0\u2026 prepare the string \u2026 \n\u00a0\u00a0size_t count = 0;\n\u00a0\u00a0system_clock::time_point t1 = system_clock::now();\n\u00a0\u00a0std::sort(vs.begin(), vs.end(), \n\u00a0\u00a0\u00a0\u00a0\u00a0[&](const char* a, const char* b) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++count;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return compare(a, b, L);\n\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0system_clock::time_point t2 = system_clock::now();\n\u00a0\u00a0cout << \"Sort time: \" << \n\u00a0\u00a0\u00a0\u00a0\u00a0duration_cast<milliseconds>(t2 - t1).count() << \n\u00a0\u00a0\u00a0\u00a0\u00a0\"ms (\" << count << \" comparisons)\" << endl;\n}\n```", "```cpp\n#include <algorithm>\n#include <chrono>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#include <memory>\n#include <random>\n#include <vector>\nusing std::chrono::duration_cast;\nusing std::chrono::milliseconds;\nusing std::chrono::system_clock;\nusing std::cout;\nusing std::endl;\nusing std::minstd_rand;\nusing std::unique_ptr;\nusing std::vector;\n```", "```cpp\nbool compare(const char* s1, const char* s2, unsigned int l) {\n\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n\u00a0\u00a0}\n\u00a0\u00a0return false;\n}\n```", "```cpp\n\u00a0\u00a0constexpr unsigned int L = 1 << 18, N = 1 << 14; \n\u00a0\u00a0unique_ptr<char[]> s(new char[L]);\n\u00a0\u00a0vector<const char*> vs(N);\n\u00a0\u00a0minstd_rand rgen;\n\u00a0\u00a0::memset(s.get(), 'a', N*sizeof(char));\n\u00a0\u00a0for (unsigned int i = 0; i < L/1024; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0s[rgen() % (L - 1)] = 'a' + (rgen() % ('z' - 'a' + 1));\n\u00a0\u00a0}\n\u00a0\u00a0s[L-1] = 0;\n\u00a0\u00a0for (unsigned int i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0vs[i] = &s[rgen() % (L - 1)];\n\u00a0\u00a0}\n```", "```cpp\nbool compare(const char* s1, const char* s2, unsigned int l) {\n\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n\u00a0\u00a0}\n\u00a0\u00a0return false;\n}\n```", "```cpp\nbool compare(const char* s1, const char* s2) {\n\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0;; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n\u00a0\u00a0}\n\u00a0\u00a0return false;\n}\n```", "```cpp\n bool compare(const char* s1, const char* s2) {\n\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0for (int i1 = 0, i2 = 0;; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n\u00a0\u00a0}\n\u00a0\u00a0return false;\n}\n```", "```cpp\n#include <chrono>\nusing std::chrono::duration_cast;\nusing std::chrono::milliseconds;\nusing std::chrono::system_clock; \n\u00a0\u00a0\u2026 \nauto t0 = system_clock::now();\n\u00a0\u00a0\u2026 do some work \u2026\nauto t1 = system_clock::now();\nauto delta_t = duration_cast<milliseconds>(t1 \u2013 t0);\ncout << \"Time: \" << delta_t.count() << endl;\n```", "```cpp\ntimespec t0, t1;\nclockid_t clock_id = \u2026; // Specific clock\nclock_gettime(clock_id, &t0);\n\u00a0\u00a0\u00a0\u2026 do some work \u2026\u00a0\u00a0\nclock_gettime(clock_id, &t1);\ndouble delta_t = t1.tv_sec \u2013 t0.tv_sec +\n\u00a0\u00a0\u00a0\u00a0\u00a01e-9*(t1.tv_nsec \u2013 t0.tv_nsec);\n```", "```cpp\ndouble duration(timespec a, timespec b) {\n\u00a0\u00a0return a.tv_sec - b.tv_sec + 1e-9*(a.tv_nsec - b.tv_nsec);\n}\n\u00a0\u00a0\u00a0\u2026\n{\n\u00a0\u00a0timespec rt0, ct0, tt0;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt0);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct0);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt0);\n\u00a0\u00a0constexpr double X = 1e6;\n\u00a0\u00a0double s = 0;\n\u00a0\u00a0for (double x = 0; x < X; x += 0.1) s += sin(x);\n\u00a0\u00a0timespec rt1, ct1, tt1;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt1);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct1);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt1);\n\u00a0\u00a0cout << \"Real time: \" << duration(rt1, rt0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"CPU time: \" << duration(ct1, ct0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Thread time: \" << duration(tt1, tt0) << \"s\" <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endl;\n}\n```", "```cpp\nReal time: 0.3717s, CPU time: 0.3716s, Thread time: 0.3716s\n```", "```cpp\n{\n\u00a0\u00a0timespec rt0, ct0, tt0;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt0);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct0);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt0);\n\u00a0\u00a0sleep(1);\n\u00a0\u00a0timespec rt1, ct1, tt1;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt1);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct1);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt1);\n\u00a0\u00a0cout << \"Real time: \" << duration(rt1, rt0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"CPU time: \" << duration(ct1, ct0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Thread time: \" << duration(tt1, tt0) << \"s\" <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endl;\n}\n```", "```cpp\nReal time: 1.000s, CPU time: 3.23e-05s, Thread time: 3.32e-05s\n```", "```cpp\n{\n\u00a0\u00a0timespec rt0, ct0, tt0;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt0);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct0);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt0);\n\u00a0\u00a0constexpr double X = 1e6;\n\u00a0\u00a0double s = 0;\n\u00a0\u00a0auto f = std::async(std::launch::async, \n\u00a0\u00a0\u00a0\u00a0\u00a0[&]{ for (double x = 0; x < X; x += 0.1) s += sin(x); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0f.wait();\n\u00a0\u00a0timespec rt1, ct1, tt1;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt1);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct1);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt1);\n\u00a0\u00a0cout << \"Real time: \" << duration(rt1, rt0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"CPU time: \" << duration(ct1, ct0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Thread time: \" << duration(tt1, tt0) << \"s\" <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endl;\n}\n```", "```cpp\nReal time: 0.3774s, CPU time: 0.377s, Thread time: 7.77e-05s\n```", "```cpp\n{\n\u00a0\u00a0timespec rt0, ct0, tt0;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt0);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct0);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt0);\n\u00a0\u00a0constexpr double X = 1e6;\n\u00a0\u00a0double s1 = 0, s2 = 0;\n\u00a0\u00a0auto f = std::async(std::launch::async, \n\u00a0\u00a0\u00a0\u00a0\u00a0[&]{ for (double x = 0; x < X; x += 0.1) s1 += sin(x);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0for (double x = 0; x < X; x += 0.1) s2 += sin(x);\n\u00a0\u00a0f.wait();\n\u00a0\u00a0timespec rt1, ct1, tt1;\n\u00a0\u00a0clock_gettime(CLOCK_REALTIME, &rt1);\n\u00a0\u00a0clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ct1);\n\u00a0\u00a0clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tt1);\n\u00a0\u00a0cout << \"Real time: \" << duration(rt1, rt0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"CPU time: \" << duration(ct1, ct0) << \"s, \"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Thread time: \" << duration(tt1, tt0) << \"s\" <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0endl;\n}\n```", "```cpp\nReal time: 0.5327s, CPU time: 1.01s, Thread time: 0.5092s\n```", "```cpp\nif (s1 == s2) return false;\n```", "```cpp\nfor (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n```", "```cpp\nstd::sort(vs.begin(), vs.end(), \n\u00a0\u00a0[&](const char* a, const char* b) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++count; return compare1(a, b, L); });\nstd::sort(vs.begin(), vs.end(), \n\u00a0\u00a0[&](const char* a, const char* b) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++count; return compare2(a, b, L); });\n```", "```cpp\nbool compare1(const char* s1, const char* s2, unsigned int l) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int res = compare(s1[i1], s2[i2]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (res != 0) return res > 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n}\nbool compare2(const char* s1, const char* s2, unsigned int l) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int res = compare(s1[i1], s2[i2]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (res != 0) return res < 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n}\n```", "```cpp\nint compare(char c1, char c2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c1 > c2) return 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c1 < c2) return -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\ngoogle-pprof --pdf ./example prof.data > prof.pdf\n```", "```cpp\nbool compare(const char* s1, const char* s2, unsigned int l) {\n\u00a0\u00a0if (s1 == s2) return false;\n\u00a0\u00a0for (unsigned int i1 = 0, i2 = 0; i1 < l; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n\u00a0\u00a0}\n\u00a0\u00a0return false;\n}\nint main() {\n\u00a0\u00a0\u2026 \n\u00a0\u00a0size_t count = 0;\n\u00a0\u00a0std::sort(vs.begin(), vs.end(), \n\u00a0\u00a0\u00a0\u00a0\u00a0[&](const char* a, const char* b) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++count; return compare(a, b, L); });\n}\n```", "```cpp\nif (s1[i1] != s2[i2]) return s1[i1] > s2[i2];\n```", "```cpp\nbool compare1(const char* s1, const char* s2) {\n\u00a0\u00a0int i1 = 0, i2 = 0;\n\u00a0\u00a0char c1, c2;\n\u00a0\u00a0while (1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c1 = s1[i1]; c2 = s2[i2];\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c1 != c2) return c1 > c2;\n\u00a0\u00a0\u00a0\u00a0\u00a0++i1; ++i2;\n\u00a0\u00a0}\n}\nbool compare2(const char* s1, const char* s2) {\n\u00a0\u00a0unsigned int i1 = 0, i2 = 0;\n\u00a0\u00a0char c1, c2;\n\u00a0\u00a0while (1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c1 = s1[i1]; c2 = s2[i2];\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c1 != c2) return c1 > c2;\n\u00a0\u00a0\u00a0\u00a0\u00a0++i1; ++i2;\n\u00a0\u00a0}\n}\nint main() {\n\u00a0\u00a0constexpr unsigned int N = 1 << 20;\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0system_clock::time_point t0 = system_clock::now();\n\u00a0\u00a0compare1(s.get(), s.get() + N);\n\u00a0\u00a0system_clock::time_point t1 = system_clock::now();\n\u00a0\u00a0compare2(s.get(), s.get() + N);\n\u00a0\u00a0system_clock::time_point t2 = system_clock::now();\n\u00a0\u00a0cout << duration_cast<microseconds>(t1 - t0).count() <<\n\u00a0\u00a0\u00a0\"us \" << duration_cast<microseconds>(t2 - t1).count() <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"us\" << endl;\n}\n```", "```cpp\nint main() {\n\u00a0\u00a0constexpr unsigned int N = 1 << 20;\n\u00a0\u00a0constexpr int NI = 1 << 11;\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0system_clock::time_point t0 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compare1(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t1 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compare2(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t2 = system_clock::now();\n\u00a0\u00a0cout << duration_cast<microseconds>(t1 - t0).count() <<\n\u00a0\u00a0\u00a0\"us \" << duration_cast<microseconds>(t2 - t1).count() <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\"us\" << endl;\n}\n```", "```cpp\nint main() {\n\u00a0\u00a0constexpr unsigned int N = 1 << 20;\n\u00a0\u00a0constexpr int NI = 1 << 11;\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0volatile bool sink;\n\u00a0\u00a0system_clock::time_point t0 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0sink = compare1(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t1 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0sink = compare2(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t2 = system_clock::now();\n\u00a0\u00a0cout << duration_cast<microseconds>(t1 - t0).count() <<\n\u00a0\u00a0\u00a0\"us \" << duration_cast<microseconds>(t2 - t1).count() <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\"us\" << endl;\n}\n```", "```cpp\nint main() {\n\u00a0\u00a0constexpr unsigned int N = 1 << 20;\n\u00a0\u00a0constexpr int NI = 1 << 11;\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0bool sink;\n\u00a0\u00a0system_clock::time_point t0 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0sink = compare1(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t1 = system_clock::now();\n\u00a0\u00a0for (int i = 0; i < NI; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0sink = compare2(s.get(), s.get() + N);\n\u00a0\u00a0}\n\u00a0\u00a0system_clock::time_point t2 = system_clock::now();\n\u00a0\u00a0cout << duration_cast<microseconds>(t1 - t0).count() <<\n\u00a0\u00a0\u00a0\"us \" << duration_cast<microseconds>(t2 - t1).count() <<\n\u00a0\u00a0\u00a0\u00a0\u00a0\"us\" << sink << endl;\n}\n```", "```cpp\n#include \"benchmark/benchmark.h\"\nusing std::unique_ptr;\nbool compare_int(const char* s1, const char* s2) {\n\u00a0\u00a0char c1, c2;\n\u00a0\u00a0for (int i1 = 0, i2 = 0; ; ++i1, ++i2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c1 = s1[i1]; c2 = s2[i2];\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c1 != c2) return c1 > c2;\n\u00a0\u00a0}\n}\nvoid BM_loop_int(benchmark::State& state) {\n\u00a0\u00a0const unsigned int N = state.range(0);\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0const char* s1 = s.get(), *s2 = s1 + N;\n\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(compare_int(s1, s2));\n\u00a0\u00a0}\n\u00a0\u00a0state.SetItemsProcessed(N*state.iterations());\n}\nBENCHMARK(BM_loop_int)->Arg(1<<20);\nBENCHMARK_MAIN();\n```", "```cpp\nBENCHMARK(BM_loop_int)->Arg(1<<20);\n```", "```cpp\n\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(compare_int(s1, s2));\n\u00a0\u00a0}\n```", "```cpp\n#include \"benchmark/benchmark.h\"\nextern bool compare_int(const char* s1, const char* s2);\nextern bool compare_uint(const char* s1, const char* s2);\nextern bool compare_uint_l(const char* s1, const char* s2,\n\u00a0\u00a0unsigned int l);\nvoid BM_loop_int(benchmark::State& state) {\n\u00a0\u00a0const unsigned int N = state.range(0);\n\u00a0\u00a0unique_ptr<char[]> s(new char[2*N]);\n\u00a0\u00a0::memset(s.get(), 'a', 2*N*sizeof(char));\n\u00a0\u00a0s[2*N-1] = 0;\n\u00a0\u00a0const char* s1 = s.get(), *s2 = s1 + N;\n\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(compare_int(s1, s2));\n\u00a0\u00a0}\n\u00a0\u00a0state.SetItemsProcessed(N*state.iterations());\n}\nvoid BM_loop_uint(benchmark::State& state) {\n\u00a0\u00a0\u2026 compare_uint(s1, s2) \u2026\n}\nvoid BM_loop_uint_l(benchmark::State& state) {\n\u00a0\u00a0\u2026 compare_uint_l(s1, s2, 2*N) \u2026\n}\nBENCHMARK(BM_loop_int)->Arg(1<<20);\nBENCHMARK(BM_loop_uint)->Arg(1<<20);\nBENCHMARK(BM_loop_uint_l)->Arg(1<<20);\n```"]