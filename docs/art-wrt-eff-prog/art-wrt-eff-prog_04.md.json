["```cpp\n#include \"benchmark/benchmark.h\"\nvoid BM_add(benchmark::State& state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0srand(1);\n\u00a0\u00a0\u00a0\u00a0\u00a0const unsigned int N = state.range(0);\n\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<unsigned long> v1(N), v2(N);\n\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v1[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v2[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p1 = v1.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p2 = v2.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long a1 = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::ClobberMemory();\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0state.SetItemsProcessed(N*state.iterations());\n}\nBENCHMARK(BM_add)->Arg(1<<22);\nBENCHMARK_MAIN();\n```", "```cpp\na1 += p1[i] + p2[i];\n```", "```cpp\nvoid BM_add_multiply(benchmark::State& state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u2026 prepare data \u2026\n\u00a0\u00a0\u00a0\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long a1 = 0, a2 = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i] * p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::ClobberMemory();\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0state.SetItemsProcessed(N*state.iterations());\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i] * p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a3 += p1[i] << 2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a4 += p2[i] \u2013 p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i] * p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a3 += p1[i] << 2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a4 += p2[i] \u2013 p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a5 += (p2[i] << 1)*p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a6 += (p2[i] - 3)*p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n#define MCA_START __asm volatile(\"# LLVM-MCA-BEGIN\");\n#define MCA_END __asm volatile(\"# LLVM-MCA-END\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2026\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\nMCA_START\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\nMCA_END\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n#define MCA_START __asm volatile(\"# LLVM-MCA-BEGIN\");\n#define MCA_END __asm volatile(\"# LLVM-MCA-END\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2026\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\nMCA_START\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i] * p2[i];\nMCA_END\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0a1 += (p1[i] + p2[i])*(p1[i] - p2[i]);\n}\n```", "```cpp\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0s[i] = (p1[i] + p2[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0d[i] = (p1[i] - p2[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0a1[i] += s[i]*d[i];\n}\n```", "```cpp\na1 += p1[i] + p2[i];\n```", "```cpp\na1 += (p1[i]>p2[i]) ? p1[i] : p2[i];\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<unsigned long> v1(N), v2(N);\n\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<int> c1(N);\n\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v1[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v2[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c1[i] = rand() & 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p1 = v1.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p2 = v2.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0int* b1 = c1.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long a1 = 0, a2 = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (b1[i]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 *= p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::ClobberMemory();\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0a1 += v1[i] + v2[i]; // s[i] = v1[i] + v2[i]\n}\n```", "```cpp\nc1[i] = rand() >= 0;\n```", "```cpp\n$ perf stat ./benchmark\n```", "```cpp\n$ perf record -e branches,branch-misses ./benchmark\n```", "```cpp\n$ perf report\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i == 0) c1[i] = rand() >= 0; \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else c1[i] = !c1[i - 1];\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nint f(int* p) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (p) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return *p;\n\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<unsigned long> v1(N), v2(N);\n\u00a0\u00a0\u00a0\u00a0\u00a0std::vector<int> c1(N), c2(N);\n\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v1[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v2[i] = rand();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c1[i] = rand() & 0x1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c2[i] = !c1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p1 = v1.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long* p2 = v2.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0int* b1 = c1.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0int* b2 = c2.data();\n\u00a0\u00a0\u00a0\u00a0\u00a0for (auto _ : state) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long a1 = 0, a2 = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (b1[i] || b2[i]) { // !!!\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 *= p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::DoNotOptimize(a2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark::ClobberMemory();\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nif ((c1 && c2) || c3) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u2026 true branch \u2026 \n} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u2026 false branch \u2026\n}\n```", "```cpp\nif (f1() || f2()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u2026 true branch \u2026 \n} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u2026 false branch \u2026\n}\n```", "```cpp\nconst bool c = c1 && c2) || c3;\nif (c) { \u2026 } else { \u2026 }\n```", "```cpp\nfor (size_i i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if ((c1[i] && c2[i]) || c3[i]) { \u2026 } else { \u2026 }\n}\n```", "```cpp\nfor (size_i i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c[i] = (c1[i] && c2[i]) || c3[i];\n}\n\u2026\nfor (size_i i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (c[i]) { \u2026 } else { \u2026 }\n}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (size_t i = 0; i < N; i += 2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] + p2[i]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+\u00a0\u00a0p1[i+1] + p2[i+1];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\nunsigned long* p1 = ...; // Data\nbool* b1 = ...; // Unpredictable condition\nunsigned long a1 = 0, a2 = 0;\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0if (b1[i]) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nunsigned long* p1 = ...; // Data\nbool* b1 = ...; // Unpredictable condition\nunsigned long a1 = 0, a2 = 0;\nunsigned long* a[2] = { &a2, &a1 };\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0a[b1[i]] += p1[i];\n}\n```", "```cpp\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0(b1[i] ? a1 : a2) += p1[i];\n}\n```", "```cpp\nunsigned long *p1 = ..., *p2 = ...; // Data\nbool* b1 = ...; // Unpredictable condition\nunsigned long a1 = 0, a2 = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nfor (size_t i = 0; i < N; ++i) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0if (b1[i]) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a1 += p1[i] - p2[i];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0} else {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a2 += p1[i] * p2[i];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n}\u00a0\u00a0\n```", "```cpp\nunsigned long a1 = 0, a2 = 0;\nunsigned long* a[2] = { &a2, &a1 };\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long s[2] = { p1[i] * p2[i], p1[i] - p2[i] };\n\u00a0\u00a0\u00a0\u00a0\u00a0a[b1[i]] += s[b1[i]];\n}\u00a0\u00a0\n```", "```cpp\nunsigned long a1 = 0, a2 = 0;\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long s1[2] = { 0, p1[i] - p2[i] };\n\u00a0\u00a0\u00a0\u00a0\u00a0unsigned long s2[2] = { p1[i] * p2[i], 0 };\n\u00a0\u00a0\u00a0\u00a0\u00a0a1 += s1[b1[i]];\n\u00a0\u00a0\u00a0\u00a0\u00a0a2 += s2[b1[i]];\n}\n```", "```cpp\nunsigned char *c = ...; // Random values from 0 to 255\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c[i] = (c[i] < 128) ? c[i] : 128;\n}\n```", "```cpp\nunsigned char *c = ...; // Random values from 0 to 255\nunsigned char LUT[256] = { 0, 1, \u2026, 127, 128, 128, \u2026 128 };\nfor (size_t i = 0; i < N; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0c[i] = LUT[c[i]];\n}\n```", "```cpp\nunsigned long f1(unsigned long x, unsigned long y);\nunsigned long f2(unsigned long x, unsigned long y);\nunsigned long *p1 = ..., *p2 = ...; // Data\nbool* b1 = ...; // Unpredictable condition\nunsigned long a = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nfor (size_t i = 0; i < N; ++i) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0if (b1[i]) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a += f1(p1[i], p2[i]);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0} else {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a += f2(p1[i], p2[i]);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n} \n```", "```cpp\ndecltype(f1)* f[] = { f1, f2 };\nfor (size_t i = 0; i < N; ++i) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0a += f[b1[i]](p1[i], p2[i]);\n}\n```"]