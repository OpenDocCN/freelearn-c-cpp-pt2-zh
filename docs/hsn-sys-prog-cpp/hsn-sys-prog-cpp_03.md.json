["```cpp\n#include <iostream>\n\nint main(void)\n{\n    char c = 0x42;\n    std::cout << c << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// B\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    int i = 0x42;\n    char c = 0x42;\n\n    std::cout << i << '\\n';\n    std::cout << c << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// 66\n// B\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    const char *str = \"Hello World\\n\";\n    std::cout << str;\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// Hello World\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes_signed = sizeof(signed char);\n    auto min_signed = std::numeric_limits<signed char>().min();\n    auto max_signed = std::numeric_limits<signed char>().max();\n\n    auto num_bytes_unsigned = sizeof(unsigned char);\n    auto min_unsigned = std::numeric_limits<unsigned char>().min();\n    auto max_unsigned = std::numeric_limits<unsigned char>().max();\n\n    std::cout << \"num bytes (signed): \" << num_bytes_signed << '\\n';\n    std::cout << \"min value (signed): \" << +min_signed << '\\n';\n    std::cout << \"max value (signed): \" << +max_signed << '\\n';\n\n    std::cout << '\\n';\n\n    std::cout << \"num bytes (unsigned): \" << num_bytes_unsigned << '\\n';\n    std::cout << \"min value (unsigned): \" << +min_unsigned << '\\n';\n    std::cout << \"max value (unsigned): \" << +max_unsigned << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes (signed): 1\n// min value (signed): -128\n// max value (signed): 127\n\n// num bytes (unsigned): 1\n// min value (unsigned): 0\n// max value (unsigned): 255\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes_signed = sizeof(signed wchar_t);\n    auto min_signed = std::numeric_limits<signed wchar_t>().min();\n    auto max_signed = std::numeric_limits<signed wchar_t>().max();\n\n    auto num_bytes_unsigned = sizeof(unsigned wchar_t);\n    auto min_unsigned = std::numeric_limits<unsigned wchar_t>().min();\n    auto max_unsigned = std::numeric_limits<unsigned wchar_t>().max();\n\n    std::cout << \"num bytes (signed): \" << num_bytes_signed << '\\n';\n    std::cout << \"min value (signed): \" << +min_signed << '\\n';\n    std::cout << \"max value (signed): \" << +max_signed << '\\n';\n\n    std::cout << '\\n';\n\n    std::cout << \"num bytes (unsigned): \" << num_bytes_unsigned << '\\n';\n    std::cout << \"min value (unsigned): \" << +min_unsigned << '\\n';\n    std::cout << \"max value (unsigned): \" << +max_unsigned << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes (signed): 4\n// min value (signed): -2147483648\n// max value (signed): 2147483647\n\n// num bytes (unsigned): 4\n// min value (unsigned): 0\n// max value (unsigned): 4294967295\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes_signed = sizeof(signed short int);\n    auto min_signed = std::numeric_limits<signed short int>().min();\n    auto max_signed = std::numeric_limits<signed short int>().max();\n\n    auto num_bytes_unsigned = sizeof(unsigned short int);\n    auto min_unsigned = std::numeric_limits<unsigned short int>().min();\n    auto max_unsigned = std::numeric_limits<unsigned short int>().max();\n\n    std::cout << \"num bytes (signed): \" << num_bytes_signed << '\\n';\n    std::cout << \"min value (signed): \" << min_signed << '\\n';\n    std::cout << \"max value (signed): \" << max_signed << '\\n';\n\n    std::cout << '\\n';\n\n    std::cout << \"num bytes (unsigned): \" << num_bytes_unsigned << '\\n';\n    std::cout << \"min value (unsigned): \" << min_unsigned << '\\n';\n    std::cout << \"max value (unsigned): \" << max_unsigned << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes (signed): 2\n// min value (signed): -32768\n// max value (signed): 32767\n\n// num bytes (unsigned): 2\n// min value (unsigned): 0\n// max value (unsigned): 65535\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    short int s = 42;\n\n    std::cout << s << '\\n';\n    s++;\n    std::cout << s << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// 42\n// 43\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes_signed = sizeof(signed int);\n    auto min_signed = std::numeric_limits<signed int>().min();\n    auto max_signed = std::numeric_limits<signed int>().max();\n\n    auto num_bytes_unsigned = sizeof(unsigned int);\n    auto min_unsigned = std::numeric_limits<unsigned int>().min();\n    auto max_unsigned = std::numeric_limits<unsigned int>().max();\n\n    std::cout << \"num bytes (signed): \" << num_bytes_signed << '\\n';\n    std::cout << \"min value (signed): \" << min_signed << '\\n';\n    std::cout << \"max value (signed): \" << max_signed << '\\n';\n\n    std::cout << '\\n';\n\n    std::cout << \"num bytes (unsigned): \" << num_bytes_unsigned << '\\n';\n    std::cout << \"min value (unsigned): \" << min_unsigned << '\\n';\n    std::cout << \"max value (unsigned): \" << max_unsigned << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes (signed): 4\n// min value (signed): -2147483648\n// max value (signed): 2147483647\n\n// num bytes (unsigned): 4\n// min value (unsigned): 0\n// max value (unsigned): 4294967295\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes_signed = sizeof(signed long int);\n    auto min_signed = std::numeric_limits<signed long int>().min();\n    auto max_signed = std::numeric_limits<signed long int>().max();\n\n    auto num_bytes_unsigned = sizeof(unsigned long int);\n    auto min_unsigned = std::numeric_limits<unsigned long int>().min();\n    auto max_unsigned = std::numeric_limits<unsigned long int>().max();\n\n    std::cout << \"num bytes (signed): \" << num_bytes_signed << '\\n';\n    std::cout << \"min value (signed): \" << min_signed << '\\n';\n    std::cout << \"max value (signed): \" << max_signed << '\\n';\n\n    std::cout << '\\n';\n\n    std::cout << \"num bytes (unsigned): \" << num_bytes_unsigned << '\\n';\n    std::cout << \"min value (unsigned): \" << min_unsigned << '\\n';\n    std::cout << \"max value (unsigned): \" << max_unsigned << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes (signed): 8\n// min value (signed): -9223372036854775808\n// max value (signed): 9223372036854775807\n\n// num bytes (unsigned): 8\n// min value (unsigned): 0\n// max value (unsigned): 18446744073709551615\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes = sizeof(float);\n    auto min = std::numeric_limits<float>().min();\n    auto max = std::numeric_limits<float>().max();\n\n    std::cout << \"num bytes: \" << num_bytes << '\\n';\n    std::cout << \"min value: \" << min << '\\n';\n    std::cout << \"max value: \" << max << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes: 4\n// min value: 1.17549e-38\n// max value: 3.40282e+38\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes = sizeof(double);\n    auto min = std::numeric_limits<double>().min();\n    auto max = std::numeric_limits<double>().max();\n\n    std::cout << \"num bytes: \" << num_bytes << '\\n';\n    std::cout << \"min value: \" << min << '\\n';\n    std::cout << \"max value: \" << max << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes: 8\n// min value: 2.22507e-308\n// max value: 1.79769e+308\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes = sizeof(long double);\n    auto min = std::numeric_limits<long double>().min();\n    auto max = std::numeric_limits<long double>().max();\n\n    std::cout << \"num bytes: \" << num_bytes << '\\n';\n    std::cout << \"min value: \" << min << '\\n';\n    std::cout << \"max value: \" << max << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes: 16\n// min value: 3.3621e-4932\n// max value: 1.18973e+4932\n```", "```cpp\n#include <iostream>\n\nint main(void)\n{\n    auto num_bytes = sizeof(bool);\n    auto min = std::numeric_limits<bool>().min();\n    auto max = std::numeric_limits<bool>().max();\n\n    std::cout << \"num bytes: \" << num_bytes << '\\n';\n    std::cout << \"min value: \" << min << '\\n';\n    std::cout << \"max value: \" << max << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// num bytes: 1\n// min value: 0\n// max value: 1\n```", "```cpp\n#include <typeinfo>\n#include <iostream>\n\n#include <string>\n#include <cstdint>\n#include <cstdlib>\n#include <cxxabi.h>\n```", "```cpp\ntemplate<typename T>\nstd::string type_name()\n{\n    int status;\n    std::string name = typeid(T).name();\n\n    auto demangled_name =\n        abi::__cxa_demangle(name.c_str(), nullptr, nullptr, &status);\n\n    if (status == 0) {\n        name = demangled_name;\n        std::free(demangled_name);\n    }\n\n    return name;\n}\n```", "```cpp\ntemplate<typename T1, typename T2>\nvoid\nare_equal()\n{\n    #define red \"\\033[1;31m\"\n    #define reset \"\\033[0m\"\n\n    std::cout << type_name<T1>() << \" vs \"\n              << type_name<T2>() << '\\n';\n\n    if (sizeof(T1) == sizeof(T2)) {\n        std::cout << \" - size: both == \" << sizeof(T1) << '\\n';\n    }\n    else {\n        std::cout << red \" - size: \"\n                  << sizeof(T1)\n                  << \" != \"\n                  << sizeof(T2)\n                  << reset \"\\n\";\n    }\n\n    if (type_name<T1>() == type_name<T2>()) {\n        std::cout << \" - name: both == \" << type_name<T1>() << '\\n';\n    }\n    else {\n        std::cout << red \" - name: \"\n                  << type_name<T1>()\n                  << \" != \"\n                  << type_name<T2>()\n                  << reset \"\\n\";\n    }\n}\n```", "```cpp\nint main()\n{\n    are_equal<uint8_t, int8_t>();\n    are_equal<uint8_t, uint32_t>();\n\n    are_equal<signed char, int8_t>();\n    are_equal<unsigned char, uint8_t>();\n\n    are_equal<signed short int, int16_t>();\n    are_equal<unsigned short int, uint16_t>();\n    are_equal<signed int, int32_t>();\n    are_equal<unsigned int, uint32_t>();\n    are_equal<signed long int, int64_t>();\n    are_equal<unsigned long int, uint64_t>();\n    are_equal<signed long long int, int64_t>();\n    are_equal<unsigned long long int, uint64_t>();\n}\n```", "```cpp\nare_equal<uint8_t, int8_t>();\nare_equal<uint8_t, uint32_t>();\n\n// unsigned char vs signed char\n// - size: both == 1\n// - name: unsigned char != signed char\n\n// unsigned char vs unsigned int\n// - size: 1 != 4\n// - name: unsigned char != unsigned int\n```", "```cpp\n\nare_equal<signed char, int8_t>();\nare_equal<unsigned char, uint8_t>();\n\n// signed char vs signed char\n// - size: both == 1\n// - name: both == signed char\n\n// unsigned char vs unsigned char\n// - size: both == 1\n// - name: both == unsigned char\n```", "```cpp\nare_equal<signed short int, int16_t>();\nare_equal<unsigned short int, uint16_t>();\nare_equal<signed int, int32_t>();\nare_equal<unsigned int, uint32_t>();\nare_equal<signed long int, int64_t>();\nare_equal<unsigned long int, uint64_t>();\nare_equal<signed long long int, int64_t>();\nare_equal<unsigned long long int, uint64_t>();\n\n// short vs short\n// - size: both == 2\n// - name: both == short\n\n// unsigned short vs unsigned short\n// - size: both == 2\n// - name: both == unsigned short\n\n// int vs int\n// - size: both == 4\n// - name: both == int\n\n// unsigned int vs unsigned int\n// - size: both == 4\n// - name: both == unsigned int\n\n// long vs long\n// - size: both == 8\n// - name: both == long\n\n// unsigned long vs unsigned long\n// - size: both == 8\n// - name: both == unsigned long\n\n// long long vs long\n// - size: both == 8\n// - name: long long != long\n\n// unsigned long long vs unsigned long\n// - size: both == 8\n// - name: unsigned long long != unsigned long\n```", "```cpp\n#include <iostream>\n\nstruct mystruct {\n    uint64_t data1;\n    uint64_t data2;\n};\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 16\n```", "```cpp\n#include <iostream>\n\nstruct mystruct {\n    uint64_t data1;\n    uint16_t data2;\n};\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 16\n```", "```cpp\n#include <iostream>\n\nstruct mystruct {\n    uint16_t data1;\n    uint64_t data2;\n};\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 16\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    int16_t s = 42;\n    auto result = s + 42;\n    std::cout << \"size: \" << sizeof(result) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 4\n```", "```cpp\n#include <iostream>\n\nstruct mystruct {\n    uint16_t data1;\n    uint16_t data2;\n};\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 4\n```", "```cpp\n#include <iostream>\n\nstruct mystruct {\n    uint16_t data1 : 2, data2 : 14;\n    uint64_t data3;\n};\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 16\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct mystruct {\n    uint64_t data1;\n    uint16_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 10\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct mystruct {\n    uint16_t data1;\n    uint64_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 10\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct mystruct {\n    uint16_t data1;\n    uint64_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    mystruct s;\n    std::cout << \"addr: \" << &s << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// addr: 0x7fffd11069cf\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct alignas(16) mystruct {\n    uint16_t data1;\n    uint64_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    mystruct s;\n    std::cout << \"addr: \" << &s << '\\n';\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// addr: 0x7fff44ee3f40\n// size: 16\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct alignas(16) mystruct {\n    uint16_t data1;\n    uint64_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    mystruct s;\n    std::cout << \"addr data1: \" << &s.data1 << '\\n';\n    std::cout << \"addr data2: \" << &s.data2 << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// addr data1: 0x7ffc45dd8c90\n// addr data2: 0x7ffc45dd8c92\n```", "```cpp\n#include <iostream>\n\n#pragma pack(push, 1)\nstruct mystruct {\n    uint16_t *data1;\n    uint64_t data2;\n};\n#pragma pack(pop)\n\nint main()\n{\n    std::cout << \"size: \" << sizeof(mystruct) << '\\n';\n}\n\n// > g++ scratchpad.cpp; ./a.out\n// size: 16\n```"]