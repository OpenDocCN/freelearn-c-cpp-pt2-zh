["```cpp\nif (x) {\n    do_y();\n}\n\ndo_z();\n```", "```cpp\n/* Example: C */\nint *p = malloc(sizeof(int));\n\n// Example: C++\nauto p = new int;\n```", "```cpp\n/* Example: C */\n\nstruct point \n{\n    int x;\n    int y;\n};\n\nvoid translate(point *p; int val)\n{\n    if (p == NULL) {\n        return;\n    }\n\n    p->x += val;\n    p->y += val;\n}\n```", "```cpp\n// Example: C++\n\nstruct point \n{\n    int x;\n    int y;\n\n    void translate(int val)\n    {\n        p->x += val;\n        p->y += val;\n    }\n};\n```", "```cpp\n// Example: C++\n\nstruct myfile \n{\n    int fd{0};\n\n    ~myfile() {\n        close(fd);\n    }\n};\n```", "```cpp\nstruct node \n{\n    void *data;\n    node next;\n};\n\nvoid add_data(node *n, void *val);\n```", "```cpp\nnode head;\nadd_data(&head, malloc(sizeof(int)));\n*(int*)head.data = 42;\n```", "```cpp\ntemplate<typename T>\nclass mylinked_list\n{\n    struct node \n    {\n        T data;\n        node *next;\n    };\n\npublic:\n\n    ...\n\nprivate:\n\n    node m_head;\n};\n```", "```cpp\nvoid\nguard(void (*ptr)(int *val), int *val)\n{\n    lock();\n    ptr(val);\n    unlock();\n}\n\nvoid \ninc(int *val)\n{\n    *val++;\n}\n\nvoid \ndec(int *val)\n{\n    *val--;\n}\n\nvoid\nfoo() \n{\n    int count = 0;\n    guard(inc, &count);\n    guard(dec, &count);\n}\n```", "```cpp\ntemplate<typename FUNC>\nguard(FUNC f)\n{\n    lock();\n    f();\n    unlock();\n}\n\nvoid\nfoo() \n{\n    int count = 0;\n    guard(inc, [&]{ count++ });\n    guard(inc, [&]{ count-- });\n}\n```", "```cpp\nstruct myoutput \n{\n    int val;\n    int error_code;\n}\n\nstruct myoutput myfunc(int val)\n{\n    struct myoutput = {0};\n\n    if (val == 42) {\n        myoutput.error_code = -1;\n    }\n\n    myoutput.val = val;\n    return myoutput;\n}\n\nvoid \nfoo(void)\n{\n    struct myoutput = myfunc(42);\n\n    if (myoutput.error_code == -1) {\n        printf(\"yikes\\n\");\n        return;\n    }\n}\n```", "```cpp\nstd::pair<int, int>\nmyfunc(int val)\n{\n    if (val == 42) {\n        return {0, -1};\n    }\n\n    return {val, 0};\n}\n\nvoid \nfoo(void)\n{\n    if (auto [val, error_code] = myfunc(42); error_code == -1) {\n        printf(\"yikes\\n\");\n        return;\n    }\n}\n```"]