["```cpp\ntime_t time(time_t *arg);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n    std::cout << \"time: \" << t << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 1531603643\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    time_t t;\n    time(&t);\n    std::cout << \"time: \" << t << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 1531603652\n```", "```cpp\nchar* ctime(const time_t* time);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n    std::cout << \"time: \" << ctime(&t);\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 15:27:44 2018\n```", "```cpp\nstruct tm *localtime( const time_t *time );\nstruct tm *gmtime( const time_t *time );\n```", "```cpp\nchar* asctime( const struct tm* time_ptr );\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n    std::cout << \"time: \" << asctime(localtime(&t));\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 15:28:59 2018\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n    std::cout << \"time: \" << asctime(gmtime(&t));\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 21:46:12 2018\n```", "```cpp\nsize_t strftime(char * str, size_t count, const char *format, const struct tm *time);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n\n    char buf[256]{};\n    strftime(buf, sizeof(buf), \"%m/%d/%Y\", localtime(&t));\n\n    std::cout << \"time: \" << buf << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 07/14/2018\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n\n    char buf[256]{};\n    strftime(buf, sizeof buf, \"%H:%M\", localtime(&t));\n\n    std::cout << \"time: \" << buf << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 15:41\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t = time(nullptr);\n\n    char buf[256]{};\n    strftime(buf, sizeof buf, \"%a %b %d %H:%M:%S %Y\", localtime(&t));\n\n    std::cout << \"time: \" << buf << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 15:44:57 2018\n```", "```cpp\ndouble difftime(time_t time_end, time_t time_beg);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    auto t1 = time(nullptr);\n    sleep(2);\n    auto t2 = time(nullptr);\n\n    std::cout << \"diff: \" << difftime(t2, t1) << '\\n';\n    std::cout << \"diff: \" << t2 - t1 << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// diff: 2\n```", "```cpp\ntime_t mktime(struct tm *time);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    auto t1 = time(nullptr);\n    auto lt = localtime(&t1);\n    auto t2 = mktime(lt);\n\n    std::cout << \"time: \" << ctime(&t2);\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 16:00:13 2018\n```", "```cpp\nclock_t clock(void);\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    std::cout << \"clock: \" << clock() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// clock: 2002\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    auto c1 = clock();\n    sleep(2);\n    auto c2 = clock();\n\n    std::cout << \"clock: \" <<\n        static_cast<double>(c2 - c1) / CLOCKS_PER_SEC << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// clock: 3.2e-05\n```", "```cpp\n#include <ctime>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    auto c1 = clock();\n\n    auto t1 = time(nullptr);\n    while(time(nullptr) - t1 <= 2);\n\n    auto c2 = clock();\n\n    std::cout << \"clock: \" <<\n        static_cast<double>(c2 - c1) / CLOCKS_PER_SEC << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// clock: 2.05336\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\nint main()\n{\n    auto t = std::chrono::system_clock::now();\n    std::cout << \"time: \" << std::chrono::system_clock::to_time_t(t) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 1531606644\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\ntemplate<typename C, typename D>\nstd::ostream &\noperator<<(std::ostream &os, std::chrono::time_point<C,D> &obj)\n{\n    auto t = std::chrono::system_clock::to_time_t(obj);\n    return os << ctime(&t);\n}\n\nint main()\n{\n    auto now = std::chrono::system_clock::now();\n    std::cout << \"time: \" << now;\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: Sat Jul 14 19:01:55 2018\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\ntemplate<typename C, typename D>\nstd::ostream &\noperator<<(std::ostream &os, const std::chrono::time_point<C,D> &obj)\n{\n    auto t = std::chrono::system_clock::to_time_t(obj);\n    return os << ctime(&t);\n}\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto now = std::chrono::system_clock::now();\n\n    std::cout << \"time: \" << now;\n\n    now += 1h;\n    std::cout << \"time: \" << now;\n\n    now -= 1h;\n    std::cout << \"time: \" << now;\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 1531606644\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\nint main()\n{\n    auto now1 = std::chrono::system_clock::now();\n    auto now2 = std::chrono::system_clock::now();\n\n    std::cout << std::boolalpha;\n    std::cout << \"compare: \" << (now1 < now2) << '\\n';\n    std::cout << \"compare: \" << (now1 > now2) << '\\n';\n    std::cout << \"compare: \" << (now1 <= now2) << '\\n';\n    std::cout << \"compare: \" << (now1 >= now2) << '\\n';\n    std::cout << \"compare: \" << (now1 == now2) << '\\n';\n    std::cout << \"compare: \" << (now1 != now2) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// compare: true\n// compare: false\n// compare: true\n// compare: false\n// compare: false\n// compare: true\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto now1 = system_clock::now();\n    sleep(2);\n    auto now2 = system_clock::now();\n\n    std::cout << \"time: \" <<\n        duration_cast<seconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<milliseconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<nanoseconds>(now2 - now1).count() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 2\n// time: 2001\n// time: 2001415132\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\nint main()\n{\n    using namespace std::chrono;\n\n    seconds t(42);\n\n    t++;\n    std::cout << \"time: \" << t.count() << '\\n';\n\n    t--;\n    std::cout << \"time: \" << t.count() << '\\n';\n\n    t += 1s;\n    std::cout << \"time: \" << t.count() << '\\n';\n\n    t -= 1s;\n    std::cout << \"time: \" << t.count() << '\\n';\n\n    t %= 2s;\n    std::cout << \"time: \" << t.count() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 43\n// time: 42\n// time: 43\n// time: 42\n// time: 0\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto t1 = 0s;\n    auto t2 = 42s;\n\n    std::cout << std::boolalpha;\n    std::cout << \"compare: \" << (t1 < t2) << '\\n';\n    std::cout << \"compare: \" << (t1 > t2) << '\\n';\n    std::cout << \"compare: \" << (t1 <= t2) << '\\n';\n    std::cout << \"compare: \" << (t1 >= t2) << '\\n';\n    std::cout << \"compare: \" << (t1 == t2) << '\\n';\n    std::cout << \"compare: \" << (t1 != t2) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// compare: true\n// compare: false\n// compare: true\n// compare: false\n// compare: false\n// compare: true\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto s1 = -42001ms;\n\n    std::cout << \"floor: \" << floor<seconds>(s1).count() << '\\n';\n    std::cout << \"ceil: \" << ceil<seconds>(s1).count() << '\\n';\n    std::cout << \"round: \" << round<seconds>(s1).count() << '\\n';\n    std::cout << \"abs: \" << abs(s1).count() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// floor: -43\n// ceil: -42\n// round: -42\n// abs: 42001\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto now1 = steady_clock::now();\n    sleep(2);\n    auto now2 = steady_clock::now();\n\n    std::cout << \"time: \" <<\n        duration_cast<seconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<milliseconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<nanoseconds>(now2 - now1).count() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 2\n// time: 2001\n// time: 2001447628\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <unistd.h>\n\nint main()\n{\n    using namespace std::chrono;\n\n    auto now1 = high_resolution_clock::now();\n    sleep(2);\n    auto now2 = high_resolution_clock::now();\n\n    std::cout << \"time: \" <<\n        duration_cast<seconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<milliseconds>(now2 - now1).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<nanoseconds>(now2 - now1).count() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp; ./a.out\n// time: 2\n// time: 2000\n// time: 2002297281\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <gsl/gsl>\n\n#include <unistd.h>\n\nusing namespace std::chrono;\n```", "```cpp\ntemplate<typename C, typename D>\nstd::ostream &\noperator<<(std::ostream &os, std::chrono::time_point<C,D> &obj)\n{\n    auto t = std::chrono::system_clock::to_time_t(obj);\n    return os << ctime(&t);\n}\n```", "```cpp\nint\nprotected_main(int argc, char **argv)\n{\n    using namespace std::chrono;\n    auto args = gsl::make_span(argv, argc);\n\n    if (args.size() != 2) {\n        std::cerr << \"wrong number of arguments\\n\";\n        ::exit(1);\n    }\n\n    gsl::cstring_span<> arg = gsl::ensure_z(args.at(1));\n\n    while(true) {\n        auto now = std::chrono::system_clock::now();\n        std::cout << \"time: \" << now;\n\n        sleep(std::stoi(arg.data()));\n    }\n}\n```", "```cpp\nint\nmain(int argc, char **argv)\n{\n    try {\n        return protected_main(argc, argv);\n    }\n    catch (const std::exception &e) {\n        std::cerr << \"Caught unhandled exception:\\n\";\n        std::cerr << \" - what(): \" << e.what() << '\\n';\n    }\n    catch (...) {\n        std::cerr << \"Caught unknown exception\\n\";\n    }\n\n    return EXIT_FAILURE;\n}\n```", "```cpp\n> git clone https://github.com/PacktPublishing/Hands-On-System-Programming-with-CPP.git\n> cd Hands-On-System-Programming-with-CPP/Chapter10/\n> mkdir build\n> cd build\n\n> cmake ..\n> make\n```", "```cpp\n> ./example1 2\ntime: Sun Jul 15 15:04:41 2018\ntime: Sun Jul 15 15:04:43 2018\ntime: Sun Jul 15 15:04:45 2018\ntime: Sun Jul 15 15:04:47 2018\ntime: Sun Jul 15 15:04:49 2018\n```", "```cpp\n#include <chrono>\n#include <iostream>\n\n#include <gsl/gsl>\n```", "```cpp\ntemplate<typename FUNC>\nauto benchmark(FUNC func) {\n    auto stime = std::chrono::high_resolution_clock::now();\n    func();\n    auto etime = std::chrono::high_resolution_clock::now();\n\n    return etime - stime;\n}\n```", "```cpp\nint\nprotected_main(int argc, char **argv)\n{\n    using namespace std::chrono;\n\n    auto args = gsl::make_span(argv, argc);\n\n    if (args.size() != 2) {\n        std::cerr << \"wrong number of arguments\\n\";\n        ::exit(1);\n    }\n\n    gsl::cstring_span<> arg = gsl::ensure_z(args.at(1));\n\n    auto d = benchmark([&arg]{\n        for (uint64_t i = 0; i < std::stoi(arg.data()); i++);\n    });\n\n    std::cout << \"time: \" <<\n        duration_cast<seconds>(d).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<milliseconds>(d).count() << '\\n';\n\n    std::cout << \"time: \" <<\n        duration_cast<nanoseconds>(d).count() << '\\n';\n}\n```", "```cpp\nint\nmain(int argc, char **argv)\n{\n    try {\n        return protected_main(argc, argv);\n    }\n    catch (const std::exception &e) {\n        std::cerr << \"Caught unhandled exception:\\n\";\n        std::cerr << \" - what(): \" << e.what() << '\\n';\n    }\n    catch (...) {\n        std::cerr << \"Caught unknown exception\\n\";\n    }\n\n    return EXIT_FAILURE;\n}\n```", "```cpp\n> git clone https://github.com/PacktPublishing/Hands-On-System-Programming-with-CPP.git\n> cd Hands-On-System-Programming-with-CPP/Chapter10/\n> mkdir build\n> cd build\n\n> cmake ..\n> make\n```", "```cpp\n> ./example2 1000000\ntime: 0\ntime: 167\ntime: 167455690\n```"]