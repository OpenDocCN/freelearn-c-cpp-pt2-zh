["```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << \"success\\n\";\n    }\n    else {\n        std::cout << \"failure\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\"); file.is_open()) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    auto file = std::fstream();\n    if (file.open(\"test.txt\"); file.is_open()) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.is_open() << '\\n';\n        file.close();\n        std::cout << file.is_open() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// true\n// false\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::in | std::ios::binary;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::in;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::out | std::ios::binary;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::out;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::out | std::ios::binary | std::ios::ate;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::out | std::ios::binary | std::ios::app;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::out | std::ios::binary | std::ios::ate;\n    if (auto file = std::fstream(\"test.txt\", mode); file.seekp(0)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    constexpr auto mode = std::ios::in | std::ios::out | std::ios::trunc;\n    if (auto file = std::fstream(\"test.txt\", mode)) {\n        std::cout << \"success\\n\";\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; touch test.txt; ./a.out\n// success\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello, world;\n        file >> hello >> world;\n        std::cout << hello << \" \" << world << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        int answer;\n        file >> answer;\n        std::cout << \"The answer is: \" << answer << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"42\" > test.txt; ./a.out\n// The answer is: 42\n```", "```cpp\n// > g++ -std=c++17 scratchpad.cpp; echo \"not_a_number\" > test.txt; ./a.out\n// The answer is: 0\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nstruct myclass\n{\n    std::string hello;\n    std::string world;\n};\n\nstd::fstream &operator >>(std::fstream &is, myclass &obj)\n{\n    is >> obj.hello;\n    is >> obj.world;\n\n    return is;\n}\n\nstd::ostream &operator<<(std::ostream &os, const myclass &obj)\n{\n    os << obj.hello;\n    os << ' ';\n    os << obj.world;\n\n    return os;\n}\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        myclass obj;\n        file >> obj;\n        std::cout << obj << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        char c = file.get();\n        std::cout << c << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// H\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        char buf[25] = {};\n        file.read(buf, 11);\n        std::cout << buf << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\ntemplate<typename T, std::size_t N>\nvoid myread(std::fstream &file, T (&str)[N], std::size_t count)\n{\n    if (count >= N) {\n        throw std::out_of_range(\"file.read out of bounds\");\n    }\n\n    file.read(static_cast<char *>(str), count);\n}\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        char buf[25] = {};\n        myread(file, buf, 11);\n        std::cout << buf << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.tellg() << '\\n';\n        char c = file.get();\n        std::cout << file.tellg() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// 0\n// 1\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.tellg() << '\\n';\n        char c = file.peek();\n        std::cout << file.tellg() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// 0\n// 0\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.tellg() << '\\n';\n        file.ignore(1);\n        std::cout << file.tellg() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// 0\n// 1\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello, world;\n\n        file >> hello >> world;\n        std::cout << hello << \" \" << world << '\\n';\n\n        file.seekg(1);\n\n        file >> hello >> world;\n        std::cout << hello << \" \" << world << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n// ello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        char buf[25] = {};\n        file.getline(buf, 25, '\\n');\n        std::cout << buf << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string str;\n        std::getline(file, str);\n        std::cout << str << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"Hello World\" > test.txt; ./a.out\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file.sync();\n    }\n}\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello{\"Hello\"}, world{\"World\"};\n        file << hello << \" \" << world << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file << \"The answer is: \" << 42 << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// The answer is: 42\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nstruct myclass\n{\n    std::string hello{\"Hello\"};\n    std::string world{\"World\"};\n};\n\nstd::fstream &operator <<(std::fstream &os, const myclass &obj)\n{\n    os << obj.hello;\n    os << ' ';\n    os << obj.world;\n\n    return os;\n}\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file << myclass{} << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file.put('H');\n        file.put('\\n');\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// H\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file.write(\"Hello World\\n\", 12);\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file.write(\"Hello World\\n\", 100);\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello World\n// ;\ufffd\ufffd\ufffd\ufffd\ufffdD\ufffd\ufffd\ufffdd)\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd$=\ufffd\ufffd\ufffdDR\ufffd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffdd\ufffd\ufffd\ufffd\ufffd\ufffd[\n```", "```cpp\n#include <string.h>\n\n#include <fstream>\n#include <iostream>\n\nvoid\nmywrite(std::fstream &file, const char *str, std::size_t count)\n{\n    if (count > strlen(str)) {\n        throw std::out_of_range(\"file.write out of bounds\");\n    }\n\n    file.write(str, count);\n}\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        mywrite(file, \"Hello World\\n\", 100);\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// terminate called after throwing an instance of 'std::out_of_range'\n// what(): file.write out of bounds\n// Aborted (core dumped)\n```", "```cpp\n#include <string.h>\n\n#include <fstream>\n#include <iostream>\n\nvoid\nmywrite(std::fstream &file, const char *str, std::size_t count)\n{\n    if (count > strlen(str)) {\n    std::cerr << count << \" \" << strlen(str) << '\\n';\n        throw std::out_of_range(\"file.write out of bounds\");\n    }\n\n    file.write(str, count);\n}\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        const char str1[6] = {'H','e','l','l','o','\\n'};\n        const char str2[6] = {'#','#','#','#','#','\\n'};\n        mywrite(file, str1, 12);\n        mywrite(file, str2, 6);\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello\n// World\n// World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.tellp() << '\\n';\n        file << \"Hello\";\n        std::cout << file.tellp() << '\\n';\n        file << ' ';\n        std::cout << file.tellp() << '\\n';\n        file << \"World\";\n        std::cout << file.tellp() << '\\n';\n        file << '\\n';\n        std::cout << file.tellp() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// 0\n// 5\n// 6\n// 11\n// 12\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::cout << file.tellp() << '\\n';\n        file << \"Hello World\\n\";\n        std::cout << file.tellp() << '\\n';\n        file.seekp(0);\n        std::cout << file.tellp() << '\\n';\n        file << \"The answer is: \" << 42 << '\\n';\n        std::cout << file.tellp() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// 0\n// 12\n// 0\n// 18\n// The answer is: 42\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    if (auto file = std::fstream(\"test.txt\")) {\n        file.flush();\n    }\n}\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello{\"Hello\"}, world{\"World\"};\n        file << hello << \" \" << world << '\\n';\n        std::cout << \"good: \" << file.good() << '\\n';\n        std::cout << \"fail: \" << file.fail() << '\\n';\n        std::cout << \"bad: \" << file.bad() << '\\n';\n        std::cout << \"eof: \" << file.eof() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// good: true\n// fail: false\n// bad: false\n// eof: false\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello{\"Hello\"}, world{\"World\"};\n        file << hello << \" \" << world << '\\n';\n        if (!file) {\n            std::cout << \"failed\\n\";\n        }\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n\n    if (auto file = std::fstream(\"test.txt\")) {\n        std::string hello{\"Hello\"}, world{\"World\"};\n        file << hello << \" \" << world << '\\n';\n        if (file) {\n            std::cout << \"success\\n\";\n        }\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"\" > test.txt; ./a.out; cat test.txt\n// success\n// Hello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n\n    if (auto file = std::fstream(\"test.txt\")) {\n        int answer;\n        std::cout << file.good() << '\\n';\n        file >> answer;\n        std::cout << file.good() << '\\n';\n        file.clear();\n        std::cout << file.good() << '\\n';\n    }\n}\n\n// > g++ -std=c++17 scratchpad.cpp; echo \"not_a_number\" > test.txt; ./a.out\n// true\n// false\n// true\n```", "```cpp\n/home/user/\n```", "```cpp\n/home/user/test.txt\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    using namespace std::filesystem;\n\n    std::cout << std::boolalpha;\n    std::cout << is_block_file(\"/dev/sda1\") << '\\n';\n    std::cout << is_character_file(\"/dev/random\") << '\\n';\n    std::cout << is_directory(\"/dev\") << '\\n';\n    std::cout << is_empty(\"/dev\") << '\\n';\n    std::cout << is_fifo(\"scratchpad.cpp\") << '\\n';\n    std::cout << is_other(\"scratchpad.cpp\") << '\\n';\n    std::cout << is_regular_file(\"scratchpad.cpp\") << '\\n';\n    std::cout << is_socket(\"scratchpad.cpp\") << '\\n';\n    std::cout << is_symlink(\"scratchpad.cpp\") << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// true\n// true\n// false\n// false\n// false\n// true\n// false\n// false\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n std::cout << std::boolalpha;\n std::cout << std::filesystem::exists(\"/dev\") << '\\n';\n std::cout << std::filesystem::exists(\"/dev/random\") << '\\n';\n std::cout << std::filesystem::exists(\"scratchpad.cpp\") << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// true\n// true\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    std::cout << std::filesystem::current_path() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    std::cout << std::filesystem::relative(path) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \".\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    std::cout << std::filesystem::canonical(\".\") << '\\n';\n    std::cout << std::filesystem::canonical(\"../Chapter08\") << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    std::cout << std::filesystem::absolute(\"../Chapter08\") << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/../Chapter08\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n auto path1 = std::filesystem::path{\".\"};\n auto path2 = std::filesystem::path{\"../Chapter08\"};\n auto path3 = std::filesystem::path{\"../Chapter08/../Chapter08\"};\n auto path4 = std::filesystem::current_path();\n auto path5 = std::filesystem::current_path() / \"../Chapter08/\";\n\n std::cout << std::boolalpha;\n std::cout << std::filesystem::equivalent(path1, path2) << '\\n';\n std::cout << std::filesystem::equivalent(path1, path3) << '\\n';\n std::cout << std::filesystem::equivalent(path1, path4) << '\\n';\n std::cout << std::filesystem::equivalent(path1, path5) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// true\n// true\n// true\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path1 = std::filesystem::path{\".\"};\n    auto path2 = std::filesystem::path{\"../Chapter08\"};\n    auto path3 = std::filesystem::path{\"../Chapter08/../Chapter08\"};\n    auto path4 = std::filesystem::current_path();\n    auto path5 = std::filesystem::current_path() / \"../Chapter08/\";\n\n    std::cout << std::boolalpha;\n    std::cout << (path1 == path2) << '\\n';\n    std::cout << (path1 == path3) << '\\n';\n    std::cout << (path1 == path4) << '\\n';\n    std::cout << (path1 == path5) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// false\n// false\n// false\n// false\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path += \"/scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n    path.remove_filename();\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n    path.replace_filename(\"test.cpp\");\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/test.cpp\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n    path.replace_extension(\"txt\");\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.txt\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << path << '\\n';\n    path.clear();\n    std::cout << path << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n// \"\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << std::boolalpha;\n    std::cout << path.root_name() << '\\n';\n    std::cout << path.root_directory() << '\\n';\n    std::cout << path.root_path() << '\\n';\n    std::cout << path.relative_path() << '\\n';\n    std::cout << path.parent_path() << '\\n';\n    std::cout << path.filename() << '\\n';\n    std::cout << path.stem() << '\\n';\n    std::cout << path.extension() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"\"\n// \"/\"\n// \"/\"\n// \"home/user/Hands-On-System-Programming-with-CPP/Chapter08/scratchpad.cpp\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08\"\n// \"scratchpad.cpp\"\n// \"scratchpad\"\n// \".cpp\"\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"scratchpad.cpp\";\n\n    std::cout << std::boolalpha;\n    std::cout << path.empty() << '\\n';\n    std::cout << path.has_root_path() << '\\n';\n    std::cout << path.has_root_name() << '\\n';\n    std::cout << path.has_root_directory() << '\\n';\n    std::cout << path.has_relative_path() << '\\n';\n    std::cout << path.has_parent_path() << '\\n';\n    std::cout << path.has_filename() << '\\n';\n    std::cout << path.has_stem() << '\\n';\n    std::cout << path.has_extension() << '\\n';\n    std::cout << path.is_absolute() << '\\n';\n    std::cout << path.is_relative() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// false\n// true\n// false\n// true\n// true\n// true\n// true\n// true\n// true\n// true\n// false\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"test\";\n\n    std::cout << std::boolalpha;\n    std::cout << std::filesystem::create_directory(path) << '\\n';\n    std::cout << std::filesystem::remove(path) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// true\n```", "```cpp\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path1 = std::filesystem::current_path();\n    auto path2 = std::filesystem::current_path();\n    path1 /= \"test1\";\n    path2 /= \"test2\";\n\n    std::cout << std::boolalpha;\n    std::cout << std::filesystem::create_directory(path1) << '\\n';\n    std::filesystem::rename(path1, path2);\n    std::cout << std::filesystem::remove(path1) << '\\n';\n    std::cout << std::filesystem::remove(path2) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// false\n// true\n```", "```cpp\n#include <fstream>\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"test\";\n\n    std::cout << std::boolalpha;\n    std::cout << std::filesystem::create_directory(path) << '\\n';\n\n    std::fstream(path / \"test1.txt\", std::ios::app);\n    std::fstream(path / \"test2.txt\", std::ios::app);\n    std::fstream(path / \"test3.txt\", std::ios::app);\n\n    std::cout << std::filesystem::remove_all(path) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// 4\n```", "```cpp\nterminate called after throwing an instance of 'std::filesystem::__cxx11::filesystem_error'\n what(): filesystem error: cannot remove: Directory not empty [/home/user/Hands-On-System-Programming-with-CPP/Chapter08/test]\nAborted (core dumped)\n```", "```cpp\n#include <fstream>\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    auto path = std::filesystem::current_path();\n    path /= \"test\";\n\n    std::cout << std::boolalpha;\n    std::cout << std::filesystem::create_directory(path) << '\\n';\n\n    std::fstream(path / \"test1.txt\", std::ios::app);\n    std::fstream(path / \"test2.txt\", std::ios::app);\n    std::fstream(path / \"test3.txt\", std::ios::app);\n\n    for(const auto &p: std::filesystem::directory_iterator(path)) {\n        std::cout << p << '\\n';\n    }\n\n    std::cout << std::filesystem::remove_all(path) << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// true\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/test/test1.txt\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/test/test3.txt\"\n// \"/home/user/Hands-On-System-Programming-with-CPP/Chapter08/test/test2.txt\"\n// 4\n```", "```cpp\n#include <fstream>\n#include <iostream>\n#include <filesystem>\n\nint main()\n{\n    std::cout << std::filesystem::temp_directory_path() << '\\n';\n}\n\n// > g++ -std=c++17 scratchpad.cpp -lstdc++fs; ./a.out\n// \"/tmp\"\n\n#endif\n```", "```cpp\n#ifdef DEBUG_LEVEL\nconstexpr auto g_debug_level = DEBUG_LEVEL;\n#else\nconstexpr auto g_debug_level = 0;\n#endif\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n```", "```cpp\nstd::fstream g_log{\"log.txt\", std::ios::out | std::ios::app};\n```", "```cpp\ntemplate <std::size_t LEVEL>\nconstexpr void log(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        std::stringstream buf;\n\n        auto g_buf = std::clog.rdbuf();\n        std::clog.rdbuf(buf.rdbuf());\n\n        func();\n\n        std::clog.rdbuf(g_buf);\n\n        std::clog << \"\\033[1;32mDEBUG\\033[0m: \";\n        std::clog << buf.str();\n\n        g_log << \"\\033[1;32mDEBUG\\033[0m: \";\n        g_log << buf.str();\n    };\n}\n```", "```cpp\nint\nprotected_main(int argc, char** argv)\n{\n    (void) argc;\n    (void) argv;\n\n    log<0>([]{\n        std::clog << \"Hello World\\n\";\n    });\n\n    std::clog << \"Hello World\\n\";\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\n> git clone https://github.com/PacktPublishing/Hands-On-System-Programming-with-CPP.git\n> cd Hands-On-System-Programming-with-CPP/Chapter08/\n> mkdir build\n> cd build\n\n> cmake ..\n> make\n> ./example1\nDEBUG: Hello World\nHello World\n\n> cat log.txt\nDEBUG: Hello World\n```", "```cpp\nconstexpr auto mode = std::ios::in | std::ios::ate;\n```", "```cpp\n[[noreturn]] void\ntail(std::fstream &file)\n{\n    while (true) {\n        file.peek();\n        while(!file.eof()) {\n            auto pos = file.tellg();\n\n            std::string buf;\n            std::getline(file, buf, '\\n');\n\n            if (file.eof() && !file.good()) {\n                file.seekg(pos);\n                break;\n            }\n\n            std::cout << buf << '\\n';\n        }\n\n        sleep(1);\n\n        file.clear();\n        file.sync();\n    }\n}\n```", "```cpp\nint\nprotected_main(int argc, char **argv)\n{\n    std::string filename;\n    auto args = make_span(argv, argc);\n\n    if (args.size() < 2) {\n        std::cin >> filename;\n    }\n    else {\n        filename = ensure_z(args[1]).data();\n    }\n\n    if (auto file = std::fstream(filename, mode)) {\n        tail(file);\n    }\n\n    throw std::runtime_error(\"failed to open file\");\n}\n```", "```cpp\n> git clone https://github.com/PacktPublishing/Hands-On-System-Programming-with-CPP.git\n> cd Hands-On-System-Programming-with-CPP/Chapter08/\n> mkdir build\n> cd build\n\n> cmake ..\n> make\n> touch test.txt\n> ./example2 test.txt\n```", "```cpp\n> cd Hands-On-System-Programming-with-CPP/Chapter08/build\n> echo \"Hello World\" > test.txt\n```", "```cpp\nHello World\n```", "```cpp\n> echo -n \"Hello World\" > test.txt\n```", "```cpp\nconstexpr auto size = 0x1000;\n```", "```cpp\ntemplate<typename FUNC>\nauto benchmark(FUNC func) {\n    auto stime = std::chrono::high_resolution_clock::now();\n    func();\n    auto etime = std::chrono::high_resolution_clock::now();\n\n    return etime - stime;\n}\n```", "```cpp\nint\nprotected_main(int argc, char** argv)\n{\n    (void) argc;\n    (void) argv;\n\n    using namespace std::chrono;\n\n    {\n        char buf[size] = {};\n        if (auto file = std::fstream(\"test.txt\", std::ios::out)) {\n            file.write(buf, size);\n        }\n    }\n\n    {\n        char buf[size];\n        if (auto file = std::fstream(\"test.txt\", std::ios::in)) {\n            auto time = benchmark([&file, &buf]{\n                file.read(buf, size);\n            });\n\n            std::cout << \"c++ time: \"\n                      << duration_cast<microseconds>(time).count()\n                      << '\\n';\n        }\n    }\n\n    {\n        void *buf;\n        if (int fd = open(\"test.txt\", O_RDONLY); fd != 0) {\n            auto time = benchmark([&fd, &buf]{\n                buf = mmap(NULL, size, PROT_READ, 0, fd, 0);\n            });\n\n            munmap(buf, size);\n\n            std::cout << \"mmap time: \"\n                      << duration_cast<microseconds>(time).count()\n                      << '\\n';\n        }\n    }\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\nchar buf[size] = {};\nif (auto file = std::fstream(\"test.txt\", std::ios::out)) {\n    file.write(buf, size);\n}\n```", "```cpp\nchar buf[size];\nif (auto file = std::fstream(\"test.txt\", std::ios::in)) {\n    auto time = benchmark([&file, &buf]{\n        file.read(buf, size);\n    });\n\n    std::cout << \"c++ time: \"\n                << duration_cast<microseconds>(time).count()\n                << '\\n';\n}\n```", "```cpp\nvoid *buf;\nif (int fd = open(\"test.txt\", O_RDONLY); fd != 0) {\n    auto time = benchmark([&fd, &buf]{\n        buf = mmap(NULL, size, PROT_READ, 0, fd, 0);\n    });\n\n    munmap(buf, size);\n\n    std::cout << \"mmap time: \"\n                << duration_cast<microseconds>(time).count()\n                << '\\n';\n}\n```", "```cpp\n> git clone https://github.com/PacktPublishing/Hands-On-System-Programming-with-CPP.git\n> cd Hands-On-System-Programming-with-CPP/Chapter08/\n> mkdir build\n> cd build\n\n> cmake ..\n> make\n> ./example3\nc++ time: 16\nmmap time: 3\n```"]