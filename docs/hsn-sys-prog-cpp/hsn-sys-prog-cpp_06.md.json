["```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World\\n\";\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nHello World\n```", "```cpp\nbasic_ostream &operator<<(short value);\nbasic_ostream &operator<<(unsigned short value);\nbasic_ostream &operator<<(int value);\nbasic_ostream &operator<<(unsigned int value);\nbasic_ostream &operator<<(long value);\nbasic_ostream &operator<<(unsigned long value);\nbasic_ostream &operator<<(long long value);\nbasic_ostream &operator<<(unsigned long long value);\nbasic_ostream &operator<<(float value);\nbasic_ostream &operator<<(double value);\nbasic_ostream &operator<<(long double value);\nbasic_ostream &operator<<(bool value);\nbasic_ostream &operator<<(const void* value);\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"The answer is: \" << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    auto n = 0;\n\n    std::cin >> n; \n    std::cout << \"input: \" << n << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\n42 \u21b5\ninput: 42\n```", "```cpp\n#include <fcntl.h>\n#include <string.h>\n#include <iostream>\n\nclass custom_errno\n{ };\n\nstd::ostream &operator<<(std::ostream &os, const custom_errno &e)\n{ return os << strerror(errno); }\n\nint main()\n{\n    if (open(\"filename.txt\", O_RDWR) == -1) {\n        std::cout << custom_errno{} << '\\n';\n    }\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nNo such file or directory\n```", "```cpp\n#include <iostream>\n\nstruct object_t\n{\n    int data1;\n    int data2;\n};\n\nstd::ostream &operator<<(std::ostream &os, const object_t &obj)\n{\n    os << \"data1: \" << obj.data1 << '\\n';\n    os << \"data2: \" << obj.data2 << '\\n';\n    return os;\n}\n\nstd::istream &operator>>(std::istream &is, object_t &obj)\n{\n    is >> obj.data1;\n    is >> obj.data2;\n    return is;\n}\n\nint main()\n{\n    object_t obj;\n\n    std::cin >> obj;\n    std::cout << obj;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\n42 \u21b5\n43 \u21b5\ndata1: 42\ndata2: 43\n```", "```cpp\n#include <stdio.h>\n\nint main()\n{\n    char buf[2];\n    scanf(\"%s\", buf);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is 42 \u21b5\n*** stack smashing detected ***: <unknown> terminated\nAborted (core dumped)\n```", "```cpp\n#include <stdio.h>\n\nint main()\n{\n    char buf[2];\n    scanf(\"%2s\", buf);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is 42 \u21b5\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\ntemplate<std::size_t N>\nclass buf_t\n{\n    char m_buf[N];\n\npublic:\n\n    constexpr auto size()\n    { return N; }\n\n    constexpr auto data()\n    { return m_buf; }\n};\n\ntemplate<std::size_t N>\nstd::istream &operator>>(std::istream &is, buf_t<N> &b)\n{\n    is >> std::setw(b.size()) >> b.data();\n    return is;\n}\n\nint main()\n{\n    buf_t<2> buf;\n    std::cin >> buf;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is 42 \u21b5\n```", "```cpp\n#include <string>\n#include <iostream>\n\nint main()\n{\n    std::string buf;\n    std::cin >> buf;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is 42 \u21b5\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"buffered\" << '\\n';\n    std::cout << \"buffer flushed\" << std::endl;\n    std::cerr << \"buffer flushed\" << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nbuffer\nbuffer flushed\nbuffer flushed\n```", "```cpp\n#include <iostream>\n\n#ifndef NDEBUG\n#define DEBUG(...) fprintf(stdout, __VA_ARGS__);\n#else\n#define DEBUG(...)\n#endif\n\nint main()\n{\n    DEBUG(\"The answer is: %d\\n\", 42);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\n#ifndef DEBUG_LEVEL\n#define DEBUG_LEVEL 0\n#endif\n\n#ifndef NDEBUG\n#define DEBUG(level,...) \\\n    if(level <= DEBUG_LEVEL) fprintf(stdout, __VA_ARGS__);\n#else\n#define DEBUG(...)\n#endif\n\nint main()\n{\n    DEBUG(0, \"The answer is: %d\\n\", 42);\n    DEBUG(1, \"The answer no is: %d\\n\", 43);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n\nint main()\n{\n    if constexpr (!g_ndebug) {\n        std::cout << \"The answer is: \" << 42 << '\\n';\n    }\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\n#ifdef DEBUG_LEVEL\nconstexpr auto g_debug_level = DEBUG_LEVEL;\n#else\nconstexpr auto g_debug_level = 0;\n#endif\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n\nint main()\n{\n    if constexpr (!g_ndebug && (0 <= g_debug_level)) {\n        std::cout << \"The answer is: \" << 42 << '\\n';\n    }\n\n    if constexpr (!g_ndebug && (1 <= g_debug_level)) {\n        std::cout << \"The answer is not: \" << 43 << '\\n';\n    }\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\n#ifdef DEBUG_LEVEL\nconstexpr auto g_debug_level = DEBUG_LEVEL;\n#else\nconstexpr auto g_debug_level = 0;\n#endif\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n\ntemplate <std::size_t LEVEL>\nconstexpr void debug(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        func();\n    };\n}\n\nint main()\n{\n    debug<0>([] {\n        std::cout << \"The answer is: \" << 42 << '\\n';\n    });\n\n    debug<1>([] {\n        std::cout << \"The answer is not: \" << 43 << '\\n';\n    });\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n> g++ -std=c++17 -O3 -DNDEBUG scratchpad.cpp; ./a.out\n> ls -al a.out\n-rwxr-xr-x 1 user users 8600 Apr 13 18:23 a.out\n\n> readelf -s a.out | grep cout\n```", "```cpp\n> g++ -std=c++17 scratchpad.cpp; ./a.out\n> ls -al a.out\n-rwxr-xr-x 1 user users 8888 Apr 13 18:24 a.out\n\n> readelf -s a.out | grep cout\n    23: 0000000000201060 272 OBJECT GLOBAL DEFAULT 24 _ZSt4cout@GLIBCXX_3.4 (5)\n    59: 0000000000201060 272 OBJECT GLOBAL DEFAULT 24 _ZSt4cout@@GLIBCXX_3.4\n```", "```cpp\n#include <iostream>\n\n#ifndef NDEBUG\n#define DEBUG(fmt, args...) \\\n    fprintf(stdout, \"%s [%d]: \" fmt, __FILE__, __LINE__, args);\n#else\n#define DEBUG(...)\n#endif\n\nint main()\n{\n    DEBUG(\"The answer is: %d\\n\", 42);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nscratchpad.cpp [11]: The answer is: 42\n```", "```cpp\n#include <iostream>\n\n#ifdef DEBUG_LEVEL\nconstexpr auto g_debug_level = DEBUG_LEVEL;\n#else\nconstexpr auto g_debug_level = 0;\n#endif\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n\n#define console std::cout << __FILE__ << \" [\" << __LINE__ << \"]: \"\n\ntemplate <std::size_t LEVEL>\nconstexpr void debug(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        func();\n    };\n}\n\nint main()\n{\n    debug<0>([] {\n        console << \"The answer is: \" << 42 << '\\n';\n    });\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nscratchpad.cpp [27]: The answer is: 42\n```", "```cpp\n#ifdef DEBUG_LEVEL\nconstexpr auto g_debug_level = DEBUG_LEVEL;\n#else\nconstexpr auto g_debug_level = 0;\n#endif\n\n#ifdef NDEBUG\nconstexpr auto g_ndebug = true;\n#else\nconstexpr auto g_ndebug = false;\n#endif\n```", "```cpp\ntemplate <std::size_t LEVEL>\nconstexpr void debug(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        std::cout << \"\\033[1;32mDEBUG\\033[0m \";\n        func();\n    };\n}\n```", "```cpp\ntemplate <std::size_t LEVEL>\nconstexpr void warning(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        std::cout << \"\\033[1;33mWARNING\\033[0m \";\n        func();\n    };\n}\n\ntemplate <std::size_t LEVEL>\nconstexpr void fatal(void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        std::cout << \"\\033[1;31mFATAL ERROR\\033[0m \";\n        func();\n        ::exit(-1);\n    };\n}\n\ntemplate <std::size_t LEVEL>\nconstexpr void fatal(int error_code, void(*func)()) {\n    if constexpr (!g_ndebug && (LEVEL <= g_debug_level)) {\n        std::cout << \"\\033[1;31mFATAL ERROR\\033[0m \";\n        func();\n        ::exit(error_code);\n    };\n}\n```", "```cpp\nint main()\n{\n    debug<0>([] {\n        console << \"The answer is: \" << 42 << '\\n';\n    });\n\n    warning<0>([] {\n        console << \"The answer might be: \" << 42 << '\\n';\n    });\n\n    fatal<0>([] {\n        console << \"The answer was not: \" << 42 << '\\n';\n    });\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nDEBUG scratchpad.cpp [54]: The answer is: 42\nWARNING scratchpad.cpp [58]: The answer might be: 42\nFATAL ERROR scratchpad.cpp [62]: The answer was not: 42\n```", "```cpp\n#include <sstream>\n#include <iostream>\n\nint main()\n{\n    std::stringstream stream;\n    stream << \"The answer is: \" << 42 << '\\n';\n\n    std::cout << stream.str() << std::flush;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::clog << \"The answer is: \" << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World\" << std::endl;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nHello World\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World\\n\" << std::flush;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nHello World\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World\\n\";\n    std::cout << \"Hello World\\n\";\n    std::cout << \"Hello World\\n\";\n    std::cout << \"Hello World\" << std::endl;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nHello World\nHello World\nHello World\nHello World\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World\" << std::endl;\n    std::cout << \"Hello World\" << std::endl;\n    std::cout << \"Hello World\" << std::endl;\n    std::cout << \"Hello World\" << std::endl;\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nHello World\nHello World\nHello World\nHello World\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << std::boolalpha;\n    std::cout << \"The answer is: \" << true << '\\n';\n    std::cout << \"The answer is: \" << false << '\\n';\n\n    std::cout << std::noboolalpha;\n    std::cout << \"The answer is: \" << true << '\\n';\n    std::cout << \"The answer is: \" << false << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: true\nThe answer is: false\nThe answer is: 1\nThe answer is: 0\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << \"The answer is: \" << 42 << '\\n' << std::hex \n              << \"The answer is: \" << 42 << '\\n';\n    std::cout << \"The answer is: \" << 42 << '\\n' << std::dec \n              << \"The answer is: \" << 42 << '\\n';\n    std::cout << \"The answer is: \" << 42 << '\\n' << std::oct \n              << \"The answer is: \" << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 42\nThe answer is: 2a\nThe answer is: 2a\nThe answer is: 42\nThe answer is: 42\nThe answer is: 52\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << std::hex << std::uppercase << \"The answer is: \" \n              << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 2A\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    std::cout << std::showbase;\n    std::cout << std::hex << \"The answer is: \" << 42 << '\\n';\n    std::cout << std::dec << \"The answer is: \" << 42 << '\\n';\n    std::cout << std::oct << \"The answer is: \" << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 0x2a\nThe answer is: 42\nThe answer is: 052\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    int i = 0;\n    std::cout << &i << '\\n';\n    std::cout << std::hex << std::showbase << std::uppercase \n              << reinterpret_cast<uintptr_t>(&i) << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\n0x7fff51d370b4\n0X7FFF51D370B4\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\nint main()\n{\n    std::cout << \"The answer is: \" << std::setw(18) << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is:                 42\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\nint main()\n{\n    std::cout << \"The answer is: \" << std::setw(18) << std::setfill('0') \n              << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 000000000000000042\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\nint main()\n{\n    std::cout << \"The answer is: \"\n              << std::setw(18) << std::left << std::setfill('0')\n              << 42 << '\\n';\n\n    std::cout << \"The answer is: \"\n              << std::setw(18) << std::right << std::setfill('0')\n              << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 420000000000000000\nThe answer is: 000000000000000042\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\nint main()\n{\n    int i = 0;\n\n    std::cout << std::hex\n              << std::showbase;\n\n    std::cout << \"The answer is: \"\n              << std::setw(18) << std::internal << std::setfill('0')\n              << 42 << '\\n';\n\n    std::cout << \"The answer is: \"\n              << std::setw(18) << std::internal << std::setfill('0')\n              << &i << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 0x000000000000002a\nThe answer is: 0x00007ffc074c9be4\n```", "```cpp\n#include <iostream>\n\nint main()\n{\n    auto flags = std::cout.flags();\n    std::cout.flags(flags);\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\ntemplate<typename FUNC>\nvoid cout_transaction(FUNC f)\n{\n    auto flags = std::cout.flags();\n    f();\n    std::cout.flags(flags);\n}\n\nint main()\n{\n    cout_transaction([]{\n        std::cout << std::hex << std::showbase;\n        std::cout << \"The answer is: \" << 42 << '\\n';\n    });\n\n    std::cout << \"The answer is: \" << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 0x2a\nThe answer is: 42\n```", "```cpp\n#include <iomanip>\n#include <iostream>\n\nnamespace usr\n{\n    class hex_t { } hex;\n}\n\nstd::ostream &\noperator<<(std::ostream &os, const usr::hex_t &obj)\n{\n    os << std::hex << std::showbase << std::internal\n        << std::setfill('0') << std::setw(18);\n\n    return os;\n}\n\nint main()\n{\n    std::cout << \"The answer is: \" << usr::hex << 42 << '\\n';\n}\n\n> g++ -std=c++17 scratchpad.cpp; ./a.out\nThe answer is: 0x000000000000002a\n```", "```cpp\nint\nmain(int argc, char **argv)\n{\n    try {\n        return protected_main(argc, argv);\n    }\n    catch (const std::exception &e) {\n        std::cerr << \"Caught unhandled exception:\\n\";\n        std::cerr << \" - what(): \" << e.what() << '\\n';\n    }\n    catch (...) {\n        std::cerr << \"Caught unknown exception\\n\";\n    }\n\n    return EXIT_FAILURE;\n}\n```", "```cpp\ncatch (const std::exception &e) {\n    std::cerr << \"Caught unhandled exception:\\n\";\n    std::cerr << \" - what(): \" << e.what() << '\\n';\n}\n```", "```cpp\ncatch (...) {\n    std::cerr << \"Caught unknown exception\\n\";\n}\n```", "```cpp\ntry {\n    return protected_main(argc, argv);\n}\n```", "```cpp\nint\nprotected_main(int argc, char **argv)\n{\n    using namespace gsl;\n\n    auto endl = true;\n    auto args = make_span(argv, argc);\n\n    for (int i = 1, num = 0; i < argc; i++) {\n        cstring_span<> span_arg = ensure_z(args.at(i));\n\n        if (span_arg == \"-n\") {\n            endl = false;\n            continue;\n        }\n\n        if (span_arg == \"--help\") {\n            handle_help();\n        }\n\n        if (span_arg == \"--version\") {\n            handle_version();\n        }\n\n        if (num++ > 0) {\n            std::cout << \" \";\n        }\n\n        std::cout << span_arg.data();\n    }\n\n    if (endl) {\n        std::cout << '\\n';\n    }\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\nauto endl = true;\n```", "```cpp\nauto args = make_span(argv, argc);\n```", "```cpp\nfor (int i = 1, num = 0; i < argc; i++) {\n    cstring_span<> span_arg = ensure_z(args.at(i));\n```", "```cpp\nfor (const auto &arg : args) {\n    ...\n}\n```", "```cpp\nif (span_arg == \"-n\") {\n    endl = false;\n    continue;\n}\n```", "```cpp\nif (span_arg == \"--help\") {\n    handle_help();\n}\n\nif (span_arg == \"--version\") {\n    handle_version();\n}\n```", "```cpp\n> echo Hello World\nHello World\n```", "```cpp\nif (num++ > 0) {\n    std::cout << \" \";\n}\n```", "```cpp\nstd::cout << span_arg.data();\n```", "```cpp\nif (endl) {\n    std::cout << '\\n';\n}\n\nreturn EXIT_SUCCESS;\n```", "```cpp\nif (span_arg == \"-n\") {\n    endl = false;\n    continue;\n}\n```", "```cpp\nvoid\nhandle_help()\n{\n    std::cout\n            << \"Usage: echo [SHORT-OPTION]... [STRING]...\\n\"\n            << \" or: echo LONG-OPTION\\n\"\n            << \"Echo the STRING(s) to standard output.\\n\"\n            << \"\\n\"\n            << \" -n do not output the trailing newline\\n\"\n            << \" --help display this help and exit\\n\"\n            << \" --version output version information and exit\\n\";\n\n    ::exit(EXIT_SUCCESS);\n}\n```", "```cpp\nvoid\nhandle_version()\n{\n    std::cout\n            << \"echo (example) 1.0\\n\"\n            << \"Copyright (C) ???\\n\"\n            << \"\\n\"\n            << \"Written by Rian Quinn.\\n\";\n\n    ::exit(EXIT_SUCCESS);\n}\n```", "```cpp\n# ------------------------------------------------------------------------------\n# Header\n# ------------------------------------------------------------------------------\n\ncmake_minimum_required(VERSION 3.6)\nproject(chapter6)\n\ninclude(ExternalProject)\nfind_package(Git REQUIRED)\n\nset(CMAKE_CXX_STANDARD 17)\n\n# ------------------------------------------------------------------------------\n# Guideline Support Library\n# ------------------------------------------------------------------------------\n\nlist(APPEND GSL_CMAKE_ARGS\n    -DGSL_TEST=OFF\n    -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}\n)\n\nExternalProject_Add(\n    gsl\n    GIT_REPOSITORY https://github.com/Microsoft/GSL.git\n    GIT_SHALLOW 1\n    CMAKE_ARGS ${GSL_CMAKE_ARGS}\n    PREFIX ${CMAKE_BINARY_DIR}/external/gsl/prefix\n    TMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/tmp\n    STAMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/stamp\n    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/gsl/download\n    SOURCE_DIR ${CMAKE_BINARY_DIR}/external/gsl/src\n    BINARY_DIR ${CMAKE_BINARY_DIR}/external/gsl/build\n)\n\n# ------------------------------------------------------------------------------\n# Executable\n# ------------------------------------------------------------------------------\n```", "```cpp\n\ninclude_directories(${CMAKE_BINARY_DIR}/include)\nadd_executable(example1 example1.cpp)\nadd_dependencies(example1 gsl)\n```", "```cpp\ncmake_minimum_required(VERSION 3.6)\nproject(chapter6)\n\ninclude(ExternalProject)\nfind_package(Git REQUIRED)\n\nset(CMAKE_CXX_STANDARD 17)\n```", "```cpp\n# ------------------------------------------------------------------------------\n# Guideline Support Library\n# ------------------------------------------------------------------------------\n\nlist(APPEND GSL_CMAKE_ARGS\n    -DGSL_TEST=OFF\n    -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}\n)\n\nExternalProject_Add(\n    gsl\n    GIT_REPOSITORY https://github.com/Microsoft/GSL.git\n    GIT_SHALLOW 1\n    CMAKE_ARGS ${GSL_CMAKE_ARGS}\n    PREFIX ${CMAKE_BINARY_DIR}/external/gsl/prefix\n    TMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/tmp\n    STAMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/stamp\n    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/gsl/download\n    SOURCE_DIR ${CMAKE_BINARY_DIR}/external/gsl/src\n    BINARY_DIR ${CMAKE_BINARY_DIR}/external/gsl/build\n)\n```", "```cpp\ninclude_directories(${CMAKE_BINARY_DIR}/include)\nadd_executable(example1 example1.cpp)\n```", "```cpp\n> mkdir build; cd build\n> cmake ..; make\n...\n> ./example1 Hello World\nHello World\n```", "```cpp\n#include <fstream>\n#include <iostream>\n\n#include <gsl/gsl>\nusing namespace gsl;\n\nvoid\nredirect_output(\n    const std::ifstream &is,\n    const std::ofstream &os,\n    std::function<void()> f)\n{\n    auto cinrdbuf = std::cin.rdbuf();\n    auto coutrdbuf = std::cout.rdbuf();\n\n    std::cin.rdbuf(is.rdbuf());\n    std::cout.rdbuf(os.rdbuf());\n\n    f();\n\n    std::cin.rdbuf(cinrdbuf);\n    std::cout.rdbuf(coutrdbuf);\n}\n\nauto\nopen_streams(cstring_span<> port)\n{\n    std::ifstream is(port.data());\n    std::ofstream os(port.data());\n\n    if (!is || !os) {\n        std::clog << \"ERROR: unable to open serial port:\" << port.data() << '\\n';\n        ::exit(EXIT_FAILURE);\n    }\n\n    return std::make_pair(std::move(is), std::move(os));\n}\n\nint\nprotected_main(int argc, char** argv)\n{\n    auto args = make_span(argv, argc);\n\n    if (argc != 2) {\n        std::clog << \"ERROR: unsupported number of arguments\\n\";\n        ::exit(EXIT_FAILURE);\n    }\n\n    auto [is, os] = open_streams(\n        ensure_z(args.at(1))\n    );\n\n    redirect_output(is, os, []{\n        std::string buf;\n\n        std::cin >> buf;\n        std::cout << buf << std::flush;\n    });\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\nint\nprotected_main(int argc, char** argv)\n{\n    auto args = make_span(argv, argc);\n\n    if (argc != 2) {\n        std::clog << \"ERROR: unsupported number of arguments\\n\";\n        ::exit(EXIT_FAILURE);\n    }\n\n    auto [is, os] = open_streams(\n        ensure_z(args.at(1))\n    );\n\n    redirect_output(is, os, []{\n        std::string buf;\n\n        std::cin >> buf;\n        std::cout << buf << std::flush;\n    });\n\n    return EXIT_SUCCESS;\n}\n```", "```cpp\nauto args = make_span(argv, argc);\n```", "```cpp\nif (argc != 2) {\n    std::clog << \"ERROR: unsupported number of arguments\\n\";\n    ::exit(EXIT_FAILURE);\n}\n```", "```cpp\nauto [is, os] = open_streams(\n    ensure_z(args.at(1))\n);\n```", "```cpp\nauto\nopen_streams(cstring_span<> port)\n{\n    std::ifstream is(port.data());\n    std::ofstream os(port.data());\n\n    if (!is || !os) {\n        std::clog << \"ERROR: unable to open serial port:\" << port.data() << '\\n';\n        ::exit(EXIT_FAILURE);\n    }\n\n    return std::make_pair(std::move(is), std::move(os));\n}\n```", "```cpp\nstd::ifstream is(port.data());\nstd::ofstream os(port.data());\n```", "```cpp\nif (!is || !os) {\n    std::clog << \"ERROR: unable to open serial port:\" << port.data() << '\\n';\n    ::exit(EXIT_FAILURE);\n}\n```", "```cpp\nredirect_output(is, os, []{\n    std::string buf;\n\n    std::cin >> buf;\n    std::cout << buf << std::flush;\n});\n```", "```cpp\nvoid\nredirect_output(\n    const std::ifstream &is,\n    const std::ofstream &os,\n    std::function<void()> f)\n{\n    auto cinrdbuf = std::cin.rdbuf();\n    auto coutrdbuf = std::cout.rdbuf();\n\n    std::cin.rdbuf(is.rdbuf());\n    std::cout.rdbuf(os.rdbuf());\n\n    f();\n\n    std::cin.rdbuf(cinrdbuf);\n    std::cout.rdbuf(coutrdbuf);\n}\n```", "```cpp\nauto cinrdbuf = std::cin.rdbuf();\nauto coutrdbuf = std::cout.rdbuf();\n```", "```cpp\nstd::cin.rdbuf(is.rdbuf());\nstd::cout.rdbuf(os.rdbuf());\n```", "```cpp\nstd::cin.rdbuf(cinrdbuf);\nstd::cout.rdbuf(coutrdbuf);\n```", "```cpp\n# ------------------------------------------------------------------------------\n# Header\n# ------------------------------------------------------------------------------\n\ncmake_minimum_required(VERSION 3.6)\nproject(chapter6)\n\ninclude(ExternalProject)\nfind_package(Git REQUIRED)\n\nset(CMAKE_CXX_STANDARD 17)\n\n# ------------------------------------------------------------------------------\n# Guideline Support Library\n# ------------------------------------------------------------------------------\n\nlist(APPEND GSL_CMAKE_ARGS\n    -DGSL_TEST=OFF\n    -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}\n)\n\nExternalProject_Add(\n    gsl\n    GIT_REPOSITORY https://github.com/Microsoft/GSL.git\n    GIT_SHALLOW 1\n    CMAKE_ARGS ${GSL_CMAKE_ARGS}\n    PREFIX ${CMAKE_BINARY_DIR}/external/gsl/prefix\n    TMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/tmp\n    STAMP_DIR ${CMAKE_BINARY_DIR}/external/gsl/stamp\n    DOWNLOAD_DIR ${CMAKE_BINARY_DIR}/external/gsl/download\n    SOURCE_DIR ${CMAKE_BINARY_DIR}/external/gsl/src\n    BINARY_DIR ${CMAKE_BINARY_DIR}/external/gsl/build\n)\n\n# ------------------------------------------------------------------------------\n# Executable\n# ------------------------------------------------------------------------------\n\ninclude_directories(${CMAKE_BINARY_DIR}/include)\nadd_executable(example2 example2.cpp)\nadd_dependencies(example2 gsl)\n```", "```cpp\n> mkdir build; cd build\n> cmake ..; make\n...\n> ./example2 /dev/ttyS0\n```", "```cpp\n> cat < /dev/ttyS0\n```", "```cpp\n> echo \"Hello World\" > /dev/ttyS0\n```", "```cpp\n> cat < /dev/ttyS0\nHello World\n```"]