["```cpp\nint ThreadOne()\n{\n  std::cout << \"I am thread 1\" << std::endl;\n  return 0;\n}\n\nint main()\n{\n  std::thread T1(ThreadOne);\n\n  if (T1.joinable()) // Check if can be joined to the main thread\n    T1.join();     // Main thread waits for this to finish\n\n  _getch();\n  return 0;\n}\n```", "```cpp\nint ThreadOne()\n{\n  std::cout << \"I am thread 1\" << std::endl;\n  return 0;\n}\n\nint ThreadTwo()\n{\n  std::cout << \"I am thread 2\" << std::endl;\n  return 0;\n}\n\nint main()\n{\n  std::thread T1(ThreadOne);\n  std::thread T2(ThreadTwo);\n\n  if (T1.joinable()) // Check if can be joined to the main thread\n    T1.join();     // Main thread waits for this to finish\n\n  T2.detach();    //Detached from main thread\n\n  _getch();\n  return 0;\n}\n```", "```cpp\nclass Wrapper\n{\npublic:\n  void operator()(std::string& msg)\n  {\n    msg = \" I am from T1\";\n    std::cout << \"T1 thread initiated\" << msg << std::endl;\n\n  }\n};\n\nint main()\n{\n  std::string s = \"This is a message\";\n  std::cout << std::this_thread::get_id() << std::endl;\n\n  std::thread T1((Wrapper()), std::move(s));\n  std::cout << T1.get_id() << std::endl;\n\n  std::thread T2 = std::move(T1);\n  T2.join();\n\n  _getch();\n\n}\n```", "```cpp\n#include <thread>\n#include <string>\n#include <iostream>\n\nusing namespace std;\n\nvoid Physics()\n{\n  for (int i = 0; i > -100; i--)\n    cout << \"From Thread 1: \" << i << endl;\n\n}\n\nint main()\n{\n  std::thread t1(Physics);\n  for (int i = 0; i < 100; i++)\n    cout << \"From main: \" << i << endl;\n\n  t1.join();\n\n  int a;\n  cin >> a;\n  return 0;\n}\n```", "```cpp\n#include <thread>\n#include <string>\n#include <mutex>\n#include <iostream>\n\nusing namespace std;\n\nstd::mutex MU;\n\nvoid Locomotion(string msg, int id)\n{\n  std::lock_guard<std::mutex> guard(MU); //RAII\n  //MU.lock();\n  cout << msg << id << endl;\n  //MU.unlock();\n}\nvoid InterfaceFunction()\n{\n  for (int i = 0; i > -100; i--)\n    Locomotion(string(\"From Thread 1: \"), i);\n\n}\n\nint main()\n{\n  std::thread FirstThread(InterfaceFunction);\n  for (int i = 0; i < 100; i++)\n    Locomotion(string(\"From Main: \"), i);\n\n  FirstThread.join();\n\n  int a;\n  cin >> a;\n  return 0;\n}\n```", "```cpp\n#include <thread>\n#include <string>\n#include <mutex>\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nclass DebugLogger\n{\n  std::mutex MU;\n  ofstream f;\npublic:\n  DebugLogger()\n  {\n    f.open(\"log.txt\");\n  }\n  void ResourceSharingFunction(string id, int value)\n  {\n    std::lock_guard<std::mutex> guard(MU); //RAII\n    f << \"From\" << id << \":\" << value << endl;\n  }\n\n};\n\nvoid InterfaceFunction(DebugLogger& log)\n{\n  for (int i = 0; i > -100; i--)\n    log.ResourceSharingFunction(string(\"Thread 1: \"), i);\n\n}\n\nint main()\n{\n  DebugLogger log;\n  std::thread FirstThread(InterfaceFunction,std::ref(log));\n  for (int i = 0; i < 100; i++)\n    log.ResourceSharingFunction(string(\"Main: \"), i);\n\n  FirstThread.join();\n\n  int a;\n  cin >> a;\n  return 0;\n}\n```"]