["```cpp\n    #include <iostream>\n    #include <conio.h>\n\n    using namespace std;\n\n    int countTotalBullets(int iGun1Ammo, int iGun2Ammo)\n    {\n        return iGun1Ammo + iGun2Ammo;\n    }\n\n    int main()\n    {\n        int iGun1Ammo = 3;\n        int iGun2Ammo = 2;\n        int iTotalAmmo = CountTotalBullets(iGun1Ammo, iGun2Ammo);\n\n        cout << \"Total ammunition currently with you is\"<<iTotalAmmo;\n\n        _getch();\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <conio.h>\n\n    using namespace std;\n    int RecursiveFactorial(int number);\n    int Factorial(int number);\n    int main()\n    {\n        long iNumber;\n        cout << \"Enter the number whose factorial you want to find\";\n        cin >> iNumber;\n\n        cout << RecursiveFactorial(iNumber) << endl;\n        cout << Factorial(iNumber);\n\n        _getch();\n        return 0;\n    }\n\n    int Factorial(int number)\n    {\n        int iCounter = 1;\n        if (number < 2)\n        {\n            return 1;\n        }\n        else\n        {\n            while (number>0)\n            {\n                iCounter = iCounter*number;\n                number -= 1;\n            }\n\n        }\n        return iCounter;\n    }\n\n    int RecursiveFactorial(int number)\n    {\n        if (number < 2)\n        {\n            return 1;\n        }\n        else\n        {\n            while (number>0)\n        {\n                return number*Factorial(number - 1);\n            }\n        }\n\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <conio.h>\n\n    using namespace std;\n\n    int main()\n    {\n        float fCurrentHealth = 10.0f;\n\n        cout << \"Address where the float value is stored: \" << &fCurrentHealth << endl;\n        cout << \"Value at that address: \" << *(&fCurrentHealth) << endl;\n\n        float* pfLocalCurrentHealth = &fCurrentHealth;\n        cout << \"Value at Local pointer variable: \"<<pfLocalCurrentHealth << endl;\n        cout << \"Address of the Local pointer variable: \"<<&pfLocalCurrentHealth << endl;\n        cout << \"Value at the address of the Local pointer variable: \"<<*pfLocalCurrentHealth << endl;\n\n        _getch();\n        return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <conio.h>\n\n    using namespace std;\n\n    int main()\n    {\n        int iNumber = 5;\n        int iOurNumber;\n        float fNumber;\n\n        //No casting. C++ implicitly converts the result into an int and saves \n        //into a float\n        fNumber = iNumber/2;\n        cout << \"Number is \" << fNumber<<endl;\n\n        //C-style casting. Not recommended as this is not type safe\n        fNumber = (float)iNumber / 2;\n        cout << \"Number is \" << fNumber<<endl;\n\n        //C++ style casting. This has valid constructors to make the casting a safe one\n        iOurNumber = static_cast<int>(fNumber);\n        cout << \"Number is \" << iOurNumber << endl;\n\n        _getch();\n        return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <conio.h>\n    #include <string>\n\n    using namespace std;\n\n    int main()\n    {\n\n      int iNumberofGuns, iCounter;\n      string * sNameOfGuns;\n      cout << \"How many guns would you like to purchase? \";\n      cin >> iNumberofGuns;\n      sNameOfGuns = new string[iNumberofGuns];\n      if (sNameOfGuns == nullptr)\n        cout << \"Error: memory could not be allocated\";\n      else\n      {\n        for (iCounter = 0; iCounter<iNumberofGuns; iCounter++)\n        {\n          cout << \"Enter name of the gun: \";\n          cin >> sNameOfGuns[iCounter];\n        }\n        cout << \"You have purchased: \";\n        for (iCounter = 0; iCounter<iNumberofGuns; iCounter++)\n          cout << sNameOfGuns[iCounter] << \", \";\n        delete[] sNameOfGuns;\n      }\n\n      _getch();\n      return 0;\n    }\n    ```", "```cpp\n    #include <iostream>\n    #include <conio.h>\n\n    using namespace std;\n\n    void Multi_By_Power_2(int iNumber, int iPower);\n    void BitwiseAnd(int iNumber, int iNumber2);\n    void BitwiseOr(int iNumber, int iNumber2);\n    void Complement(int iNumber4);\n    void BitwiseXOR(int iNumber,int iNumber2);\n\n    int main()\n    {\n      int iNumber = 4, iNumber2 = 3;\n      int iPower = 2;\n      unsigned int iNumber4 = 8;\n\n      Multi_By_Power_2(iNumber, iPower);\n      BitwiseAnd(iNumber,iNumber2);\n      BitwiseOr(iNumber, iNumber2);\n      BitwiseXOR(iNumber,iNumber2);\n      Complement(iNumber4);\n\n      _getch();\n      return 0;\n    }\n\n    void Multi_By_Power_2(int iNumber, int iPower)\n    {\n      cout << \"Result is :\" << (iNumber << iPower)<<endl;\n    }\n    void BitwiseAnd(int iNumber, int iNumber2)\n    {\n      cout << \"Result is :\" << (iNumber & iNumber2) << endl;\n    }\n    void BitwiseOr(int iNumber, int iNumber2)\n    {\n      cout << \"Result is :\" << (iNumber | iNumber2) << endl;\n    }\n    void Complement(int iNumber4)\n    {\n      cout << \"Result is :\" << ~iNumber4 << endl;\n    }\n    void BitwiseXOR(int iNumber,int iNumber2)\n    {\n      cout << \"Result is :\" << (iNumber^iNumber2) << endl;\n    }\n    ```", "```cpp\nint totalammo,type,rounds;\n```", "```cpp\nint packaged_data;\npackaged_data = (totalammo << 8) | (type << 7) | rounds;\n```", "```cpp\nAAAAAAATRRRRRRR\n```"]