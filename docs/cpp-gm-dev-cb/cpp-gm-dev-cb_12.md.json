["```cpp\n    #include <iostream>\n    #include \"../AudioDataHandler.h\"\n\n    #include \"../lib/SDL2/include/SDL2/SDL.h\"\n\n    #include \"iaudiodevice.hpp\"\n    #include \"iaudiocontext.hpp\"\n    #include \"audioobject.hpp\"\n\n    #include \"sdl/sdlaudiodevice.hpp\"\n    #include \"sdl/sdlaudiocontext.hpp\"\n\n    #define FILE_PATH \"./res/audio/testClip.wav\"\n\n    int main(int argc, char** argv)\n    {\n      SDL_Init(SDL_INIT_AUDIO);\n\n      IAudioDevice* device = new SDLAudioDevice();\n      IAudioContext* context = new SDLAudioContext();\n\n      IAudioData* data = device->CreateAudioFromFile(FILE_PATH);\n\n      SampleInfo info;\n      info.volume = 1.0;\n      info.pitch = 0.7298149802137;\n\n      AudioObject sound(info, data);\n      sound.SetPos(0.0);\n\n      char in = 0;\n      while(in != 'q')\n      {\n        std::cin >> in;\n        switch(in)\n        {\n          case 'a':\n            context->PlayAudio(sound);\n            break;\n          case 's':\n            context->PauseAudio(sound);\n            break;\n          case 'd':\n            context->StopAudio(sound);\n            break;\n        }\n      }\n\n      device->ReleaseAudio(data);\n      delete context;\n      delete device;\n\n      SDL_Quit();\n      return 0;\n    }\n\n    int main()\n    {\n      AudioDataHandler _audioData;\n      cout<<_audioData.GetAudio(AudioDataHandler::BACKGROUND);\n    }\n    ```", "```cpp\nstruct SampleInfo\n{\n  double volume;\n  double pitch;\n};\n\nSampleInfo info;\ninfo.volume = 1.0;\ninfo.pitch = 0.7298149802137;\n\nAudioObject sound(info, data);\nsound.SetPos(0.0);\n```", "```cpp\n#pragma once\n#include <iostream>\n#include \"../lib/SDL2/include/SDL2/SDL.h\"\n\n#include \"iaudiodevice.hpp\"\n#include \"iaudiocontext.hpp\"\n#include \"audioobject.hpp\"\n\n#include \"sdl/sdlaudiodevice.hpp\"\n#include \"sdl/sdlaudiocontext.hpp\"\n\n#define FILE_PATH \"./res/audio/testClip.wav\"\n\nclass GlobalAudioClass\n{\nprivate:\n\n  AudioObject* _audObj;\n  IAudioDevice* device = new SDLAudioDevice();\n  IAudioContext* context = new SDLAudioContext();\n\n  IAudioData* data = device->CreateAudioFromFile(FILE_PATH);\n\n  SampleInfo info;\n\n  static GlobalAudioClass *s_instance;\n\n  GlobalAudioClass()\n  {\n    info.volume = 1.0;\n   info.pitch = 0.7298149802137;\n    _audObj = new AudioObject(info,data);\n  }\n  ~GlobalAudioClass()\n  {\n    //Delete all the pointers here\n  }\npublic:\n  AudioObject* get_value()\n  {\n    return _audObj;\n  }\n  void set_value(AudioObject* obj)\n  {\n    _audObj = obj;\n  }\n  static GlobalAudioClass *instance()\n  {\n    if (!s_instance)\n      s_instance = new GlobalAudioClass();\n    return s_instance;\n  }\n};\n\n// Allocating and initializing GlobalAudioClass's\n// static data member.  The pointer is being\n// allocated - not the object inself.\nGlobalAudioClass *GlobalAudioClass::s_instance = 0;\n```", "```cpp\n#pragma once\n\n#include <string>\nusing namespace std;\n\nclass AudioDataHandler\n{\npublic:\n  AudioDataHandler();\n  ~AudioDataHandler();\n  string GetAudio(int data) // Set one of the enum values here from the driver program\n  {\n    return Files[data];\n  }\n\n  enum AUDIO\n  {\n    NONE=0,\n    BACKGROUND,\n    BATTLE,\n    UI\n  };\nprivate:\n  string Files[] =\n  {\n    \"\",\n    \"Hello.wav\",\n    \"Battlenn.wav\",\n    \"Click.wav\"\n  }\n\n};\n\nint main()\n{\n  AudioDataHandler _audioData;\n  cout<<_audioData.GetAudio(AudioDataHandler::BACKGROUND);\n}\n```"]