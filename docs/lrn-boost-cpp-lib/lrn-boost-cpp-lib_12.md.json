["```cpp\nchar *buffer = new char[BUFSIZ];\n\u2026 \u2026\ndelete [] buffer;\n```", "```cpp\n 1 class String\n 2 {\n 3 public:\n 4   String(const char *str = 0)\n 5   {  buffer_ = dupstr(str, len_);  }\n 6 \n 7   ~String() { delete [] buffer_; }\n 8\n 9 private:\n10   char *buffer_;\n11   size_t len_;\n12 };\n13\n14 // dupstr returns a copy of s, allocated dynamically.\n15 //   Sets len to the length of s.\n16 char *dupstr(const char *str, size_t& len) {\n17   char *ret = nullptr;\n18\n19   if (!str) {\n20     len = 0;\n21     return ret;\n22   }\n23   len = strlen(str);\n24   ret = new char[len + 1];\n25   strncpy(ret, str, len + 1);\n26\n27   return ret;\n28 }\n```", "```cpp\n {\n   String favBand(\"Led Zeppelin\");\n ...   ...\n } // end of scope. favBand.~String() called.\n```", "```cpp\n 1 #include <iostream>\n 2\n 3 class Foo {\n 4 public:\n 5   Foo() {}\n 6\n 7   Foo(const Foo&) {\n 8     std::cout << \"Foo(const Foo&)\\n\";\n 9   }\n10\n11   ~Foo() {\n12     std::cout << \"~Foo()\\n\";\n13   }\n14\n15   Foo& operator=(const Foo&) {\n16     std::cout << \"operator=(const Foo&)\\n\";\n17     return *this;\n18   }\n19 };\n20\n21 class Bar {\n22 public:\n23   Bar() {}\n24\n25 private:\n26   Foo f;\n27 };\n28\n29 int main() {\n30   std::cout << \"Creating b1\\n\";\n31   Bar b1;\n32   std::cout << \"Creating b2 as a copy of b1\\n\";\n33   Bar b2(b1);\n34\n35   std::cout << \"Assigning b1 to b2\\n\";\n36   b2 = b1;\n37 }\n```", "```cpp\nCreating b1\nCreating b2 as a copy of b1\nFoo(const Foo&)\nAssigning b1 to b2\noperator=(const Foo&)\n~Foo()\n~Foo()\n```", "```cpp\n 1 String::String(const String &str) : buffer_(0), len_(0)\n 2 {\n 3   buffer_ = dupstr(str.buffer_, len_);\n 4 }\n```", "```cpp\n 1 String band1(\"Deep Purple\");\n 2 String band2(\"Rainbow\");\n 3 band1 = band2;\n```", "```cpp\n 1 String& String::operator=(const String& rhs)\n 2 {\n 3   String tmp(rhs);   // copy the rhs in a temp variable\n 4   swap(tmp);         // swap tmp's state with this' state.\n 5   return *this;      // tmp goes out of scope, releases this'\n 6                      // old state\n 7 }\n```", "```cpp\n 1 void String::swap(String&rhs) noexcept\n 2 {\n 3   using std::swap;\n 3   swap(buffer_, rhs.buffer_);\n 4   swap(len_, rhs.len_);\n 5 }\n```", "```cpp\nclass TCPSocket\n{\npublic:\n  TCPSocket(const std::string& host, const std::string& port);\n  ~TCPSocket();\n\n  bool is_open();\n  vector<char> read(size_t to_read);\n  size_t write(vector<char> payload);\n\nprivate:\n  int socket_fd_;\n\n  TCPSocket(const TCPSocket&);\n  TCPSocket& operator = (const TCPSocket&);\n};\n```", "```cpp\nTCPSocket(const TCPSocket&) = delete;\nTCPSocket& operator = (const TCPSocket&) = delete;\n```", "```cpp\nTCPSocket connectToService()\n{\n  TCPSocket socket(get_service_host(),  // function gets hostname\n                   get_service_port()); // function gets port\n  return socket;\n}\n```", "```cpp\nTCPSocket socket = connectToService();\n```", "```cpp\nTCPSocket::TCPSocket(TCPSocket& that) {\n  socket_fd_ = that.socket_fd_;\n  that.socket_fd_ = -1;\n}\n```", "```cpp\n 1 void performIO(TCPSocket socket)\n 2 {\n 3   socket.write(...);\n 4   socket.read(...);\n 5   // etc.\n 6 }\n 7\n 8 TCPSocket socket = connectToService();\n 9 performIO(socket);   // moves TCPSocket into performIO\n10 // now socket.socket_fd_ == -1\n11 performIO(socket);   // OOPs: not a valid socket\n```", "```cpp\nTCPSocket socket = connectToService();\nperformIO(socket);\n```", "```cpp\nTCPSocket socket = connectToService();\nperformIO(socket);\n```", "```cpp\nperformIO(connectToService());\n```", "```cpp\nsocket&& socketref = TCPSocket(get_service_host(), \n                               get_service_port());\n```", "```cpp\n/* ill-formed */\nsocket& socketref = TCPSocket(get_service_host(), \n                              get_service_port());\n\n/* well-formed */\nconst socket& socketref = TCPSocket(get_service_host(), \n                                    get_service_port());\n```", "```cpp\nsocket&& socketref = TCPSocket(...);\nsocketref.read(...);\n```", "```cpp\nTCPSocket(const TCPSocket&) = delete;\n\nTCPSocket(TCPSocket&& rvref) : socket_fd_(-1)\n{\n  std::swap(socket_fd_, rvref.socket_fd_);\n}\n```", "```cpp\nTCPSocket connectToService()\n{\n  return TCPSocket(get_service_host(),get_service_port());\n}\n```", "```cpp\nTCPSocket socket = connectToService();\nperformIO(socket);\n```", "```cpp\nperformIO(connectToService());\n```", "```cpp\n 1 // move-constructor\n 2 String::String(String&& source) noexcept\n 3       : buffer_(0), len_(0)\n 4 {\n 5   swap(source); // See listing A.1c\n 6 }\n```", "```cpp\n 1 // move assignment\n 2 String& String::operator=(String&& rhs) noexcept\n 3 {\n 4   swap(rhs);\n 5   return *this;\n 6 }\n```", "```cpp\n 1 // move assignment\n 2 String& String::operator=(String rhs)\n 3 {\n 4   swap(rhs);\n 5   return *this;\n 6 }\n```", "```cpp\nvoid performIO(TCPSocket socket);\n\nTCPSocket socket = connectToService();\n// do stuff on socket\nperformIO(socket);  // ill-formed because socket is lvalue\n```", "```cpp\n#include <utility> // for std::moves\nperformIO(std::move(socket));\n```", "```cpp\nvoid performIO(TCPSocket&& socket);\nperformIO(std::move(socket));\n```", "```cpp\n 1 TCPSocket connectToService()\n 2 {\n 3   return TCPSocket(get_service_host(),get_service_port());\n 4 }\n 5\n 6 TCPSocket socket = connectToService();\n```", "```cpp\nstd::string reverse(std::string input);\n\nstd::string a = \"Hello\";\nstd::string b = \"World\";\nreverse(a + b);\n```", "```cpp\n 1 class String\n 2 {\n 3 public:\n 4   // Constructor\n 5   String(const char *str = 0);\n 6\n 7   // Destructor\n 8   ~String();\n 9\n10   // Copy constructor\n11   String(const String& that);\n12\n13   // Copy assignment operator\n14   String& operator=(const String& rhs);\n15\n16   // Move constructor\n17   String(String&& that);\n18\n19   // Move assignment\n20   String& operator=(String&& rhs);\n21   \u2026\n22 };\n```", "```cpp\n 1 #include <boost/move/move.hpp>\n 2 #include <boost/swap.hpp>\n 3\n 4 class String {\n 5 private:\n 6   BOOST_COPYABLE_AND_MOVABLE(String);\n 7\n 8 public:\n 9   // Constructor\n10   String(const char *str = 0);\n11\n12   // Destructor\n13   ~String();\n14\n15   // Copy constructor\n16   String(const String& that);\n17\n18   // Copy assignment operator\n19   String& operator=(BOOST_COPY_ASSIGN_REF(String) rhs);\n20\n21   // Move constructor\n22   String(BOOST_RV_REF(String) that);\n23\n24   // Move assignment\n25   String& operator=(BOOST_RV_REF(String) rhs);\n26 \n27   void swap(String& rhs);\n28\n29 private:\n30   char *buffer_;\n31   size_t size_;\n32 };\n```", "```cpp\n 1 // Copy constructor\n 2 String::String(const String& that) : buffer_(0), len_(0)\n 3 {\n 4   buffer_ = dupstr(that.buffer_, len_);\n 5 }\n 6 \n 7 // Copy assignment operator\n 8 String& String::operator=(BOOST_COPY_ASSIGN_REF(String)rhs)\n 9 {\n10   String tmp(rhs);\n11   swap(tmp);        // calls String::swap member\n12   return *this;\n13 }\n14 \n15 // Move constructor\n16 String::String(BOOST_RV_REF(String) that) : buffer_(0), \n17                                             size_(0) \n18 { \n19   swap(that);      // calls String::swap member \n20 }\n21 // Move assignment operator\n22 String& String::operator=(BOOST_RV_REF(String)rhs)\n23 {\n24   swap(rhs);\n25   String tmp;\n26   rhs.swap(tmp);\n27\n28   return *this;\n29 }\n30 \n31 void String::swap(String& that)\n32 {\n33   boost::swap(buffer_, that.buffer_);\n34   boost::swap(size_, that.size_);\n35 }\n```", "```cpp\nif (this != &rhs) {\n  \u2026\n}\n```", "```cpp\n#include <boost/move/move.hpp>\n\nBOOST_COPYABLE_AND_MOVABLE(classname)\nBOOST_MOVABLE_BUT_NOT_COPYABLE(classname)\nBOOST_COPY_ASSIGN_REF(classname)\nBOOST_RV_REF(classname)\n```", "```cpp\n 1 String getName();                       // return by value\n 2 void setName(BOOST_RV_REF(String) str); // rvalue ref overload\n 3 void setName(const String&str);        // lvalue ref overload\n 4 \n 5 String str1(\"Hello\");                 \n 6 String str2(str1);                      // copy ctor\n 7 str2 = getName();                       // move assignment\n 8 String str3(boost::move(str2));         // move ctor\n 9 String str4;\n10 str4 = boost::move(str1);               // move assignment\n11 setName(String(\"Hello\"));               // rvalue ref overload\n12 setName(str4);                          // lvalue ref overload\n13 setName(boost::move(str4));             // rvalue ref overload\n\n```", "```cpp\nstd::vector<std::string> names;\nstd::vector<std::string>::iterator iter = vec.begin();\n\n```", "```cpp\nstd::vector<std::string> names;\nauto iter = vec.begin();\n\n```", "```cpp\nauto var = expr;\n```", "```cpp\ntemplate <typename T>\nvoid foo(T);\n\nfoo(expr);\n```", "```cpp\nint x = 5;\nint& y = x;\nauto z = y;  // deduced type of z is int, not int&\n\n```", "```cpp\nint x = 5;\nauto& y = x;     // deduced type of y is int&\n\n```", "```cpp\nint constx = 5;\nauto y = x;     // deduced type of y is int\nauto& z = x;    // deduced type of z is constint\n\n```", "```cpp\nintconst x = 5;\nauto const y = x;    // deduced type of y is constint\n\n```", "```cpp\nauto strptr = boost::make_shared<std::string>(\"Hello\");\n// type of strptr is boost::shared_ptr<std::string>\n\nauto coords(boost::make_tuple(1.0, 2.0, 3.0));\n// type of coords is boost::tuple<double, double, double>\n```", "```cpp\n#include <boost/typeof/typeof.hpp>\n\nBOOST_AUTO(strptr, boost::make_shared<std::string>(\"Hello\"));\n// type of strptr is boost::shared_ptr<std::string>\n\nBOOST_AUTO(coords, boost::make_tuple(1.0, 2.0, 3.0));\n// type of coords is boost::tuple<double, double, double>\n```", "```cpp\nBOOST_AUTO(const& strptr, boost::make_shared<std::string>(\"Hello\"));\n// type of strptr is boost::shared_ptr<std::string>\n```", "```cpp\nfor (range-declaration : sequence-expression) {\n statements;\n}\n```", "```cpp\nT arr[N];\n...\nfor (const auto& elem : arr) {\n  // do something on each elem\n}\n```", "```cpp\nfor (const auto& elem: {\"Aragorn\", \"Gandalf\", \"Frodo Baggins\"}) {\n  // do something on each elem\n}\n```", "```cpp\nstd::vector<T> vector;\n...\nfor (const auto& elem: vector) {\n  // do something on each elem\n}\n```", "```cpp\n#include <boost/foreach.hpp>\n\nstd::vector<std::string> names;\n...\nBOOST_FOREACH(std::string& name, names) {\n  // process each elem\n}\n```", "```cpp\n 1 #include <stdexcept>\n 2 #include <iostream>\n 3 #include <string>\n 4 #include <vector>\n 5\n 6 void do_work()\n 7 {\n 8   throw std::runtime_error(\"Exception in do_work\");\n 9 }\n10\n11 std::vector<std::exception_ptr> exceptions;\n12\n13 void do_more_work()\n14 {\n15   std::exception_ptr eptr;\n16\n17   try {\n18     do_work();\n19   } catch (...) {\n20     eptr = std::current_exception();\n21   }\n22\n23   std::exception_ptr eptr2(eptr);\n24   exceptions.push_back(eptr);\n25   exceptions.push_back(eptr2);\n26 }\n27\n28 int main()\n29 {\n30   do_more_work();\n31\n32   for (auto& eptr: exceptions) try {\n33     std::rethrow_exception(eptr);\n34   } catch (std::exception& e) {\n35     std::cout << e.what() << '\\n';\n36   }\n37 }\n```", "```cpp\nException in do_work\nException in do_work\n```", "```cpp\n 1 #include <boost/exception_ptr.hpp>\n 2 #include <iostream>\n 3\n 4 void do_work()\n 5 {\n 6   throw boost::enable_current_exception(\n 7             std::runtime_error(\"Exception in do_work\"));\n 8 }\n 9\n10 void do_more_work()\n11 {\n12   boost::exception_ptr eptr;\n13 \n14   try {\n15     do_work();\n16   } catch (...) {\n17     eptr = boost::current_exception();\n18   }\n19\n20   boost::rethrow_exception(eptr);\n21 }\n22\n23 int main() {\n24   try {\n25     do_more_work();\n26   } catch (std::exception& e) {\n27     std::cout << e.what() << '\\n';\n28   }\n29 }\n```"]