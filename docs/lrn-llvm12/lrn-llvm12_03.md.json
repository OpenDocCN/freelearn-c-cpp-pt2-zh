["```cpp\n    Cmake_minimum_required(VERSION 3.13.4)\n    ```", "```cpp\n    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    ```", "```cpp\n    \u00a0\u00a0project(Tinylang)\n    ```", "```cpp\n    \u00a0\u00a0find_package(LLVM REQUIRED HINTS \u00a0\u00a0\u00a0\u00a0\"${LLVM_CMAKE_PATH}\")\n    \u00a0\u00a0list(APPEND CMAKE_MODULE_PATH ${LLVM_DIR})\n    ```", "```cpp\n    \u00a0\u00a0include(ChooseMSVCCRT)\n    \u00a0\u00a0include(AddLLVM)\n    \u00a0\u00a0include(HandleLLVMOptions)\n    ```", "```cpp\n    \u00a0\u00a0include_directories(\"${LLVM_BINARY_DIR}/include\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"${LLVM_INCLUDE_DIR}\")\n    ```", "```cpp\n    \u00a0\u00a0link_directories(\"${LLVM_LIBRARY_DIR}\")\n    ```", "```cpp\n    \u00a0\u00a0set(TINYLANG_BUILT_STANDALONE 1)\n    endif()\n    ```", "```cpp\n    list(APPEND CMAKE_MODULE_PATH \u00a0\u00a0\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n    ```", "```cpp\n    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT \u00a0\u00a0\u00a0\u00a0MSVC_IDE)\n    \u00a0\u00a0message(FATAL_ERROR \"In-source builds are not \u00a0\u00a0\u00a0\u00a0allowed.\")\n    endif()\n    ```", "```cpp\n    set(TINYLANG_VERSION_STRING \"0.1\")\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/tinylang/Basic/Version.inc.in\n    \u00a0\u00a0${CMAKE_CURRENT_BINARY_DIR}/include/tinylang/Basic/Version.inc)\n    ```", "```cpp\n    include(AddTinylang)\n    ```", "```cpp\n    include_directories(BEFORE\n    \u00a0\u00a0${CMAKE_CURRENT_BINARY_DIR}/include\n    \u00a0\u00a0${CMAKE_CURRENT_SOURCE_DIR}/include\n    \u00a0\u00a0)\n    ```", "```cpp\n    add_subdirectory(lib)\n    add_subdirectory(tools)\n    ```", "```cpp\nmacro(add_tinylang_subdirectory name)\n\u00a0\u00a0add_llvm_subdirectory(TINYLANG TOOL ${name})\nendmacro()\nmacro(add_tinylang_library name)\n\u00a0\u00a0if(BUILD_SHARED_LIBS)\n\u00a0\u00a0\u00a0\u00a0set(LIBTYPE SHARED)\n\u00a0\u00a0else()\n\u00a0\u00a0\u00a0\u00a0set(LIBTYPE STATIC)\n\u00a0\u00a0endif()\n\u00a0\u00a0llvm_add_library(${name} ${LIBTYPE} ${ARGN})\n\u00a0\u00a0if(TARGET ${name})\n\u00a0\u00a0\u00a0\u00a0target_link_libraries(${name} INTERFACE \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${LLVM_COMMON_LIBS})\n\u00a0\u00a0\u00a0\u00a0install(TARGETS ${name}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0COMPONENT ${name}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RUNTIME DESTINATION bin)\n\u00a0\u00a0else()\n\u00a0\u00a0\u00a0\u00a0add_custom_target(${name})\n\u00a0\u00a0endif()\nendmacro()\nmacro(add_tinylang_executable name)\n\u00a0\u00a0add_llvm_executable(${name} ${ARGN} )\nendmacro()\nmacro(add_tinylang_tool name)\n\u00a0\u00a0add_tinylang_executable(${name} ${ARGN})\n\u00a0\u00a0install(TARGETS ${name}\n\u00a0\u00a0\u00a0\u00a0RUNTIME DESTINATION bin\n\u00a0\u00a0\u00a0\u00a0COMPONENT ${name})\nendmacro()\n```", "```cpp\nadd_subdirectory(Basic)\n```", "```cpp\nadd_tinylang_library(tinylangBasic\n\u00a0\u00a0Version.cpp\n\u00a0\u00a0)\n```", "```cpp\ncreate_subdirectory_options(TINYLANG TOOL)\nadd_tinylang_subdirectory(driver)\n```", "```cpp\nset(LLVM_LINK_COMPONENTS\n\u00a0\u00a0Support\n\u00a0\u00a0)\nadd_tinylang_tool(tinylang\n\u00a0\u00a0Driver.cpp\n\u00a0\u00a0)\ntarget_link_libraries(tinylang\n\u00a0\u00a0PRIVATE\n\u00a0\u00a0tinylangBasic\n\u00a0\u00a0)\n```", "```cpp\n#define TINYLANG_VERSION_STRING \"@TINYLANG_VERSION_STRING@\"\n```", "```cpp\n#ifndef TINYLANG_BASIC_VERSION_H\n#define TINYLANG_BASIC_VERSION_H\n#include \"tinylang/Basic/Version.inc\"\n#include <string>\nnamespace tinylang {\nstd::string getTinylangVersion();\n}\n#endif\n```", "```cpp\n#include \"tinylang/Basic/Version.h\"\nstd::string tinylang::getTinylangVersion() {\n\u00a0\u00a0return TINYLANG_VERSION_STRING;\n}\n```", "```cpp\n#include \"llvm/Support/InitLLVM.h\"\n#include \"llvm/Support/raw_ostream.h\"\n#include \"tinylang/Basic/Version.h\"\nint main(int argc_, const char **argv_) {\n\u00a0\u00a0llvm::InitLLVM X(argc_, argv_);\n\u00a0\u00a0llvm::outs() << \"Hello, I am Tinylang \"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< tinylang::getTinylangVersion()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<< \"\\n\";\n}\n```", "```cpp\n    $ cd build\n    ```", "```cpp\n    -G Ninja). The build type is set to Release, thus producing optimized binaries (-DCMAKE_BUILD_TYPE=Release). Tinylang is built as an external project alongside LLVM (-DLLVM_EXTERNAL_PROJECTS=tinylang) and the source is found in a directory parallel to the build directory (-DLLVM_EXTERNAL_TINYLANG_SOURCE_DIR=../tinylang). A target directory for the build binaries is also given (-DCMAKE_INSTALL_PREFIX=../llvm-12). As the last parameter, the path of the LLVM project directory is specified (../llvm-project/llvm).\n    ```", "```cpp\n    $ ninja\n    $ ninja install\n    ```", "```cpp\n    $ ../llvm-12/bin/tinylang\n    ```", "```cpp\n    libtinylangBasic.a file.\n    ```", "```cpp\n    $ cd build\n    ```", "```cpp\n    $ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \\\n    \u00a0\u00a0-DCMAKE_INSTALL_PREFIX=../llvm-12 \\\n    \u00a0\u00a0../llvm-project/llvm\n    ```", "```cpp\n    $ ninja\n    $ ninja install\n    ```", "```cpp\n    $ cd ..\n    ```", "```cpp\n    $ mkdir build-tinylang\n    ```", "```cpp\n    $ md build-tinylang\n    ```", "```cpp\n    $ cd build-tinylang\n    ```", "```cpp\n    $ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \\\n    \u00a0\u00a0-DLLVM_DIR=../llvm-12/lib/cmake/llvm \\\n    \u00a0\u00a0-DCMAKE_INSTALL_PREFIX=../tinylang ../tinylang/\n    ```", "```cpp\n    $ ninja\n    $ ninja install\n    ```", "```cpp\n$ llvm-config \u2013libs support\n```", "```cpp\n$ sudo apt install gcc-8-aarch64-linux-gnu \\\n\u00a0\u00a0g++-8-aarch64-linux-gnu binutils-aarch64-linux-gnu \\\n\u00a0\u00a0libstdc++-8-dev-arm64-cross\n```", "```cpp\n$ mkdir build-host\n$ cd build-host\n$ cmake -G Ninja \\\n\u00a0\u00a0-DLLVM_TARGETS_TO_BUILD=\"X86\" \\\n\u00a0\u00a0-DLLVM_ENABLE_ASSERTIONS=ON \\\n\u00a0\u00a0-DCMAKE_BUILD_TYPE=Release \\\n\u00a0\u00a0../llvm-project/llvm\n$ ninja llvm-tblgen\n$ cd ..\n```", "```cpp\n$ mkdir build-target\n$ cd build-target\n$ cmake -G Ninja \\\n\u00a0\u00a0-DCMAKE_CROSSCOMPILING=True \\\n\u00a0\u00a0-DLLVM_TABLEGEN=../build-host/bin/llvm-tblgen \\\n\u00a0\u00a0-DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-gnu \\\n\u00a0\u00a0-DLLVM_TARGET_ARCH=AArch64 \\\n\u00a0\u00a0-DLLVM_TARGETS_TO_BUILD=AArch64 \\\n\u00a0\u00a0-DLLVM_ENABLE_ASSERTIONS=ON \\\n\u00a0\u00a0-DLLVM_EXTERNAL_PROJECTS=tinylang \\\n\u00a0\u00a0-DLLVM_EXTERNAL_TINYLANG_SOURCE_DIR=../tinylang \\\n\u00a0\u00a0-DCMAKE_INSTALL_PREFIX=../target-tinylang \\\n\u00a0\u00a0-DCMAKE_BUILD_TYPE=Release \\\n\u00a0\u00a0-DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc-8 \\\n\u00a0\u00a0-DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++-8 \\\n\u00a0\u00a0../llvm-project/llvm\n$ ninja\n```"]