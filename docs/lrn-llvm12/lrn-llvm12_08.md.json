["```cpp\n[10 x i64]\n```", "```cpp\n{ float, float, i64 }\n```", "```cpp\n<{ float, float, i64 }>\n```", "```cpp\n%el2 = extractvalue [10 x i64] %x, 1\n```", "```cpp\n%xnew = insertvalue [10 x i64] %x, i64 %el2, 0\n```", "```cpp\n%color = extractvalue { float, float, i64 } %pt, 2\n```", "```cpp\n@arr = common global [8 x i64] zeroinitializer\n```", "```cpp\ndefine i64 @second() {\n\u00a0\u00a0%1 = getelementptr [8 x i64], [8 x i64]* @arr, i64 0, i64 \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\u00a0\u00a0%2 = load i64, i64* %1\n\u00a0\u00a0ret i64 %2\n}\n```", "```cpp\nllvm::Type *Component = convertType(Arr->getComponentType());\nuint64_t NumElements = Arr->getNumElem();\nreturn llvm::ArrayType::get(Component, NumElements);\n```", "```cpp\nfor (auto *D : Proc->getDecls()) {\n\u00a0\u00a0if (auto *Var =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<VariableDeclaration>(D)) {\n\u00a0\u00a0\u00a0\u00a0llvm::Type *Ty = mapType(Var);\n\u00a0\u00a0\u00a0\u00a0if (Ty->isAggregateType()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::Value *Val = Builder.CreateAlloca(Ty);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Defs.Defs.insert(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::pair<Decl *, llvm::Value *>(Var, Val));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```cpp\nauto &Selectors = Var->getSelectorList();\nfor (auto *I = Selectors.begin(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*E = Selectors.end();\n\u00a0\u00a0\u00a0\u00a0\u00a0I != E;) {\n\u00a0\u00a0if (auto *Idx = llvm::dyn_cast<IndexSelector>(*I)) {\n\u00a0\u00a0\u00a0\u00a0llvm::SmallVector<llvm::Value *, 4> IdxList;\n\u00a0\u00a0\u00a0\u00a0IdxList.push_back(emitExpr(Idx->getIndex()));\n\u00a0\u00a0\u00a0\u00a0for (++I; I != E;) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (auto *Idx2 =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<IndexSelector>(*I)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IdxList.push_back(emitExpr(Idx2->getIndex()));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++I;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Val = Builder.CreateGEP(Val, IdxList);\n\u00a0\u00a0\u00a0\u00a0Val = Builder.CreateLoad(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Val->getType()->getPointerElementType(), Val);\n\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0llvm::report_fatal_error(\"Unsupported selector\");\n\u00a0\u00a0}\n}\n```", "```cpp\nllvm::Value *FieldIdx = llvm::ConstantInt::get(Int32Ty, Idx);\n```", "```cpp\nArg->addAttr(llvm::Attribute::InReg);\n```", "```cpp\n%intpoint = bitcast { i32, i32}* %point to i64*\n```", "```cpp\nTYPE Shape = RECORD\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color: INTEGER;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROCEDURE (VAR s: Shape) GetColor(): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0INTEGER;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROCEDURE (VAR s: Shape) Area(): REAL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0END;\n```", "```cpp\nPROCEDURE (VAR s: Shape) GetColor(): INTEGER;\nBEGIN RETURN s.color; END GetColor;\n```", "```cpp\nPROCEDURE (VAR s: Shape) Area(): REAL;\nBEGIN HALT; END;\n```", "```cpp\nTYPE Circle = RECORD (Shape)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0radius: REAL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PROCEDURE (VAR s: Circle) Area(): REAL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0END;\n```", "```cpp\nPROCEDURE (VAR s: Circle) Area(): REAL;\nBEGIN RETURN 2 * radius * radius; END;\n```", "```cpp\nIF shape IS Circle THEN (* \u2026 *) END;\n```", "```cpp\n@Shape = type { i64 }\n```", "```cpp\n@Circle = type { i64, float }\n```", "```cpp\n@Shape = type { [2 x i8*]*, i64 }\n```"]