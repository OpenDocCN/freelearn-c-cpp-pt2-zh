["```cpp\ndefine i16 @sum(i16 %a, i16 %b) {\n\u00a0\u00a0%res = add i16 %a, 3\n\u00a0\u00a0ret i16 %res\n}\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu -debug-pass=Structure < sum.ll\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-stop-after=finalize-isel < sum.ll\n```", "```cpp\n---\nname:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sum\nbody:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\u00a0\u00a0bb.0 (%ir-block.0):\n\u00a0\u00a0\u00a0\u00a0\u00a0liveins: $a0, $a1\n\u00a0\u00a0\u00a0\u00a0\u00a0%1:gpr32 = COPY $a1\n\u00a0\u00a0\u00a0\u00a0\u00a0%0:gpr32 = COPY $a0\n\u00a0\u00a0\u00a0\u00a0\u00a0%2:gpr32 = ADDu %0, %1\n\u00a0\u00a0\u00a0\u00a0\u00a0$v0 = COPY %2\n\u00a0\u00a0\u00a0\u00a0\u00a0RetRA implicit $v0\n... \n```", "```cpp\n$ llc -mtriple=mips-linux-gnu \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-stop-before=mips-delay-slot-filler -simplify-mir \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0< sum.ll\u00a0\u00a0>delay.mir\n```", "```cpp\nbody:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\u00a0\u00a0bb.0 (%ir-block.0):\n\u00a0\u00a0\u00a0\u00a0\u00a0liveins: $a0, $a1\n\u00a0\u00a0\u00a0\u00a0\u00a0renamable $v0 = ADDu killed renamable $a0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0killed renamable $a1\n\u00a0\u00a0\u00a0\u00a0\u00a0PseudoReturn undef $ra, implicit $v0\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-run-pass=mips-delay-slot-filler -o - delay.mir\n```", "```cpp\nbody:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n\u00a0\u00a0bb.0 (%ir-block.0):\n\u00a0\u00a0\u00a0\u00a0\u00a0PseudoReturn undef $ra, implicit $v0 {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renamable $v0 = ADDu killed renamable $a0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0killed renamable $a1\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu < sum.ll\n```", "```cpp\n# %bb.0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jr\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ra\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addu\u00a0\u00a0\u00a0\u00a0\u00a0$2, $4, $5\n```", "```cpp\nclass Register {\n\u00a0\u00a0string name;\n}\ndef R0 : Register {\n\u00a0\u00a0let name = \"R0\";\n\u00a0\u00a0string altName = \"$0\";\n}\n```", "```cpp\nclass Register<string n> {\n\u00a0\u00a0string name = n;\n}\ndef R0 : Register<\"R0\"> {\n\u00a0\u00a0string altName = \"$0\";\n}\n```", "```cpp\ndef FeatureMips64r2\n\u00a0\u00a0: SubtargetFeature<\"mips64r2\", \"MipsArchVersion\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Mips64r2\", \"Mips64r2 ISA Support\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[FeatureMips64, FeatureMips32r2]>;\n```", "```cpp\ndef : Proc<\"mips64r2\", [FeatureMips64r2]>;\n```", "```cpp\n$ bin/llvm-tblgen \\\n\u00a0\u00a0-I../llvm-project/llvm/lib/Target/Mips/ \\\n\u00a0\u00a0-I../llvm-project/llvm/include \\\n\u00a0\u00a0../llvm-project/llvm/lib/Target/Mips/Mips.td\n```", "```cpp\n$ bin/llvm-tblgen \\\n\u00a0\u00a0-I../llvm-project/llvm/lib/Target/Mips/ \\\n\u00a0\u00a0-I../llvm-project/llvm/include \\\n\u00a0\u00a0../llvm-project/llvm/lib/Target/Mips/Mips.td \\\n\u00a0\u00a0-gen-subtarget\n```", "```cpp\nclass ADD_FM<bits<6> op, bits<6> funct> : StdArch {\n\u00a0\u00a0bits<5> rd;\n\u00a0\u00a0bits<5> rs;\n\u00a0\u00a0bits<5> rt;\n\u00a0\u00a0bits<32> Inst;\n\u00a0\u00a0let Inst{31-26} = op;\n\u00a0\u00a0let Inst{25-21} = rs;\n\u00a0\u00a0let Inst{20-16} = rt;\n\u00a0\u00a0let Inst{15-11} = rd;\n\u00a0\u00a0let Inst{10-6}\u00a0\u00a0= 0;\n\u00a0\u00a0let Inst{5-0}\u00a0\u00a0\u00a0= funct;\n}\n```", "```cpp\nclass LogicNOR<string opstr, RegisterOperand RO>:\n\u00a0\u00a0InstSE<(outs RO:$rd), (ins RO:$rs, RO:$rt),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!strconcat(opstr, \"\\t$rd, $rs, $rt\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[(set RO:$rd, (not (or RO:$rs, RO:$rt)))],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0II_NOR, FrmR, opstr> {\n\u00a0\u00a0let isCommutable = 1;\n}\n```", "```cpp\ndef NOR64 : LogicNOR<\"nor\", GPR64Opnd>, ADD_FM<0, 0x27>,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GPR_64;\n```", "```cpp\nmulticlass ADDS_M<\u2026> {\n\u00a0\u00a0def _D32 : ADDS_FT<\u2026>, FGR_32;\n\u00a0\u00a0def _D64 : ADDS_FT<\u2026>, FGR_64;\n}\n```", "```cpp\ndefm FADD : ADDS_M<\u2026>;\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu -debug-only=isel < sum.ll\n```", "```cpp\nInitial selection DAG: %bb.0 'sum:'\nSelectionDAG has 12 nodes:\n\u00a0\u00a0t0: ch = EntryToken\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t2: i32,ch = CopyFromReg t0, Register:i32 %0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t5: i16 = truncate t2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t4: i32,ch = CopyFromReg t0, Register:i32 %1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t6: i16 = truncate t4\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t7: i16 = add t5, t6\n\u00a0\u00a0\u00a0\u00a0\u00a0t8: i32 = any_extend t7\n\u00a0\u00a0t10: ch,glue = CopyToReg t0, Register:i32 $v0, t8\n\u00a0\u00a0t11: ch = MipsISD::Ret t10, Register:i32 $v0, t10:1 \n```", "```cpp\n$ llc -mtriple=mips-linux-gnu\u00a0\u00a0\u2013view-dag-combine1-dags sum.ll\n```", "```cpp\nOptimized type-legalized selection DAG: %bb.0 'sum:'\nSelectionDAG has 9 nodes:\n\u00a0\u00a0t0: ch = EntryToken\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t2: i32,ch = CopyFromReg t0, Register:i32 %0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t4: i32,ch = CopyFromReg t0, Register:i32 %1\n\u00a0\u00a0\u00a0\u00a0\u00a0t12: i32 = add t2, t4\n\u00a0\u00a0t10: ch,glue = CopyToReg t0, Register:i32 $v0, t12\n\u00a0\u00a0t11: ch = MipsISD::Ret t10, Register:i32 $v0, t10:1\n```", "```cpp\nISEL: Starting selection on root node: t12: i32 = add t2, t4\nISEL: Starting pattern match\n\u00a0\u00a0Initial Opcode index to 27835\n\u00a0\u00a0\u2026\n\u00a0\u00a0Morphed node: t12: i32 = ADDu t2, t4\nISEL: Match complete!\n```", "```cpp\n$ llc -mtriple=mips-linux-gnu -fast-isel \u2013O0 sum.ll\n```", "```cpp\n$ llc -mtriple=mipsel-linux-gnu -global-isel sum.ll\n```", "```cpp\nsqsumu $1, $2, $3\n```", "```cpp\ndef FeatureSQSum\n\u00a0\u00a0\u00a0\u00a0\u00a0: SubtargetFeature<\"sqsum\", \"HasSQSum\", \"true\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Use square-sum instruction\">;\n```", "```cpp\n\u00a0\u00a0// Has square-sum instruction.\n\u00a0\u00a0bool HasSQSum = false;\n```", "```cpp\n\u00a0\u00a0bool hasSQSum() const { return HasSQSum; }\n```", "```cpp\ndef HasSQSum : Predicate<\"Subtarget->hasSQSum()\">,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AssemblerPredicate<(all_of FeatureSQSum)>;\n```", "```cpp\ndef II_SQSUMU : InstrItinClass;\n```", "```cpp\nInstrItinData<II_SQSUMU, [InstrStage<1, [ALU]>]>\n```", "```cpp\ndef : InstRW<[GenericWriteMul], (instrs MULT, MULTu, SQSUMu)>;\n```", "```cpp\nlist<Predicate> UnsupportedFeatures = [HasSQSum, HasMips3, \u2026 \n```", "```cpp\ndef SQSUMu\u00a0\u00a0: ArithLogicR<\"sqsumu\", GPR64Opnd, 1, II_SQSUMU>,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ADD_FM<0x1c, 0x28>, ISA_MIPS64, SQSUM\n```", "```cpp\n{\n\u00a0\u00a0let Pattern = [(set GPR64Opnd:$rd,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(add (MipsMFLO (MipsMult\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GPR64Opnd:$rs, \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GPR64Opnd:$rs)),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(MipsMFLO (MipsMult \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GPR64Opnd:$rt, \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GPR64Opnd:$rt)))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)];\n}\n```", "```cpp\n$ echo \"sqsumu \\$1,\\$2,\\$3\" | \\\n\u00a0\u00a0llvm-mc --triple=mips64-linux-gnu -mattr=+sqsum \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--show-encoding\n```", "```cpp\n# RUN: llvm-mc %s -triple=mips64-linux-gnu -mattr=+sqsum \\\n# RUN:\u00a0\u00a0--show-encoding | FileCheck %s\n# CHECK: sqsumu\u00a0\u00a0$1, $2, $3 # encoding: [0x70,0x43,0x08,0x28]\n\u00a0\u00a0\u00a0\u00a0\u00a0sqsumu $1, $2, $3\n```", "```cpp\n$ llvm-lit sqsumu.s\n-- Testing: 1 tests, 1 workers --\nPASS: LLVM :: MC/Mips/sqsumu.s (1 of 1)\nTesting Time: 0.11s\n\u00a0\u00a0Passed: 1\n```", "```cpp\n$ ninja check-llvm\n```", "```cpp\n$ ninja check-llvm-mips-mc\n```", "```cpp\ndefine i64 @hyposquare(i64 %a, i64 %b) {\n\u00a0\u00a0%asq = mul i64 %a, %a\n\u00a0\u00a0%bsq = mul i64 %b, %b\n\u00a0\u00a0%res = add i64 %asq, %bsq\n\u00a0\u00a0ret i64 %res\n}\n```", "```cpp\n$ llc \u2013mtriple=mips64-linux-gnu \u2013mattr=+sqsum < sqsum.ll\n```", "```cpp\n; RUN: llc -mtriple=mips64-linux-gnu -mattr=+sqsum < %s |\\\n; RUN:\u00a0\u00a0FileCheck -check-prefix=SQSUM %s\n; RUN: llc -mtriple=mips64-linux-gnu < %s |\\\n; RUN:\u00a0\u00a0FileCheck --check-prefix=NOSQSUM %s\ndefine i64 @hyposquare(i64 %a, i64 %b) {\n; SQSUM-LABEL: hyposquare:\n; SQSUM: sqsumu $2, $4, $5\n; NOSQSUM-LABEL: hyposquare:\n; NOSQSUM: dmult $5, $5\n; NOSQSUM: mflo $1\n; NOSQSUM: dmult $4, $4\n; NOSQSUM: mflo $2\n; NOSQSUM: addu $2, $2, $1\n\u00a0\u00a0%asq = mul i64 %a, %a\n\u00a0\u00a0%bsq = mul i64 %b, %b\n\u00a0\u00a0%res = add i64 %asq, %bsq\n\u00a0\u00a0ret i64 %res\n}\n```", "```cpp\n$ llvm-lit squm.ll\n```", "```cpp\n$ ninja check-llvm-mips-codegen\n```"]