["```cpp\nint bar(int x) {\n\u00a0\u00a0if (x == 1) throw 1;\n\u00a0\u00a0if (x == 2) throw 42.0;\n\u00a0\u00a0return x;\n}\n```", "```cpp\nint foo(int x) throw(int) {\n\u00a0\u00a0int y = 0;\n\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0y = bar(x);\n\u00a0\u00a0}\n\u00a0\u00a0catch (int e) {\n\u00a0\u00a0\u00a0\u00a0y = e;\n\u00a0\u00a0}\n\u00a0\u00a0return y;\n}\n```", "```cpp\n%eh = tail call i8* @__cxa_allocate_exception(i64 4)\n%payload = bitcast i8* %eh to i32*\nstore i32 1, i32* %payload\ntail call void @__cxa_throw(i8* %eh,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i8* bitcast (i8** @_ZTIi to i8*), i8* \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0null)\nunreachable\n```", "```cpp\n%y = invoke i32 @_Z3bari(i32 %x) to label %next\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unwind label %lpad\n```", "```cpp\nlpad:\n%exc = landingpad { i8*, i32 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cleanup\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch i8* bitcast (i8** @_ZTIi to i8*)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filter [1 x i8*] [i8* bitcast (i8** @_ZTIi to \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i8*)]\n```", "```cpp\n%exc.ptr = extractvalue { i8*, i32 } %exc, 0\n%exc.sel = extractvalue { i8*, i32 } %exc, 1\n```", "```cpp\n%tid.int = tail call i32 @llvm.eh.typeid.for(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i8* bitcast (i8** @_ZTIi to \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i8*))\n%tst.int = icmp eq i32 %exc.sel, %tid.int\nbr i1 % tst.int, label %catchint, label %filterorcleanup\n```", "```cpp\ncatchint:\n%payload = tail call i8* @__cxa_begin_catch(i8* %exc.ptr)\n%payload.int = bitcast i8* %payload to i32*\n%retval = load i32, i32* %payload.int\ntail call void @__cxa_end_catch()\nbr label %return\n```", "```cpp\nfilterorcleanup:\n%tst.blzero = icmp slt i32 %exc.sel, 0\nbr i1 %tst.blzero, label %filter, label %cleanup\n```", "```cpp\nfilter:\ntail call void @__cxa_call_unexpected(i8* %exc.ptr) #4\nunreachable\n```", "```cpp\ncleanup:\nresume { i8*, i32 } %exc\n```", "```cpp\ndefine i32 @_Z3fooi(i32) personality i8* bitcast\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(i32 (...)* @__gxx_personality_v0 to \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0i8*)\n```", "```cpp\n    \u00a0\u00a0GlobalVariable *TypeInfo = nullptr;\n    \u00a0\u00a0FunctionType *AllocEHFty = nullptr;\n    \u00a0\u00a0Function *AllocEHFn = nullptr;\n    \u00a0\u00a0FunctionType *ThrowEHFty = nullptr;\n    \u00a0\u00a0Function *ThrowEHFn = nullptr;\n    \u00a0\u00a0BasicBlock *LPadBB = nullptr;\n    \u00a0\u00a0BasicBlock *UnreachableBB = nullptr;\n    ```", "```cpp\n    \u00a0\u00a0void createICmpEq(Value *Left, Value *Right,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BasicBlock *&TrueDest,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BasicBlock *&FalseDest,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Twine &TrueLabel = \"\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Twine &FalseLabel = \"\") {\n    \u00a0\u00a0\u00a0\u00a0Function *Fn =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.GetInsertBlock()->getParent();\n    \u00a0\u00a0\u00a0\u00a0TrueDest = BasicBlock::Create(M->getContext(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TrueLabel, Fn);\n    \u00a0\u00a0\u00a0\u00a0FalseDest = BasicBlock::Create(M->getContext(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FalseLabel, Fn);\n    \u00a0\u00a0\u00a0\u00a0Value *Cmp = Builder.CreateCmp(CmpInst::ICMP_EQ,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Left, Right);\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateCondBr(Cmp, TrueDest, FalseDest);\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0void createFunc(FunctionType *&Fty, Function *&Fn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Twine &N, Type *Result,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ArrayRef<Type *> Params = None,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool IsVarArgs = false) {\n    \u00a0\u00a0\u00a0\u00a0Fty = FunctionType::get(Result, Params, IsVarArgs);\n    \u00a0\u00a0\u00a0\u00a0Fn = Function::Create(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fty, GlobalValue::ExternalLinkage, N, M);\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0void addThrow(int PayloadVal) {\n    \u00a0\u00a0\u00a0\u00a0if (!TypeInfo) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TypeInfo = new GlobalVariable(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*M, Int8PtrTy,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/*isConstant=*/true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0GlobalValue::ExternalLinkage,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/*Initializer=*/nullptr, \"_ZTIi\");\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createFunc(AllocEHFty, AllocEHFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"__cxa_allocate_exception\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Int8PtrTy,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Int64Ty});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createFunc(ThrowEHFty, ThrowEHFn, \"__cxa_throw\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VoidTy,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Int8PtrTy, Int8PtrTy, Int8PtrTy});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FunctionType *PersFty;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Function *PersFn;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createFunc(PersFty, PersFn,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"__gxx_personality_v0\", Int32Ty, None,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Function *Fn =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.GetInsertBlock()->getParent();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fn->setPersonalityFn(PersFn);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BasicBlock *SaveBB = Builder.GetInsertBlock();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LPadBB = BasicBlock::Create(M->getContext(),\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"lpad\", Fn);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(LPadBB);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addLandingPad();\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0UnreachableBB = BasicBlock::Create(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0M->getContext(), \"unreachable\", Fn);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(UnreachableBB);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.CreateUnreachable();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(SaveBB);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Constant *PayloadSz =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConstantInt::get(Int64Ty, 4, false);\n    \u00a0\u00a0\u00a0\u00a0CallInst *EH = Builder.CreateCall(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AllocEHFty, AllocEHFn, {PayloadSz});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Value *PayloadPtr =\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.CreateBitCast(EH, Int32PtrTy);\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateStore(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConstantInt::get(Int32Ty, PayloadVal, true),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PayloadPtr);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateInvoke(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ThrowEHFty, ThrowEHFn, UnreachableBB, LPadBB,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{EH, ConstantExpr::getBitCast(TypeInfo, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Int8PtrTy),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ConstantPointerNull::get(Int8PtrTy)});\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0void addLandingPad() {\n    \u00a0\u00a0\u00a0\u00a0FunctionType *TypeIdFty; Function *TypeIdFn;\n    \u00a0\u00a0\u00a0\u00a0createFunc(TypeIdFty, TypeIdFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"llvm.eh.typeid.for\", Int32Ty,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Int8PtrTy});\n    \u00a0\u00a0\u00a0\u00a0FunctionType *BeginCatchFty; Function \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*BeginCatchFn;\n    \u00a0\u00a0\u00a0\u00a0createFunc(BeginCatchFty, BeginCatchFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"__cxa_begin_catch\", Int8PtrTy,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Int8PtrTy});\n    \u00a0\u00a0\u00a0\u00a0FunctionType *EndCatchFty; Function *EndCatchFn;\n    \u00a0\u00a0\u00a0\u00a0createFunc(EndCatchFty, EndCatchFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"__cxa_end_catch\", VoidTy);\n    \u00a0\u00a0\u00a0\u00a0FunctionType *PutsFty; Function *PutsFn;\n    \u00a0\u00a0\u00a0\u00a0createFunc(PutsFty, PutsFn, \"puts\", Int32Ty,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Int8PtrTy});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0LandingPadInst *Exc = Builder.CreateLandingPad(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StructType::get(Int8PtrTy, Int32Ty), 1, \"exc\");\n    \u00a0\u00a0\u00a0\u00a0Exc->addClause(ConstantExpr::getBitCast(TypeInfo, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Int8PtrTy));\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Value *Sel = Builder.CreateExtractValue(Exc, {1}, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"exc.sel\");\n    \u00a0\u00a0\u00a0\u00a0CallInst *Id =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.CreateCall(TypeIdFty, TypeIdFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ConstantExpr::getBitCast(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TypeInfo, Int8PtrTy)});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0BasicBlock *TrueDest, *FalseDest;\n    \u00a0\u00a0\u00a0\u00a0createICmpEq(Sel, Id, TrueDest, FalseDest, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"match\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"resume\");\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(FalseDest);\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateResume(Exc);\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(TrueDest);\n    \u00a0\u00a0\u00a0\u00a0Value *Ptr =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.CreateExtractValue(Exc, {0}, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"exc.ptr\");\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateCall(BeginCatchFty, BeginCatchFn,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{Ptr});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Value *MsgPtr = Builder.CreateGlobalStringPtr(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Divide by zero!\", \"msg\", 0, M);\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateCall(PutsFty, PutsFn, {MsgPtr});\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateCall(EndCatchFty, EndCatchFn);\n    \u00a0\u00a0\u00a0\u00a0Builder.CreateRet(Int32Zero);\n    \u00a0\u00a0}\n    ```", "```cpp\n\u00a0\u00a0\u00a0\u00a0case BinaryOp::Div:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BasicBlock *TrueDest, *FalseDest;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createICmpEq(Right, Int32Zero, TrueDest,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FalseDest, \"divbyzero\", \"notzero\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(TrueDest);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0addThrow(42); // Arbitrary payload value.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.SetInsertPoint(FalseDest);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0V = Builder.CreateSDiv(Left, Right);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n```", "```cpp\n$ ninja\n```", "```cpp\n$ src/calc \"with a: 3/a\"\n```", "```cpp\n$ src/calc \"with a: 3/a\" | llc -filetype obj -o exp.o\n$ clang++ -o exp exp.o ../rtcalc.cpp\n```", "```cpp\n$ ./exp\nEnter a value for a: 1\nThe result is: 3\n$ ./exp\nEnter a value for a: 0\nDivide by zero!\n```", "```cpp\nvoid doSomething(int *p, float *q) {\n\u00a0\u00a0*p = 42;\n\u00a0\u00a0*q = 3.1425;\n} \n```", "```cpp\nstruct Point { float x, y; }\nvoid func(struct Point *p, float *x, int *i, char *c) {\n\u00a0\u00a0p->x = 0; p->y = 0; *x = 0.0; *i = 0; *c = 0; \n}\n```", "```cpp\nvoid CGModule::decorateInst(llvm::Instruction *Inst,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TypeDenoter *TyDe) {\n\u00a0\u00a0if (auto *N = TBAA.getAccessTagInfo(TyDe))\n\u00a0\u00a0\u00a0\u00a0Inst->setMetadata(llvm::LLVMContext::MD_tbaa, N);\n}\n```", "```cpp\n#include \"tinylang/AST/AST.h\"\n#include \"llvm/IR/MDBuilder.h\"\n#include \"llvm/IR/Metadata.h\"\n```", "```cpp\n     class CGTBAA {\n    \u00a0\u00a0llvm::MDNode *Root;\n    ```", "```cpp\n    \u00a0\u00a0llvm::MDBuilder MDHelper;\n    ```", "```cpp\n    \u00a0\u00a0llvm::DenseMap<TypeDenoter *, llvm::MDNode *> \n    \u00a0\u00a0\u00a0\u00a0MetadataCache;\n    // \u2026\n    };\n    ```", "```cpp\n    CGTBAA::CGTBAA(llvm::LLVMContext &Ctx)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: MDHelper(llvm::MDBuilder(Ctx)), Root(nullptr) {}\n    ```", "```cpp\n    llvm::MDNode *CGTBAA::getRoot() {\n    \u00a0\u00a0if (!Root)\n    \u00a0\u00a0\u00a0\u00a0Root = MDHelper.createTBAARoot(\"Simple tinylang \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TBAA\");\n    \u00a0\u00a0return Root;\n    }\n    ```", "```cpp\n    llvm::MDNode *\n    CGTBAA::createScalarTypeNode(TypeDeclaration *Ty,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StringRef Name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::MDNode *Parent) {\n    \u00a0\u00a0llvm::MDNode *N =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MDHelper.createTBAAScalarTypeNode(Name, Parent);\n    \u00a0\u00a0return MetadataCache[Ty] = N;\n    }\n    ```", "```cpp\n    llvm::MDNode *CGTBAA::createStructTypeNode(\n    \u00a0\u00a0\u00a0\u00a0TypeDeclaration *Ty, StringRef Name,\n    \u00a0\u00a0\u00a0\u00a0llvm::ArrayRef<std::pair<llvm::MDNode *, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint64_t>>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fields) {\n    \u00a0\u00a0llvm::MDNode *N =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MDHelper.createTBAAStructTypeNode(Name, Fields);\n    \u00a0\u00a0return MetadataCache[Ty] = N;\n    }\n    ```", "```cpp\n    llvm::MDNode *CGTBAA::getTypeInfo(TypeDeclaration *Ty) {\n    \u00a0\u00a0if (llvm::MDNode *N = MetadataCache[Ty])\n    \u00a0\u00a0\u00a0\u00a0return N;\n    \u00a0\u00a0if (auto *Pervasive =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<PervasiveTypeDeclaration>(Ty)) {\n    \u00a0\u00a0\u00a0\u00a0StringRef Name = Pervasive->getName();\n    \u00a0\u00a0\u00a0\u00a0return createScalarTypeNode(Pervasive, Name, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getRoot());\n    \u00a0\u00a0}\n    \u00a0\u00a0if (auto *Pointer =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<PointerTypeDeclaration>(Ty)) {\n    \u00a0\u00a0\u00a0\u00a0StringRef Name = \"any pointer\";\n    \u00a0\u00a0\u00a0\u00a0return createScalarTypeNode(Pointer, Name, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getRoot());\n    \u00a0\u00a0}\n    \u00a0\u00a0if (auto *Record =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<RecordTypeDeclaration>(Ty)) {\n    \u00a0\u00a0\u00a0\u00a0llvm::SmallVector<std::pair<llvm::MDNode *, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint64_t>,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fields;\n    \u00a0\u00a0\u00a0\u00a0auto *Rec =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::cast<llvm::StructType>(\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.convertType(Record));\n    \u00a0\u00a0\u00a0\u00a0const llvm::StructLayout *Layout =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getModule()->getDataLayout()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.getStructLayout(Rec);\n    \u00a0\u00a0\u00a0\u00a0unsigned Idx = 0;\n    \u00a0\u00a0\u00a0\u00a0for (const auto &F : Record->getFields()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint64_t Offset = Layout->getElementOffset(Idx);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Fields.emplace_back(getTypeInfo(F.getType()), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Offset);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++Idx;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0StringRef Name = CGM.mangleName(Record);\n    \u00a0\u00a0\u00a0\u00a0return createStructTypeNode(Record, Name, Fields);\n    \u00a0\u00a0}\n    \u00a0\u00a0return nullptr;\n    }\n    ```", "```cpp\n    llvm::MDNode *CGTBAA::getAccessTagInfo(TypeDenoter *TyDe) \n    {\n    \u00a0\u00a0if (auto *Pointer = llvm::dyn_cast<PointerType>(TyDe)) \n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0return getTypeInfo(Pointer->getTyDen());\n    \u00a0\u00a0}\n    \u00a0\u00a0return nullptr;\n    }\n    ```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Builder.CreateStore(Val, CGM.getGlobal(D));\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto *Inst = Builder.CreateStore(Val,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getGlobal(Decl));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.decorateInst(Inst, V->getTypeDenoter());\n```", "```cpp\nllvm::DIFile *DbgFile = DBuilder.createFile(\"File.mod\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"/home/llvmuser\"); \n```", "```cpp\nbool IsOptimized = false;\nllvm::StringRef CUFlags;\nunsigned ObjCRunTimeVersion = 0;\nllvm::StringRef SplitName;\nllvm::DICompileUnit::DebugEmissionKind EmissionKind =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DICompileUnit::DebugEmissionKind::FullDebug;\nllvm::DICompileUnit *DbgCU = DBuilder.createCompileUnit(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dwarf::DW_LANG_Modula2, DbgFile, \u201etinylang\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IsOptimized, CUFlags, ObjCRunTimeVersion, SplitName,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0EmissionKind);\n```", "```cpp\nllvm::DIBasicType *DbgIntTy =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.createBasicType(\"INTEGER\", 32,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dwarf::DW_ATE_signed);\n```", "```cpp\nllvm::Metadata *DbgSigTy = {DbgIntTy};\nllvm::DITypeRefArray DbgParamsTy =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.getOrCreateTypeArray(DbgSigTy);\nllvm::DISubroutineType *DbgFuncTy =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.createSubroutineType(DbgParamsTy);\n```", "```cpp\nunsigned LineNo = 5;\nunsigned ScopeLine = 5;\nllvm::DISubprogram *DbgFunc = DBuilder.createFunction(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DbgCU, \"Func\", \"_t4File4Func\", DbgFile, LineNo,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DbgFuncTy, ScopeLine, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DISubprogram::FlagPrivate,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DISubprogram::SPFlagLocalToUnit);\n```", "```cpp\n@i = alloca i32\n```", "```cpp\ncall void @llvm.dbg.declare(metadata i32* %i,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0metadata !1, metadata \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!DIExpression())\n```", "```cpp\nllvm::Type *IntTy = llvm::Type::getInt32Ty(LLVMCtx);\nllvm::Value *Val = Builder.CreateAlloca(IntTy, nullptr, \"i\");\n```", "```cpp\nllvm::DILocalVariable *DbgLocalVar =\n DBuilder.createAutoVariable(DbgFunc, \"i\", DbgFile,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07, DbgIntTy);\n```", "```cpp\nllvm::DILocation *DbgLoc =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DILocation::get(LLVMCtx, 7, 5, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DbgFunc);\nDBuilder.insertDeclare(Val, DbgLocalVar,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.createExpression(), DbgLoc,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Val.getParent());\n```", "```cpp\nconst llvm::DataLayout &DL = Mod->getDataLayout();\nuint64_t Ofs = DL.getStructLayout(Frame)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->getElementOffset(3);\n```", "```cpp\nllvm::SmallVector<int64_t, 2> AddrOps;\nAddrOps.push_back(llvm::dwarf::DW_OP_plus_uconst);\nAddrOps.push_back(Offset);\n```", "```cpp\nllvm::DIExpression *Expr = DBuilder.createExpression(AddrOps);\n```", "```cpp\n\u00a0\u00a0CGModule &CGM;\n\u00a0\u00a0llvm::DIBuilder DBuilder;\n\u00a0\u00a0llvm::DICompileUnit *CU;\n\u00a0\u00a0llvm::DenseMap<TypeDeclaration *, llvm::DIType *>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TypeCache;\n\u00a0\u00a0llvm::SmallVector<llvm::DIScope *, 4> ScopeStack;\n```", "```cpp\n    CGDebugInfo::CGDebugInfo(CGModule &CGM)\n    \u00a0\u00a0\u00a0\u00a0: CGM(CGM), DBuilder(*CGM.getModule()) {\n    \u00a0\u00a0llvm::SmallString<128> Path(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getASTCtx().getFilename());\n    \u00a0\u00a0llvm::sys::fs::make_absolute(Path);\n    \u00a0\u00a0llvm::DIFile *File = DBuilder.createFile(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::sys::path::filename(Path),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::sys::path::parent_path(Path));\n    \u00a0\u00a0bool IsOptimized = false;\n    \u00a0\u00a0unsigned ObjCRunTimeVersion = 0;\n    \u00a0\u00a0llvm::DICompileUnit::DebugEmissionKind EmissionKind =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DICompileUnit::DebugEmissionKind::FullDebug;\n    \u00a0\u00a0CU = DBuilder.createCompileUnit(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dwarf::DW_LANG_Modula2, File, \"tinylang\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IsOptimized, StringRef(), ObjCRunTimeVersion,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StringRef(), EmissionKind);\n    }\n    ```", "```cpp\n    unsigned CGDebugInfo::getLineNumber(SMLoc Loc) {\n    \u00a0\u00a0return CGM.getASTCtx().getSourceMgr().FindLineNumber(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Loc);\n    }\n    ```", "```cpp\n    llvm::DIScope *CGDebugInfo::getScope() {\n    \u00a0\u00a0if (ScopeStack.empty())\n    \u00a0\u00a0\u00a0\u00a0openScope(CU->getFile());\n    \u00a0\u00a0return ScopeStack.back();\n    }\n    void CGDebugInfo::openScope(llvm::DIScope *Scope) {\n    \u00a0\u00a0ScopeStack.push_back(Scope);\n    }\n    void CGDebugInfo::closeScope() {\n    \u00a0\u00a0ScopeStack.pop_back();\n    }\n    ```", "```cpp\n    llvm::DIType *\n    CGDebugInfo::getPervasiveType(TypeDeclaration *Ty) {\n    \u00a0\u00a0if (Ty->getName() == \"INTEGER\") {\n    \u00a0\u00a0\u00a0\u00a0return DBuilder.createBasicType(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ty->getName(), 64, llvm::dwarf::DW_ATE_signed);\n    \u00a0\u00a0}\n    \u00a0\u00a0if (Ty->getName() == \"BOOLEAN\") {\n    \u00a0\u00a0\u00a0\u00a0return DBuilder.createBasicType(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ty->getName(), 1, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dwarf::DW_ATE_boolean);\n    \u00a0\u00a0}\n    \u00a0\u00a0llvm::report_fatal_error(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Unsupported pervasive type\");\n    }\n    ```", "```cpp\n    llvm::DIType *\n    CGDebugInfo::getAliasType(AliasTypeDeclaration *Ty) {\n    \u00a0\u00a0return DBuilder.createTypedef(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getType(Ty->getType()), Ty->getName(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CU->getFile(), getLineNumber(Ty->getLocation()),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getScope());\n    }\n    ```", "```cpp\n    llvm::DIType *\n    CGDebugInfo::getArrayType(ArrayTypeDeclaration *Ty) {\n    \u00a0\u00a0auto *ATy =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::cast<llvm::ArrayType>(CGM.convertType(Ty));\n    \u00a0\u00a0const llvm::DataLayout &DL =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getModule()->getDataLayout();\n    \u00a0\u00a0uint64_t NumElements = Ty->getUpperIndex();\n    \u00a0\u00a0llvm::SmallVector<llvm::Metadata *, 4> Subscripts;\n    \u00a0\u00a0Subscripts.push_back(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.getOrCreateSubrange(0, NumElements));\n    \u00a0\u00a0return DBuilder.createArrayType(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DL.getTypeSizeInBits(ATy) * 8,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DL.getABITypeAlignment(ATy),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getType(Ty->getType()),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.getOrCreateArray(Subscripts));\n    }\n    ```", "```cpp\n    llvm::DIType *\n    CGDebugInfo::getType(TypeDeclaration *Ty) {\n    \u00a0\u00a0if (llvm::DIType *T = TypeCache[Ty])\n    \u00a0\u00a0\u00a0\u00a0return T;\n    \u00a0\u00a0if (llvm::isa<PervasiveTypeDeclaration>(Ty))\n    \u00a0\u00a0\u00a0\u00a0return TypeCache[Ty] = getPervasiveType(Ty);\n    \u00a0\u00a0else if (auto *AliasTy =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<AliasTypeDeclaration>(Ty))\n    \u00a0\u00a0\u00a0\u00a0return TypeCache[Ty] = getAliasType(AliasTy);\n    \u00a0\u00a0else if (auto *ArrayTy =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dyn_cast<ArrayTypeDeclaration>(Ty))\n    \u00a0\u00a0\u00a0\u00a0return TypeCache[Ty] = getArrayType(ArrayTy);\n    \u00a0\u00a0else if (auto *RecordTy =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm ::dyn_cast<RecordTypeDeclaration>(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ty))\n    \u00a0\u00a0\u00a0\u00a0return TypeCache[Ty] = getRecordType(RecordTy);\n    \u00a0\u00a0llvm::report_fatal_error(\"Unsupported type\");\n    \u00a0\u00a0return nullptr;\n    }\n    ```", "```cpp\n    void CGDebugInfo::emitGlobalVariable(\n    \u00a0\u00a0\u00a0\u00a0VariableDeclaration *Decl,\n    \u00a0\u00a0\u00a0\u00a0llvm::GlobalVariable *V) {\n    \u00a0\u00a0llvm::DIGlobalVariableExpression *GV =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.createGlobalVariableExpression(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getScope(), Decl->getName(), V->getName(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CU->getFile(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getLineNumber(Decl->getLocation()),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getType(Decl->getType()), false);\n    \u00a0\u00a0V->addDebugInfo(GV);\n    }\n    ```", "```cpp\n    llvm::DISubroutineType *\n    CGDebugInfo::getType(ProcedureDeclaration *P) {\n    \u00a0\u00a0llvm::SmallVector<llvm::Metadata *, 4> Types;\n    \u00a0\u00a0const llvm::DataLayout &DL =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getModule()->getDataLayout();\n    \u00a0\u00a0// Return type at index 0\n    \u00a0\u00a0if (P->getRetType())\n    \u00a0\u00a0\u00a0\u00a0Types.push_back(getType(P->getRetType()));\n    \u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0Types.push_back(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.createUnspecifiedType(\"void\"));\n    \u00a0\u00a0for (const auto *FP : P->getFormalParams()) {\n    \u00a0\u00a0\u00a0\u00a0llvm::DIType *PT = getType(FP->getType());\n    \u00a0\u00a0\u00a0\u00a0if (FP->isVar()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::Type *PTy = CGM.convertType(FP->getType());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PT = DBuilder.createReferenceType(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::dwarf::DW_TAG_reference_type, PT,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DL.getTypeSizeInBits(PTy) * 8,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DL.getABITypeAlignment(PTy));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0Types.push_back(PT);\n    \u00a0\u00a0}\n    \u00a0\u00a0return DBuilder.createSubroutineType(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DBuilder.getOrCreateTypeArray(Types));\n    }\n    ```", "```cpp\n    void CGDebugInfo::emitProcedure(\n    \u00a0\u00a0\u00a0\u00a0ProcedureDeclaration *Decl, llvm::Function *Fn) {\n    \u00a0\u00a0llvm::DISubroutineType *SubT = getType(Decl);\n    \u00a0\u00a0llvm::DISubprogram *Sub = DBuilder.createFunction(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getScope(), Decl->getName(), Fn->getName(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CU->getFile(), getLineNumber(Decl->getLocation()),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SubT, getLineNumber(Decl->getLocation()),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DINode::FlagPrototyped,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::DISubprogram::SPFlagDefinition);\n    \u00a0\u00a0openScope(Sub);\n    \u00a0\u00a0Fn->setSubprogram(Sub);\n    }\n    ```", "```cpp\n    void CGDebugInfo::emitProcedureEnd(\n    \u00a0\u00a0\u00a0\u00a0ProcedureDeclaration *Decl, llvm::Function *Fn) {\n    \u00a0\u00a0if (Fn && Fn->getSubprogram())\n    \u00a0\u00a0\u00a0\u00a0DBuilder.finalizeSubprogram(Fn->getSubprogram());\n    \u00a0\u00a0closeScope();\n    }\n    ```", "```cpp\n    void CGDebugInfo::finalize() { DBuilder.finalize(); }\n    ```", "```cpp\nstatic llvm::cl::opt<bool>\n\u00a0\u00a0\u00a0\u00a0Debug(\"g\", llvm::cl::desc(\"Generate debug information\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::cl::init(false));\n```", "```cpp\n\u00a0\u00a0if (Debug)\n\u00a0\u00a0\u00a0\u00a0DebugInfo.reset(new CGDebugInfo(*this));\n```", "```cpp\nCGDebugInfo *getDbgInfo() {\n\u00a0\u00a0return DebugInfo.get();\n}\n```", "```cpp\nVariableDeclaration *Var = \u2026;\nllvm::GlobalVariable *V = \u2026;\nif (CGDebugInfo *Dbg = getDbgInfo())\n\u00a0\u00a0Dbg->emitGlobalVariable(Var, V);\n```", "```cpp\nllvm::DebugLoc CGDebugInfo::getDebugLoc(SMLoc Loc) {\n\u00a0\u00a0std::pair<unsigned, unsigned> LineAndCol =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getASTCtx().getSourceMgr().getLineAndColumn(Loc);\n\u00a0\u00a0llvm::DILocation *DILoc = llvm::DILocation::get(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CGM.getLLVMCtx(), LineAndCol.first, LineAndCol.second,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getCU());\n\u00a0\u00a0return llvm::DebugLoc(DILoc);\n}\n```", "```cpp\nvoid CGModule::applyLocation(llvm::Instruction *Inst,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm::SMLoc Loc) {\n\u00a0\u00a0if (CGDebugInfo *Dbg = getDbgInfo())\n\u00a0\u00a0\u00a0\u00a0Inst->setDebugLoc(Dbg->getDebugLoc(Loc));\n}\n```"]