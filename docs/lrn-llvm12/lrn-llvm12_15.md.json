["```cpp\nclass Triple {\npublic:\n\u00a0\u00a0enum ArchType {\n\u00a0\u00a0// Many more members\n\u00a0\u00a0\u00a0\u00a0m88k,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// M88000 (big endian): m88k\n\u00a0\u00a0};\n\u00a0\u00a0/// Tests whether the target is M88k.\n\u00a0\u00a0bool isM88k() const {\n\u00a0\u00a0\u00a0\u00a0return getArch() == Triple::m88k;\n\u00a0\u00a0}\n// Many more methods\n};\n```", "```cpp\n\u00a0\u00a0switch (Kind) {\n// Many more cases\n\u00a0\u00a0case m88k:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"m88k\";\n\u00a0\u00a0}\n```", "```cpp\n    #ifndef ELF_RELOC\n    #error \"ELF_RELOC must be defined\"\n    #endif\n    ELF_RELOC(R_88K_NONE, 0)\n    ELF_RELOC(R_88K_COPY, 1)\n    // Many more\u2026\n    ```", "```cpp\n    // M88k Specific e_flags\n    enum : unsigned {\n    \u00a0\u00a0EF_88K_NABI = 0x80000000,\u00a0\u00a0\u00a0// Not ABI compliant\n    \u00a0\u00a0EF_88K_M88110 = 0x00000004\u00a0\u00a0// File uses 88110-\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// specific \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// features\n    };\n    // M88k relocations.\n    enum {\n    #include \"ELFRelocs/M88k.def\"\n    };\n    ```", "```cpp\n    \u00a0\u00a0switch (EF.getHeader()->e_ident[ELF::EI_CLASS]) {\n    // Many more cases\n    \u00a0\u00a0\u00a0\u00a0case ELF::EM_88K:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"elf32-m88k\";\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0switch (Machine) {\n    // Many more cases\n    \u00a0\u00a0case ELF::EM_88K:\n    \u00a0\u00a0\u00a0\u00a0switch (Type) {\n    #include \"llvm/BinaryFormat/ELFRelocs/M88k.def\"\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0}\n    ```", "```cpp\n    include \"llvm/Target/Target.td\"\n    include \"M88kRegisterInfo.td\"\n    include \"M88kCallingConv.td\"\n    include \"M88kSchedule.td\"\n    include \"M88kInstrFormats.td\"\n    include \"M88kInstrInfo.td\"\n    ```", "```cpp\n    def : ProcessorModel<\"mc88110\", M88kSchedModel, []>;\n    ```", "```cpp\n    def M88kInstrInfo : InstrInfo;\n    ```", "```cpp\n    def M88kAsmParser : AsmParser;\n    def M88kAsmParserVariant : AsmParserVariant {\n    \u00a0\u00a0let RegisterPrefix = \"%\";\n    }\n    ```", "```cpp\n    def M88kAsmWriter : AsmWriter;\n    ```", "```cpp\n    def M88k : Target {\n    \u00a0\u00a0let InstructionSet = M88kInstrInfo;\n    \u00a0\u00a0let AssemblyParsers\u00a0\u00a0= [M88kAsmParser];\n    \u00a0\u00a0let AssemblyParserVariants = [M88kAsmParserVariant];\n    \u00a0\u00a0let AssemblyWriters = [M88kAsmWriter];\n    \u00a0\u00a0let AllowRegisterRenaming = 1;\n    }\n    ```", "```cpp\nclass M88kReg<bits<5> Enc, string n> : Register<n> {\n\u00a0\u00a0let HWEncoding{15-5} = 0;\n\u00a0\u00a0let HWEncoding{4-0} = Enc;\n\u00a0\u00a0let Namespace = \"M88k\";\n}\n```", "```cpp\nclass GRi<bits<5> Enc, string n> : M88kReg<Enc, n>;\n```", "```cpp\nforeach I = 0-31 in {\n\u00a0\u00a0def R#I : GRi<I, \"r\"#I>;\n}\n```", "```cpp\ndef GPR : RegisterClass<\"M88k\", [i32], 32,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(add (sequence \"R%u\", 0, 31))>;\n```", "```cpp\ndef GPROpnd : RegisterOperand<GPR>;\n```", "```cpp\n    def CC_M88k : CallingConv<[\n    ```", "```cpp\n    \u00a0\u00a0CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,\n    ```", "```cpp\n    \u00a0\u00a0CCIfSRet<CCIfType<[i32], CCAssignToReg<[R12]>>>,\n    ```", "```cpp\n    \u00a0\u00a0CCIfType<[i32,i64,f32,f64],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CCAssignToReg<[R2, R3, R4, R5, R6, R7, R8, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0R9]>>,\n    ```", "```cpp\n    \u00a0\u00a0CCAssignToStack<4, 4>\n    ]>;\n    ```", "```cpp\n    def RetCC_M88k : CallingConv<[\n    \u00a0\u00a0CCIfType<[i32,f32], CCAssignToReg<[R2]>>,\n    \u00a0\u00a0CCIfType<[i64,f64], CCAssignToReg<[R2, R3]>>\n    ]>;\n    ```", "```cpp\n    def CSR_M88k :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CalleeSavedRegs<(add (sequence \"R%d\", 14, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a025), R30)>;\n    ```", "```cpp\ndef M88kSchedModel : SchedMachineModel {\n\u00a0\u00a0let IssueWidth = 2;\n\u00a0\u00a0let MicroOpBufferSize = 0;\n\u00a0\u00a0let CompleteModel = 0;\n\u00a0\u00a0let NoModel = 1;\n}\n```", "```cpp\nclass InstM88k<dag outs, dag ins, string asmstr,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list<dag> pattern, InstrItinClass itin = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NoItinerary>\n\u00a0\u00a0\u00a0: Instruction {\n\u00a0\u00a0field bits<32> Inst;\n\u00a0\u00a0field bits<32> SoftFail = 0; \n\u00a0\u00a0let Namespace = \"M88k\";\n\u00a0\u00a0let Size = 4;\n\u00a0\u00a0dag OutOperandList = outs;\n\u00a0\u00a0dag InOperandList = ins;\n\u00a0\u00a0let AsmString\u00a0\u00a0\u00a0= asmstr;\n\u00a0\u00a0let Pattern = pattern;\n\u00a0\u00a0let DecoderNamespace = \"M88k\";\n\u00a0\u00a0let Itinerary = itin;\n}\n```", "```cpp\nclass F_JMP<bits<5> func, bits<1> next,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dag outs, dag ins, string asmstr,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list<dag> pattern,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InstrItinClass itin = NoItinerary>\n\u00a0\u00a0\u00a0: InstM88k<outs, ins, asmstr, pattern, itin> {\n\u00a0\u00a0bits<5> rs2;\n\u00a0\u00a0let Inst{31-26} = 0b111101;\n\u00a0\u00a0let Inst{25-16} = 0b0000000000;\n\u00a0\u00a0let Inst{15-11} = func;\n\u00a0\u00a0let Inst{10}\u00a0\u00a0\u00a0\u00a0= next;\n\u00a0\u00a0let Inst{9-5}\u00a0\u00a0\u00a0= 0b00000;\n\u00a0\u00a0let Inst{4-0}\u00a0\u00a0\u00a0= rs2;\n}\n```", "```cpp\nlet isTerminator = 1, isBarrier = 1 in\n\u00a0\u00a0def JMP : F_JMP<0b11000, 0, (outs), (ins GPROpnd:$rs2),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"jmp $rs2\", [(brind GPROpnd:$rs2)]>;\n```", "```cpp\ndef : Pat<(and GPR:$rs1, uimm32:$imm),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(ANDri (ANDriu GPR:$rs1, (HI16 i32:$imm)),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(LO16 i32:$imm))>;\n```", "```cpp\ndef m88k_set : SDNode<\"M88kISD::SET\", SDTIntBinOp>;\n```", "```cpp\ndef retflag : SDNode<\"M88kISD::RET_FLAG\", SDTNone,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[SDNPHasChain, SDNPOptInGlue, SDNPVariadic]>;\n```", "```cpp\nclass M88kTargetMachine : public LLVMTargetMachine {\npublic:\n\u00a0\u00a0M88kTargetMachine(/* parameters */);\n\u00a0\u00a0~M88kTargetMachine() override;\n\u00a0\u00a0const M88kSubtarget *getSubtargetImpl(const Function &)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const override;\n\u00a0\u00a0const M88kSubtarget *getSubtargetImpl() const = delete;\n\u00a0\u00a0TargetPassConfig *createPassConfig(PassManagerBase &PM)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0override;\n};\n```", "```cpp\nnamespace {\nclass M88kPassConfig : public TargetPassConfig {\npublic:\n\u00a0\u00a0M88kPassConfig(M88kTargetMachine &TM, PassManagerBase \n\u00a0\u00a0\u00a0\u00a0&PM)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: TargetPassConfig(TM, PM) {}\n\u00a0\u00a0M88kTargetMachine &getM88kTargetMachine() const {\n\u00a0\u00a0\u00a0\u00a0return getTM<M88kTargetMachine>();\n\u00a0\u00a0}\n\u00a0\u00a0bool addInstSelector() override {\n\u00a0\u00a0\u00a0\u00a0addPass(createM88kISelDag(getM88kTargetMachine(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getOptLevel()));\n\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0}\n};\n} // namespace\nTargetPassConfig *M88kTargetMachine::createPassConfig(\n\u00a0\u00a0\u00a0\u00a0PassManagerBase &PM) {\n\u00a0\u00a0return new M88kPassConfig(*this, PM);\n}\n```", "```cpp\n#define GET_SUBTARGETINFO_HEADER\n#include \"M88kGenSubtargetInfo.inc\"\nnamespace llvm {\nclass M88kSubtarget : public M88kGenSubtargetInfo {\n\u00a0\u00a0Triple TargetTriple;\n\u00a0\u00a0virtual void anchor();\n\u00a0\u00a0M88kInstrInfo InstrInfo;\n\u00a0\u00a0M88kTargetLowering TLInfo;\n\u00a0\u00a0M88kFrameLowering FrameLowering;\npublic:\n\u00a0\u00a0M88kSubtarget(const Triple &TT, const std::string &CPU,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const std::string &FS,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const TargetMachine &TM);\n\u00a0\u00a0void ParseSubtargetFeatures(StringRef CPU, StringRef FS);\n\u00a0\u00a0const TargetFrameLowering *getFrameLowering() const \n\u00a0\u00a0\u00a0\u00a0override\n\u00a0\u00a0{ return &FrameLowering; }\n\u00a0\u00a0const M88kInstrInfo *getInstrInfo() const override\n\u00a0\u00a0{ return &InstrInfo; }\n\u00a0\u00a0const M88kRegisterInfo *getRegisterInfo() const override\n\u00a0\u00a0{ return &InstrInfo.getRegisterInfo(); }\n\u00a0\u00a0const M88kTargetLowering *getTargetLowering() const \n\u00a0\u00a0\u00a0\u00a0override \n\u00a0\u00a0{ return &TLInfo; }\n};\n} // end namespace llvm\n```", "```cpp\nclass M88kDAGToDAGISel : public SelectionDAGISel {\n\u00a0\u00a0const M88kSubtarget *Subtarget;\npublic:\n\u00a0\u00a0M88kDAGToDAGISel(M88kTargetMachine &TM,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeGenOpt::Level OptLevel)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: SelectionDAGISel(TM, OptLevel) {}\n\u00a0\u00a0StringRef getPassName() const override {\n\u00a0\u00a0\u00a0\u00a0return \"M88k DAG->DAG Pattern Instruction Selection\";\n\u00a0\u00a0}\n#include \"M88kGenDAGISel.inc\"\n\u00a0\u00a0void Select(SDNode *Node) override {\n\u00a0\u00a0\u00a0\u00a0SelectCode(Node);\n\u00a0\u00a0}\n};\n```", "```cpp\nFunctionPass *llvm::createM88kISelDag(M88kTargetMachine &TM,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CodeGenOpt::Level\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OptLevel) {\n\u00a0\u00a0return new M88kDAGToDAGISel(TM, OptLevel);\n}\n```", "```cpp\nnamespace M88kISD {\nenum NodeType : unsigned {\n\u00a0\u00a0FIRST_NUMBER = ISD::BUILTIN_OP_END,\n\u00a0\u00a0RET_FLAG,\n\u00a0\u00a0SET,\n};\n} // end namespace M88kISD\n```", "```cpp\nclass M88kTargetLowering : public TargetLowering {\n\u00a0\u00a0const M88kSubtarget &Subtarget;\npublic:\n\u00a0\u00a0explicit M88kTargetLowering(const TargetMachine &TM,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const M88kSubtarget &STI);\n\u00a0\u00a0SDValue LowerOperation(SDValue Op, SelectionDAG &DAG) const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0override;\n\u00a0\u00a0SDValue PerformDAGCombine(SDNode *N, DAGCombinerInfo &DCI) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const override;\n\u00a0\u00a0SDValue LowerReturn(SDValue Chain, CallingConv::ID CallConv,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool IsVarArg,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SmallVectorImpl<ISD::OutputArg> &Outs,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SmallVectorImpl<SDValue> &OutVals,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SDLoc &DL,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SelectionDAG &DAG) const override;\n};\n```", "```cpp\n    #include \"M88kGenCallingConv.inc\"\n    ```", "```cpp\n    SDValue M88kTargetLowering::LowerReturn(SDValue Chain,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CallingConv::ID CallConv,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool IsVarArg,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SmallVectorImpl<ISD::OutputArg> \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&Outs,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SmallVectorImpl<SDValue> &OutVals,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const SDLoc &DL, SelectionDAG &DAG) const {\n    ```", "```cpp\n    \u00a0\u00a0MachineFunction &MF = DAG.getMachineFunction();\n    \u00a0\u00a0SmallVector<CCValAssign, 16> RetLocs;\n    \u00a0\u00a0CCState RetCCInfo(CallConv, IsVarArg, MF, RetLocs,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*DAG.getContext());\n    \u00a0\u00a0RetCCInfo.AnalyzeReturn(Outs, RetCC_M88k);\n    ```", "```cpp\n    \u00a0\u00a0if (RetLocs.empty())\n    \u00a0\u00a0\u00a0\u00a0return DAG.getNode(M88kISD::RET_FLAG, DL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MVT::Other, Chain);\n    ```", "```cpp\n    \u00a0\u00a0SDValue Glue;\n    \u00a0\u00a0SmallVector<SDValue, 4> RetOps;\n    \u00a0\u00a0RetOps.push_back(Chain);\n    \u00a0\u00a0for (unsigned I = 0, E = RetLocs.size(); I != E; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0++I) {\n    \u00a0\u00a0\u00a0\u00a0CCValAssign &VA = RetLocs[I];\n    \u00a0\u00a0\u00a0\u00a0SDValue RetValue = OutVals[I];\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0switch (VA.getLocInfo()) {\n    \u00a0\u00a0\u00a0\u00a0case CCValAssign::SExt:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RetValue = DAG.getNode(ISD::SIGN_EXTEND, DL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VA.getLocVT(), RetValue);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0case CCValAssign::ZExt:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RetValue = DAG.getNode(ISD::ZERO_EXTEND, DL, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VA.getLocVT(), RetValue);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0case CCValAssign::AExt:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RetValue = DAG.getNode(ISD::ANY_EXTEND, DL,\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VA.getLocVT(), RetValue);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0case CCValAssign::Full:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0llvm_unreachable(\"Unhandled VA.getLocInfo()\");\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0\u00a0\u00a0Register Reg = VA.getLocReg();\n    \u00a0\u00a0\u00a0\u00a0Chain = DAG.getCopyToReg(Chain, DL, Reg, RetValue, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Glue);\n    \u00a0\u00a0\u00a0\u00a0Glue = Chain.getValue(1);\n    \u00a0\u00a0\u00a0\u00a0RetOps.push_back(DAG.getRegister(Reg, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0VA.getLocVT()));\n    \u00a0\u00a0}\n    ```", "```cpp\n    \u00a0\u00a0RetOps[0] = Chain;\n    \u00a0\u00a0if (Glue.getNode())\n    \u00a0\u00a0\u00a0\u00a0RetOps.push_back(Glue);\n    ```", "```cpp\n    \u00a0\u00a0return DAG.getNode(M88kISD::RET_FLAG, DL, \n    \u00a0\u00a0\u00a0\u00a0MVT::Other, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RetOps);\n    }\n    ```", "```cpp\n    M88kTargetLowering::M88kTargetLowering(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const TargetMachine &TM, const M88kSubtarget &STI)\n    \u00a0\u00a0\u00a0\u00a0: TargetLowering(TM), Subtarget(STI) {\n    ```", "```cpp\n    \u00a0\u00a0addRegisterClass(MVT::i32, &M88k::GPRRegClass);\n    ```", "```cpp\n    \u00a0\u00a0computeRegisterProperties(Subtarget.getRegisterInfo());\n    ```", "```cpp\n    \u00a0\u00a0setStackPointerRegisterToSaveRestore(M88k::R31);\n    ```", "```cpp\n    \u00a0\u00a0setBooleanContents(ZeroOrOneBooleanContent);\n    ```", "```cpp\n    \u00a0\u00a0setOperationAction(ISD::CTTZ, MVT::i32, Expand);\n    ```", "```cpp\n    \u00a0\u00a0setTargetDAGCombine(ISD::OR);\n    }\n    ```", "```cpp\nSDValue M88kTargetLowering::PerformDAGCombine(SDNode *N,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DAGCombinerInfo &DCI) const {\n\u00a0\u00a0if (DCI.isBeforeLegalizeOps())\n\u00a0\u00a0\u00a0\u00a0return SDValue();\n\u00a0\u00a0switch (N->getOpcode()) {\n\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0case ISD::OR:\n\u00a0\u00a0\u00a0\u00a0return performORCombine(N, DCI);\n\u00a0\u00a0}\n\u00a0\u00a0return SDValue();\n}\n```", "```cpp\nSDValue performORCombine(SDNode *N, \n\u00a0\u00a0\u00a0\u00a0TargetLowering::DAGCombinerInfo &DCI) {\n\u00a0\u00a0SelectionDAG &DAG = DCI.DAG;\n\u00a0\u00a0uint64_t Width, Offset;\n\u00a0\u00a0ConstantSDNode *Mask =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dyn_cast<ConstantSDNode>(N->getOperand(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01));\n\u00a0\u00a0if (!Mask ||\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!isShiftedMask(Mask->getZExtValue(), Width, Offset))\n\u00a0\u00a0\u00a0\u00a0return SDValue();\n\u00a0\u00a0EVT ValTy = N->getValueType(0);\n\u00a0\u00a0SDLoc DL(N);\n\u00a0\u00a0return DAG.getNode(M88kISD::SET, DL, ValTy, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0N->getOperand(0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DAG.getConstant(Width << 5 | Offset, DL, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MVT::i32));\n}\n```", "```cpp\nclass M88kAsmPrinter : public AsmPrinter {\npublic:\n\u00a0\u00a0explicit M88kAsmPrinter(TargetMachine &TM,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0std::unique_ptr<MCStreamer> \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Streamer)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: AsmPrinter(TM, std::move(Streamer)) {}\n\u00a0\u00a0StringRef getPassName() const override\n\u00a0\u00a0{ return \"M88k Assembly Printer\"; }\n\u00a0\u00a0void emitInstruction(const MachineInstr *MI) override;\n};\n```", "```cpp\nvoid M88kAsmPrinter::emitInstruction(const MachineInstr *MI) {\n\u00a0\u00a0MCInst LoweredMI;\n\u00a0\u00a0switch (MI->getOpcode()) {\n\u00a0\u00a0case M88k::RET:\n\u00a0\u00a0\u00a0\u00a0LoweredMI = MCInstBuilder(M88k::JMP).addReg(M88k::R1);\n\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0M88kMCInstLower Lower(MF->getContext(), *this);\n\u00a0\u00a0\u00a0\u00a0Lower.lower(MI, LoweredMI);\n\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0}\n\u00a0\u00a0EmitToStreamer(*OutStreamer, LoweredMI);\n}\n```", "```cpp\nvoid M88kMCInstLower::lower(const MachineInstr *MI, MCInst &OutMI) const {\n\u00a0\u00a0OutMI.setOpcode(MI->getOpcode());\n\u00a0\u00a0for (unsigned I = 0, E = MI->getNumOperands(); I != E; ++I) \n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0const MachineOperand &MO = MI->getOperand(I);\n\u00a0\u00a0\u00a0\u00a0switch (MO.getType()) {\n\u00a0\u00a0\u00a0\u00a0case MachineOperand::MO_Register:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (MO.isImplicit())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OutMI.addOperand(MCOperand::createReg(MO.getReg()));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case MachineOperand::MO_Immediate:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OutMI.addOperand(MCOperand::createImm(MO.getImm()));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0}\n}\n```", "```cpp\nextern \"C\" LLVM_EXTERNAL_VISIBILITY void \nLLVMInitializeM88kAsmPrinter() {\n\u00a0\u00a0RegisterAsmPrinter<M88kAsmPrinter> X(getTheM88kTarget());\n}\n```", "```cpp\n#define GET_INSTRINFO_MC_DESC\n#include \"M88kGenInstrInfo.inc\"\n#define GET_SUBTARGETINFO_MC_DESC\n#include \"M88kGenSubtargetInfo.inc\"\n#define GET_REGINFO_MC_DESC\n#include \"M88kGenRegisterInfo.inc\"\nstatic MCInstrInfo *createM88kMCInstrInfo() {\n\u00a0\u00a0MCInstrInfo *X = new MCInstrInfo();\n\u00a0\u00a0InitM88kMCInstrInfo(X);\n\u00a0\u00a0return X;\n}\nstatic MCRegisterInfo *createM88kMCRegisterInfo(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Triple &TT) {\n\u00a0\u00a0MCRegisterInfo *X = new MCRegisterInfo();\n\u00a0\u00a0InitM88kMCRegisterInfo(X, M88k::R1);\n\u00a0\u00a0return X;\n}\nstatic MCSubtargetInfo *createM88kMCSubtargetInfo(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Triple &TT, StringRef CPU, StringRef \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FS) {\n\u00a0\u00a0return createM88kMCSubtargetInfoImpl(TT, CPU, FS);\n}\n```", "```cpp\nstatic MCAsmInfo *createM88kMCAsmInfo(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const MCRegisterInfo &MRI, const Triple &TT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const MCTargetOptions &Options) {\n\u00a0\u00a0return new M88kMCAsmInfo(TT);\n}\nstatic MCInstPrinter *createM88kMCInstPrinter(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const Triple &T, unsigned SyntaxVariant,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const MCAsmInfo &MAI, const MCInstrInfo &MII,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const MCRegisterInfo &MRI) {\n\u00a0\u00a0return new M88kInstPrinter(MAI, MII, MRI);\n}\n```", "```cpp\nextern \"C\" LLVM_EXTERNAL_VISIBILITY\nvoid LLVMInitializeM88kTargetMC() {\n\u00a0\u00a0TargetRegistry::RegisterMCAsmInfo(getTheM88kTarget(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCAsmInfo);\n\u00a0\u00a0TargetRegistry::RegisterMCCodeEmitter(getTheM88kTarget(),\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCCodeEmitter);\n\u00a0\u00a0TargetRegistry::RegisterMCInstrInfo(getTheM88kTarget(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCInstrInfo);\n\u00a0\u00a0TargetRegistry::RegisterMCRegInfo(getTheM88kTarget(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCRegisterInfo);\n\u00a0\u00a0TargetRegistry::RegisterMCSubtargetInfo(getTheM88kTarget(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCSubtargetInfo);\n\u00a0\u00a0TargetRegistry::RegisterMCAsmBackend(getTheM88kTarget(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCAsmBackend);\n\u00a0\u00a0TargetRegistry::RegisterMCInstPrinter(getTheM88kTarget(),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createM88kMCInstPrinter);\n}\n```", "```cpp\n#define GET_REGINFO_ENUM\n#include \"M88kGenRegisterInfo.inc\"\n#define GET_INSTRINFO_ENUM\n#include \"M88kGenInstrInfo.inc\"\n#define GET_SUBTARGETINFO_ENUM\n#include \"M88kGenSubtargetInfo.inc\"\n```", "```cpp\nM88kMCAsmInfo::M88kMCAsmInfo(const Triple &TT) {\n\u00a0\u00a0CodePointerSize = 4;\n\u00a0\u00a0IsLittleEndian = false;\n\u00a0\u00a0MinInstAlignment = 4;\n\u00a0\u00a0CommentString = \"#\";\n}\n```", "```cpp\nusing DecodeStatus = MCDisassembler::DecodeStatus;\nnamespace {\nclass M88kDisassembler : public MCDisassembler {\npublic:\n\u00a0\u00a0M88kDisassembler(const MCSubtargetInfo &STI, MCContext &Ctx)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: MCDisassembler(STI, Ctx) {}\n\u00a0\u00a0~M88kDisassembler() override = default;\n\u00a0\u00a0DecodeStatus getInstruction(MCInst &instr, uint64_t &Size,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ArrayRef<uint8_t> Bytes, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint64_t Address,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raw_ostream &CStream) const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0override;\n};\n}\n```", "```cpp\nstatic MCDisassembler *\ncreateM88kDisassembler(const Target &T,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const MCSubtargetInfo &STI,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MCContext &Ctx) {\n\u00a0\u00a0return new M88kDisassembler(STI, Ctx);\n}\n```", "```cpp\nextern \"C\" LLVM_EXTERNAL_VISIBILITY void\nLLVMInitializeM88kDisassembler() {\n\u00a0\u00a0TargetRegistry::RegisterMCDisassembler(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getTheM88kTarget(), createM88kDisassembler);\n}\n```", "```cpp\nstatic const uint16_t GPRDecoderTable[] = {\n\u00a0\u00a0\u00a0\u00a0M88k::R0,\u00a0\u00a0M88k::R1,\u00a0\u00a0M88k::R2,\u00a0\u00a0M88k::R3,\n\u00a0\u00a0\u00a0\u00a0M88k::R4,\u00a0\u00a0M88k::R5,\u00a0\u00a0M88k::R6,\u00a0\u00a0M88k::R7,\n\u00a0\u00a0\u00a0\u00a0M88k::R8,\u00a0\u00a0M88k::R9,\u00a0\u00a0M88k::R10, M88k::R11,\n\u00a0\u00a0\u00a0\u00a0M88k::R12, M88k::R13, M88k::R14, M88k::R15,\n\u00a0\u00a0\u00a0\u00a0M88k::R16, M88k::R17, M88k::R18, M88k::R19,\n\u00a0\u00a0\u00a0\u00a0M88k::R20, M88k::R21, M88k::R22, M88k::R23,\n\u00a0\u00a0\u00a0\u00a0M88k::R24, M88k::R25, M88k::R26, M88k::R27,\n\u00a0\u00a0\u00a0\u00a0M88k::R28, M88k::R29, M88k::R30, M88k::R31,\n};\nstatic DecodeStatus\nDecodeGPRRegisterClass(MCInst &Inst, uint64_t RegNo,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uint64_t Address,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const void *Decoder) {\n\u00a0\u00a0if (RegNo > 31)\n\u00a0\u00a0\u00a0\u00a0return MCDisassembler::Fail;\n\u00a0\u00a0unsigned Register = GPRDecoderTable[RegNo];\n\u00a0\u00a0Inst.addOperand(MCOperand::createReg(Register));\n\u00a0\u00a0return MCDisassembler::Success;\n}\n```", "```cpp\nDecodeStatus M88kDisassembler::getInstruction(\n\u00a0\u00a0\u00a0\u00a0MCInst &MI, uint64_t &Size, ArrayRef<uint8_t> Bytes,\n\u00a0\u00a0\u00a0\u00a0uint64_t Address, raw_ostream &CS) const {\n\u00a0\u00a0if (Bytes.size() < 4) {\n\u00a0\u00a0\u00a0\u00a0Size = 0;\n\u00a0\u00a0\u00a0\u00a0return MCDisassembler::Fail;\n\u00a0\u00a0}\n\u00a0\u00a0Size = 4;\n\u00a0\u00a0uint32_t Inst = 0;\n\u00a0\u00a0for (uint32_t I = 0; I < Size; ++I)\n\u00a0\u00a0\u00a0\u00a0Inst = (Inst << 8) | Bytes[I];\n\u00a0\u00a0return decodeInstruction(DecoderTableM88k32, MI, Inst,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Address, this, STI);\n}\n```", "```cpp\nset(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD \"M88k\"\u00a0\u00a0\u2026 )\n```", "```cpp\n    add_llvm_component_group(M88k)\n    ```", "```cpp\n    set(LLVM_TARGET_DEFINITIONS M88k.tdtablegen(LLVM M88kGenAsmMatcher.inc -gen-asm-matcher)\n    tablegen(LLVM M88kGenAsmWriter.inc -gen-asm-writer)\n    tablegen(LLVM M88kGenCallingConv.inc -gen-callingconv)\n    tablegen(LLVM M88kGenDAGISel.inc -gen-dag-isel)\n    tablegen(LLVM M88kGenDisassemblerTables.inc \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-gen-disassembler)\n    tablegen(LLVM M88kGenInstrInfo.inc -gen-instr-info)\n    tablegen(LLVM M88kGenMCCodeEmitter.inc -gen-emitter)\n    tablegen(LLVM M88kGenRegisterInfo.inc -gen-register-info)\n    tablegen(LLVM M88kGenSubtargetInfo.inc -gen-subtarget)\n    add_public_tablegen_target(M88kCommonTableGen)\n    ```", "```cpp\n    add_llvm_target(M88kCodeGen\n    \u00a0\u00a0M88kAsmPrinter.cpp M88kFrameLowering.cpp\n    \u00a0\u00a0M88kISelDAGToDAG.cpp M88kISelLowering.cpp\n    \u00a0\u00a0M88kRegisterInfo.cpp M88kSubtarget.cpp\n    \u00a0\u00a0M88kTargetMachine.cpp )\n    ```", "```cpp\n    add_subdirectory(MCTargetDesc)\n    add_subdirectory(Disassembler)\n    ```", "```cpp\n$ ninja\n```", "```cpp\n$ bin/llc \u2013version\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0m88k\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- M88k\n```", "```cpp\ntarget triple = \"m88k-openbsd\"\ndefine i32 @f1(i32 %a, i32 %b) {\n\u00a0\u00a0%res = and i32 %a, %b\n\u00a0\u00a0ret i32 %res\n}\n```", "```cpp\n$ llc < example.ll\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.text\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.file\u00a0\u00a0\u00a0\"<stdin>\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.globl\u00a0\u00a0f1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# -- Begin function f1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.align\u00a0\u00a03\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.type\u00a0\u00a0\u00a0f1,@function\nf1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# @f1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.cfi_startproc\n# %bb.0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and %r2, %r2, %r3\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jmp %r1\n.Lfunc_end0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.size\u00a0\u00a0\u00a0f1, .Lfunc_end0-f1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.cfi_endproc\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# -- End function\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.section\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\".note.GNU-stack\",\"\",@progbits\n```"]