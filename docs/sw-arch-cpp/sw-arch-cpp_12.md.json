["```cpp\n# We want to cache the conan data and CMake build directory\ncache:\n  key: all\n  paths:\n    - .conan\n    - build\n\n# We're using conanio/gcc10 as the base image for all the subsequent commands\ndefault:\n  image: conanio/gcc10\n\nstages:\n  - prerequisites\n  - build\n\nbefore_script:\n  - export CONAN_USER_HOME=\"$CI_PROJECT_DIR\"\n\n# Configure conan\nprerequisites:\n  stage: prerequisites\n  script:\n    - pip install conan==1.34.1\n    - conan profile new default || true\n    - conan profile update settings.compiler=gcc default\n    - conan profile update settings.compiler.libcxx=libstdc++11 default\n    - conan profile update settings.compiler.version=10 default\n    - conan profile update settings.arch=x86_64 default\n    - conan profile update settings.build_type=Release default\n    - conan profile update settings.os=Linux default\n    - conan remote add trompeloeil https://api.bintray.com/conan/trompeloeil/trompeloeil || true\n\n# Build the project\nbuild:\n  stage: build\n  script:\n    - sudo apt-get update && sudo apt-get install -y docker.io\n    - mkdir -p build\n    - cd build\n    - conan install ../ch08 --build=missing\n    - cmake -DBUILD_TESTING=1 -DCMAKE_BUILD_TYPE=Release ../ch08/customer\n    - cmake --build .\n```", "```cpp\nremote:\nremote: To create a merge request for fix-ci-cd, visit:\nremote:   https://gitlab.com/hosacpp/continuous-integration/merge_requests/new?merge_request%5Bsource_branch%5D=fix-ci-cd\nremote:                         \n```", "```cpp\n# language: en\nFeature: Summing\nIn order to see how much we earn,\nSum must be able to add two numbers together\n\nScenario: Regular numbers\n  Given I have entered 3 and 2 as parameters\n  When I add them\n  Then the result should be 5\n```", "```cpp\n#include <gtest/gtest.h>\n#include <cucumber-cpp/autodetect.hpp>\n\n#include <Sum.h>\n\nusing cucumber::ScenarioScope;\n\nstruct SumCtx {\n  Sum sum;\n  int a;\n  int b;\n  int result;\n};\n\nGIVEN(\"^I have entered (\\\\d+) and (\\\\d+) as parameters$\", (const int a, const int b)) {\n    ScenarioScope<SumCtx> context;\n\n    context->a = a;\n    context->b = b;\n}\n\nWHEN(\"^I add them\") {\n    ScenarioScope<SumCtx> context;\n\n    context->result = context->sum.sum(context->a, context->b);\n}\n\nTHEN(\"^the result should be (.*)$\", (const int expected)) {\n    ScenarioScope<SumCtx> context;\n\n    EXPECT_EQ(expected, context->result);\n}\n```", "```cpp\nint sum (int a, int b) {\n return a+b;\n}\n```", "```cpp\nint sum (int a, int b) {\n  return a;\n}\n```", "```cpp\n# Run the unit tests with ctest\ntest:\n  stage: test\n  script:\n    - cd build\n    - ctest .\n```", "```cpp\ncache:\n  key: all\n  paths:\n    - .conan\n    - build\n\ndefault:\n  image: conanio/gcc9\n\nstages:\n  - prerequisites\n  - build\n - test # We add another stage that tuns the tests\n\nbefore_script:\n  - export CONAN_USER_HOME=\"$CI_PROJECT_DIR\"\n\nprerequisites:\n  stage: prerequisites\n  script:\n    - pip install conan==1.34.1\n    - conan profile new default || true\n    - conan profile update settings.compiler=gcc default\n    - conan profile update settings.compiler.libcxx=libstdc++11 default\n    - conan profile update settings.compiler.version=10 default\n    - conan profile update settings.arch=x86_64 default\n    - conan profile update settings.build_type=Release default\n    - conan profile update settings.os=Linux default\n    - conan remote add trompeloeil https://api.bintray.com/conan/trompeloeil/trompeloeil || true\n\nbuild:\n  stage: build\n  script:\n    - sudo apt-get update && sudo apt-get install -y docker.io\n    - mkdir -p build\n    - cd build\n    - conan install ../ch08 --build=missing\n    - cmake -DBUILD_TESTING=1 -DCMAKE_BUILD_TYPE=Release ../ch08/customer\n    - cmake --build .\n\n# Run the unit tests with ctest\ntest:\n stage: test\n script:\n - cd build\n - ctest .\n```", "```cpp\ntasks:\n  # Each Ansible task is written as a YAML object\n  # This uses a copy module\n  - name: Copy the binaries to the target machine\n    copy:\n      src: our_application\n      dest: /opt/app/bin/our_application\n  # This tasks invokes the shell module. The text after the `shell:` key\n  # will run in a shell on target machine\n  - name: start our application in detached mode\n    shell: cd /opt/app/bin; nohup ./our_application </dev/null >/dev/null 2>&1 &\n```", "```cpp\n# Package the application and publish the artifact\npackage:\n  stage: package\n  # Use cpack for packaging\n  script:\n    - cd build\n    - cpack .\n  # Save the deb package artifact\n  artifacts:\n    paths:\n      - build/Customer*.deb\n```", "```cpp\n# Deploy using Ansible\ndeploy:\n  stage: deploy\n  script:\n    - cd build\n    - ansible-playbook -i localhost, ansible.yml\n```", "```cpp\ncache:\n  key: all\n  paths:\n    - .conan\n    - build\n\ndefault:\n  image: conanio/gcc9\n\nstages:\n  - prerequisites\n  - build\n  - test\n - package\n - deploy\n\nbefore_script:\n  - export CONAN_USER_HOME=\"$CI_PROJECT_DIR\"\n\nprerequisites:\n  stage: prerequisites\n  script:\n    - pip install conan==1.34.1\n    - conan profile new default || true\n    - conan profile update settings.compiler=gcc default\n    - conan profile update settings.compiler.libcxx=libstdc++11 default\n    - conan profile update settings.compiler.version=10 default\n    - conan profile update settings.arch=x86_64 default\n    - conan profile update settings.build_type=Release default\n    - conan profile update settings.os=Linux default\n    - conan remote add trompeloeil https://api.bintray.com/conan/trompeloeil/trompeloeil || true\n\nbuild:\n  stage: build\n  script:\n    - sudo apt-get update && sudo apt-get install -y docker.io\n    - mkdir -p build\n    - cd build\n    - conan install ../ch08 --build=missing\n    - cmake -DBUILD_TESTING=1 -DCMAKE_BUILD_TYPE=Release ../ch08/customer\n    - cmake --build .\n\ntest:\n  stage: test\n  script:\n    - cd build\n    - ctest .\n\n# Package the application and publish the artifact\npackage:\n stage: package\n # Use cpack for packaging\n script:\n - cd build\n - cpack .\n # Save the deb package artifact\n artifacts:\n paths:\n - build/Customer*.deb\n\n# Deploy using Ansible\ndeploy:\n stage: deploy\n script:\n - cd build\n - ansible-playbook -i localhost, ansible.yml\n```", "```cpp\n{\n  \"variables\": {\n    \"aws_access_key\": \"\",\n    \"aws_secret_key\": \"\"\n  },\n  \"builders\": [{\n    \"type\": \"amazon-ebs\",\n    \"access_key\": \"{{user `aws_access_key`}}\",\n    \"secret_key\": \"{{user `aws_secret_key`}}\",\n    \"region\": \"eu-central-1\",\n    \"source_ami\": \"ami-0f1026b68319bad6c\",\n    \"instance_type\": \"t2.micro\",\n    \"ssh_username\": \"admin\",\n    \"ami_name\": \"Project's Base Image {{timestamp}}\"\n  }],\n  \"provisioners\": [{\n    \"type\": \"shell\",\n    \"inline\": [\n      \"sudo apt-get update\",\n      \"sudo apt-get install -y nginx\"\n    ]\n  }]\n}\n```", "```cpp\n{\n  \"variables\": {\n    \"aws_access_key\": \"\",\n    \"aws_secret_key\": \"\"\n  },\n  \"builders\": [{\n    \"type\": \"amazon-ebs\",\n    \"access_key\": \"{{user `aws_access_key`}}\",\n    \"secret_key\": \"{{user `aws_secret_key`}}\",\n    \"region\": \"eu-central-1\",\n    \"source_ami\": \"ami-0f1026b68319bad6c\",\n    \"instance_type\": \"t2.micro\",\n    \"ssh_username\": \"admin\",\n    \"ami_name\": \"Project's Base Image {{timestamp}}\"\n  }],\n  \"provisioners\": [{\n \"type\": \"ansible\",\n \"playbook_file\": \"./provision.yml\",\n \"user\": \"admin\",\n \"host_alias\": \"baseimage\"\n }],\n \"post-processors\": [{\n \"type\": \"manifest\",\n \"output\": \"manifest.json\",\n \"strip_path\": true\n }]\n}\n```", "```cpp\n# Configure the AWS provider\nprovider \"aws\" {\n  region = var.region\n  version = \"~> 2.7\"\n}\n\n# Input variable pointing to an SSH key we want to associate with the \n# newly created machine\nvariable \"public_key_path\" {\n  description = <<DESCRIPTION\nPath to the SSH public key to be used for authentication.\nEnsure this keypair is added to your local SSH agent so provisioners can\nconnect.\nExample: ~/.ssh/terraform.pub\nDESCRIPTION\n\n  default = \"~/.ssh/id_rsa.pub\"\n}\n\n# Input variable with a name to attach to the SSH key\nvariable \"aws_key_name\" {\n  description = \"Desired name of AWS key pair\"\n  default = \"terraformer\"\n}\n\n# An ID from our previous Packer run that points to the custom base image\nvariable \"packer_ami\" {\n}\n\nvariable \"env\" {\n  default = \"development\"\n}\n\nvariable \"region\" {\n}\n\n# Create a new AWS key pair cotaining the public key set as the input \n# variable\nresource \"aws_key_pair\" \"deployer\" {\n  key_name = var.aws_key_name\n\n  public_key = file(var.public_key_path)\n}\n\n# Create a VM instance from the custom base image that uses the previously created key\n# The VM size is t2.xlarge, it uses a persistent storage volume of 60GiB,\n# and is tagged for easier filtering\nresource \"aws_instance\" \"project\" {\n  ami = var.packer_ami\n\n  instance_type = \"t2.xlarge\"\n\n  key_name = aws_key_pair.deployer.key_name\n\n  root_block_device {\n    volume_type = \"gp2\"\n    volume_size = 60\n  }\n\n  tags = {\n    Provider = \"terraform\"\n    Env = var.env\n    Name = \"main-instance\"\n  }\n}\n```"]