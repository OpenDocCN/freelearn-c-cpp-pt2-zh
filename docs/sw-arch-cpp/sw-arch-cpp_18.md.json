["```cpp\nFROM ubuntu:bionic\n\nRUN apt-get update && apt-get -y install build-essentials gcc\n\nCMD /usr/bin/gcc\n```", "```cpp\nFROM scratch\n\nCOPY customer /bin/customer\n\nCMD /bin/customer\n```", "```cpp\nFROM ubuntu:bionic\n\nRUN apt-get update && apt-get -y install build-essentials gcc cmake\n\nADD . /usr/src\n\nWORKDIR /usr/src\n\nRUN mkdir build && \\\n    cd build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release && \\\n    cmake --build . && \\\n    cmake --install .\n\nCMD /usr/local/bin/customer\n```", "```cpp\nFROM scratch\n\nCOPY customer /bin/customer\n\nCMD /bin/customer\n```", "```cpp\nFROM ubuntu:bionic AS builder\n\nRUN apt-get update && apt-get -y install build-essentials gcc cmake\n\nADD . /usr/src\n\nWORKDIR /usr/src\n\nRUN mkdir build && \\\n    cd build && \\\n    cmake .. -DCMAKE_BUILD_TYPE=Release && \\\n    cmake --build .\n\nFROM ubuntu:bionic\n\nCOPY --from=builder /usr/src/build/bin/customer /bin/customer\n\nCMD /bin/customer\n```", "```cpp\nimage: hosacpp/merchant:v2.0.3\nmanifests:\n  - image: hosacpp/merchant:v2.0.3-amd64\n    platform:\n      architecture: amd64\n      os: linux\n  - image: hosacpp/merchant:v2.0.3-arm32\n    platform:\n      architecture: arm\n      os: linux\n  - image: hosacpp/merchant:v2.0.3-arm64\n    platform:\n      architecture: arm64\n      os: linux\n```", "```cpp\n# create two build contexts running on different machines\ndocker context create \\\n    --docker host=ssh://docker-user@host1.domifair.org \\\n    --description=\"Remote engine amd64\" \\\n    node-amd64\ndocker context create \\\n    --docker host=ssh://docker-user@host2.domifair.org \\\n    --description=\"Remote engine arm64\" \\\n    node-arm64\n\n# use the contexts\ndocker buildx create --use --name mybuild node-amd64\ndocker buildx create --append --name mybuild node-arm64\n\n# build an image\ndocker buildx build --platform linux/amd64,linux/arm64 .\n```", "```cpp\n#!/bin/sh\n\nctr=$(buildah from ubuntu:bionic)\n\nbuildah run $ctr -- /bin/sh -c 'apt-get update && apt-get install -y build-essential gcc'\n\nbuildah config --cmd '/usr/bin/gcc' \"$ctr\"\n\nbuildah commit \"$ctr\" hosacpp-gcc\n\nbuildah rm \"$ctr\"\n```", "```cpp\n---\n- name: Container image with ansible-bender\n  hosts: all\n  vars:\n    ansible_bender:\n      base_image: python:3-buster\n\n      target_image:\n        name: hosacpp-gcc\n        cmd: /usr/bin/gcc\n  tasks:\n  - name: Install Apt packages\n    apt:\n      pkg:\n        - build-essential\n        - gcc\n```", "```cpp\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/Dockerfile.in\n                ${PROJECT_BINARY_DIR}/Dockerfile @ONLY)\n```", "```cpp\nFROM ubuntu:latest\nADD Customer-@PROJECT_VERSION@-Linux.deb .\nRUN apt-get update && \\\n    apt-get -y --no-install-recommends install ./Customer-@PROJECT_VERSION@-Linux.deb && \\\n    apt-get autoremove -y && \\\n    apt-get clean && \\\n    rm -r /var/lib/apt/lists/* Customer-@PROJECT_VERSION@-Linux.deb\nENTRYPOINT [\"/usr/bin/customer\"]\nEXPOSE 8080\n```", "```cpp\nfind_program(Docker_EXECUTABLE docker)\n if(NOT Docker_EXECUTABLE)\n   message(FATAL_ERROR \"Docker not found\")\n endif()\n```", "```cpp\nadd_custom_target(\n   customer-deb\n   COMMENT \"Creating Customer DEB package\"\n   COMMAND ${CMAKE_CPACK_COMMAND} -G DEB\n   WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n   VERBATIM)\n add_dependencies(customer-deb libcustomer)\n```", "```cpp\nadd_custom_target(\n   docker\n   COMMENT \"Preparing Docker image\"\n   COMMAND ${Docker_EXECUTABLE} build ${PROJECT_BINARY_DIR}\n           -t dominicanfair/customer:${PROJECT_VERSION} -t dominicanfair/customer:latest\n   VERBATIM)\n add_dependencies(docker customer-deb)\n```", "```cpp\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: dominican-front\n  name: dominican-front\nspec:\n  selector:\n    matchLabels:\n      app: dominican-front\n  template:\n    metadata:\n      labels:\n        app: dominican-front\n    spec:\n      containers:\n        - name: webserver\n          imagePullPolicy: Always\n          image: nginx\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n      restartPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: dominican-front\n  name: dominican-front\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app: dominican-front\n  type: ClusterIP\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: dominican-merchant\n  name: merchant\nspec:\n  selector:\n    matchLabels:\n      app: dominican-merchant\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: dominican-merchant\n    spec:\n      containers:\n        - name: merchant\n          imagePullPolicy: Always\n          image: hosacpp/merchant:v2.0.3\n          ports:\n            - name: http\n              containerPort: 8000\n              protocol: TCP\n      restartPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: dominican-merchant\n  name: merchant\nspec:\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8000\n  selector:\n    app: dominican-merchant\n    type: ClusterIP\n```", "```cpp\nversion: \"3.8\"\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"80:80\"\n    depends_on:\n      - merchant\n  merchant:\n    image: hosacpp/merchant:v2.0.3\n    deploy:\n      replicas: 3\n    ports:\n      - \"8000\"\n```", "```cpp\njob \"web\" {\n  datacenters = [\"dc1\"]\n  type = \"service\"\n  group \"nginx\" {\n    task \"nginx\" {\n      driver = \"docker\"\n      config {\n        image = \"nginx\"\n        port_map {\n          http = 80\n        }\n      }\n      resources {\n        network {\n          port \"http\" {\n              static = 80\n          }\n        }\n      }\n      service {\n        name = \"nginx\"\n        tags = [ \"dominican-front\", \"web\", \"nginx\" ]\n        port = \"http\"\n        check {\n          type = \"tcp\"\n          interval = \"10s\"\n          timeout = \"2s\"\n        }\n      }\n    }\n  }\n}\n```", "```cpp\njob \"merchant\" {\n  datacenters = [\"dc1\"]\n  type = \"service\"\n  group \"merchant\" {\n    count = 3\n    task \"merchant\" {\n      driver = \"docker\"\n      config {\n        image = \"hosacpp/merchant:v2.0.3\"\n        port_map {\n          http = 8000\n        }\n      }\n      resources {\n        network {\n          port \"http\" {\n              static = 8000\n          }\n        }\n      }\n      service {\n        name = \"merchant\"\n        tags = [ \"dominican-front\", \"merchant\" ]\n        port = \"http\"\n        check {\n          type = \"tcp\"\n          interval = \"10s\"\n          timeout = \"2s\"\n        }\n      }\n    }\n  }\n}\n```"]