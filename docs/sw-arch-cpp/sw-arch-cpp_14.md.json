["```cpp\nsudo cpupower frequency-set --governor performance\n```", "```cpp\n[requires]\n\nbenchmark/1.5.2\n\n\n[generators]\n\nCMakeDeps\n```", "```cpp\ncd <build_directory>\n\nconan install <source_directory> --build=missing -s build_type=Release\n```", "```cpp\nlist(APPEND CMAKE_PREFIX_PATH \"${CMAKE_BINARY_DIR}\")\n\nfind_package(benchmark REQUIRED)\n```", "```cpp\nfunction(add_benchmark NAME SOURCE)\n\n  add_executable(${NAME} ${SOURCE})\n\n  target_compile_features(${NAME} PRIVATE cxx_std_20)\n\n  target_link_libraries(${NAME} PRIVATE benchmark::benchmark)\n\nendfunction()\n```", "```cpp\nadd_benchmark(microbenchmark_1 microbenchmarking/main_1.cpp)\n```", "```cpp\nusing namespace std::ranges;\n\n\ntemplate <typename T>\n\nauto make_sorted_vector(std::size_t size) {\n\n  auto sorted = std::vector<T>{};\n\n  sorted.reserve(size);\n\n\n  auto sorted_view = views::iota(T{0}) | views::take(size);\n\n  std::ranges::copy(sorted_view, std::back_inserter(sorted));\n\n  return sorted;\n\n}\n```", "```cpp\nconstexpr auto MAX_HAYSTACK_SIZE = std::size_t{10'000'000};\n\nconstexpr auto NEEDLE = 2137;\n```", "```cpp\nvoid linear_search_in_sorted_vector(benchmark::State &state) {\n\n  auto haystack = make_sorted_vector<int>(MAX_HAYSTACK_SIZE);\n\n  for (auto _ : state) {\n\n    benchmark::DoNotOptimize(find(haystack, NEEDLE));\n\n  }\n\n}\n```", "```cpp\nvoid binary_search_in_sorted_vector(benchmark::State &state) {\n\n  auto haystack = make_sorted_vector<int>(MAX_HAYSTACK_SIZE);\n\n  for (auto _ : state) {\n\n    benchmark::DoNotOptimize(lower_bound(haystack, NEEDLE));\n\n  }\n\n}\n```", "```cpp\nBENCHMARK(binary_search_in_sorted_vector);\n\nBENCHMARK(linear_search_in_sorted_vector);\n```", "```cpp\nBENCHMARK_MAIN();\n```", "```cpp\nbenchmark [--benchmark_list_tests={true|false}]\n\n          [--benchmark_filter=<regex>]\n\n          [--benchmark_min_time=<min_time>]\n\n          [--benchmark_repetitions=<num_repetitions>]\n\n          [--benchmark_report_aggregates_only={true|false}]\n\n          [--benchmark_display_aggregates_only={true|false}]\n\n          [--benchmark_format=<console|json|csv>]\n\n          [--benchmark_out=<filename>]\n\n          [--benchmark_out_format=<json|console|csv>]\n\n          [--benchmark_color={auto|true|false}]\n\n          [--benchmark_counters_tabular={true|false}]\n\n          [--v=<verbosity>]\n```", "```cpp\n2021-02-28T16:19:28+01:00\n\nRunning ./microbenchmark_1\n\nRun on (8 X 2601 MHz CPU s)\n\nLoad Average: 0.52, 0.58, 0.59\n\n-------------------------------------------------------------------------\n\nBenchmark                               Time             CPU   Iterations\n\n-------------------------------------------------------------------------\n\nlinear_search_in_sorted_vector        984 ns          984 ns       746667\n\nbinary_search_in_sorted_vector       18.9 ns         18.6 ns     34461538\n```", "```cpp\nvoid search_in_sorted_vector(benchmark::State &state, auto finder) {\n\n  auto haystack = make_sorted_vector<int>(MAX_HAYSTACK_SIZE);\n\n  for (auto _ : state) {\n\n    benchmark::DoNotOptimize(finder(haystack, NEEDLE));\n\n  }\n\n}\n```", "```cpp\nBENCHMARK_CAPTURE(search_in_sorted_vector, binary, lower_bound);\n\nBENCHMARK_CAPTURE(search_in_sorted_vector, linear, find);\n```", "```cpp\n-------------------------------------------------------------------------\n\nBenchmark                               Time             CPU   Iterations\n\n-------------------------------------------------------------------------\n\nsearch_in_sorted_vector/binary       19.0 ns         18.5 ns     28000000\n\nsearch_in_sorted_vector/linear        959 ns          952 ns       640000\n```", "```cpp\nvoid search_in_sorted_vector(benchmark::State &state, auto finder) {\n\n  const auto haystack = make_sorted_vector<int>(state.range(0));\n\n  const auto needle = 2137;\n\n  for (auto _ : state) {\n\n    benchmark::DoNotOptimize(finder(haystack, needle));\n\n  }\n\n}\n```", "```cpp\nconstexpr auto MIN_HAYSTACK_SIZE = std::size_t{1'000};\n\nconstexpr auto MAX_HAYSTACK_SIZE = std::size_t{10'000'000};\n\n\nBENCHMARK_CAPTURE(search_in_sorted_vector, binary, lower_bound)\n\n    ->RangeMultiplier(10)\n\n    ->Range(MIN_HAYSTACK_SIZE, MAX_HAYSTACK_SIZE);\n\nBENCHMARK_CAPTURE(search_in_sorted_vector, linear, find)\n\n    ->RangeMultiplier(10)\n\n    ->Range(MIN_HAYSTACK_SIZE, MAX_HAYSTACK_SIZE);\n```", "```cpp\n-------------------------------------------------------------------------\n\nBenchmark                                 Time        CPU     Iterations\n\n-------------------------------------------------------------------------\n\nsearch_in_sorted_vector/binary/1000      0.2 ns    19.9 ns     34461538\n\nsearch_in_sorted_vector/binary/10000     24.8 ns   24.9 ns     26352941\n\nsearch_in_sorted_vector/binary/100000    26.1 ns   26.1 ns     26352941\n\nsearch_in_sorted_vector/binary/1000000   29.6 ns   29.5 ns     24888889\n\nsearch_in_sorted_vector/binary/10000000  25.9 ns   25.7 ns     24888889\n\nsearch_in_sorted_vector/linear/1000      482 ns     474 ns      1120000\n\nsearch_in_sorted_vector/linear/10000     997 ns    1001 ns       640000\n\nsearch_in_sorted_vector/linear/100000    1005 ns   1001 ns       640000\n\nsearch_in_sorted_vector/linear/1000000   1013 ns   1004 ns       746667\n\nsearch_in_sorted_vector/linear/10000000  990 ns    1004 ns       746667\n```", "```cpp\nvoid search_in_sorted_vector(benchmark::State &state, auto finder) {\n\n  const auto needle = state.range(0);\n\n  const auto haystack = make_sorted_vector<int>(state.range(1));\n\n  for (auto _ : state) {\n\n    benchmark::DoNotOptimize(finder(haystack, needle));\n\n  }\n\n}\n```", "```cpp\nvoid generate_sizes(benchmark::internal::Benchmark *b) {\n\n  for (long haystack = MIN_HAYSTACK_SIZE; haystack <= MAX_HAYSTACK_SIZE;\n\n       haystack *= 100) {\n\n    for (auto needle :\n\n         {haystack / 8, haystack / 2, haystack - 1, haystack + 1}) {\n\n      b->Args({needle, haystack});\n\n    }\n\n  }\n\n}\n```", "```cpp\nBENCHMARK_CAPTURE(search_in_sorted_vector, binary, lower_bound)->Apply(generate_sizes);\n\nBENCHMARK_CAPTURE(search_in_sorted_vector, linear, find)->Apply(generate_sizes);\n```", "```cpp\n-------------------------------------------------------------------------\n\nBenchmark                                        Time     CPU  Iterations\n\n-------------------------------------------------------------------------\n\nsearch_in_sorted_vector/binary/125/1000       20.0 ns  20.1 ns   37333333\n\nsearch_in_sorted_vector/binary/500/1000       19.3 ns  19.0 ns   34461538\n\nsearch_in_sorted_vector/binary/999/1000       20.1 ns  19.9 ns   34461538\n\nsearch_in_sorted_vector/binary/1001/1000      18.1 ns  18.0 ns   40727273\n\nsearch_in_sorted_vector/binary/12500/100000   35.0 ns  34.5 ns   20363636\n\nsearch_in_sorted_vector/binary/50000/100000   28.9 ns  28.9 ns   24888889\n\nsearch_in_sorted_vector/binary/99999/100000   31.0 ns  31.1 ns   23578947\n\nsearch_in_sorted_vector/binary/100001/100000  29.1 ns  29.2 ns   23578947\n\n// et cetera\n```", "```cpp\nstruct Widget {\n\n    Foo foo;\n\n    Bar bar;\n\n    Baz baz;\n\n};\n\n\nauto widgets = std::vector<Widget>{};\n```", "```cpp\nstruct Widgets {\n\n    std::vector<Foo> foos;\n\n    std::vector<Bar> bars;\n\n    std::vector<Baz> bazs;\n\n};\n```", "```cpp\nstruct TwoSizesAndTwoChars {\n    std::size_t first_size;\n    char first_char;\n    std::size_t second_size;\n    char second_char;\n};\nstatic_assert(sizeof(TwoSizesAndTwoChars) == 32);\n```", "```cpp\nstruct TwoSizesAndTwoChars {\n    std::size_t first_size;\n    std::size_t second_size;\n    char first_char;\n    char second_char;\n};\nstatic_assert(sizeof(TwoSizesAndTwoChars) == 24);\n```", "```cpp\nstd::sort(std::execution::par, v.begin(), v.end());\n```", "```cpp\n$ mpirun --hostfile my_hostfile -np 4 my_command --with some ./args\n```", "```cpp\nstruct suspend_never {\n\n    constexpr bool await_ready() const noexcept { return true; }\n\n    constexpr void await_suspend(coroutine_handle<>) const noexcept {}\n\n    constexpr void await_resume() const noexcept {}\n\n};\n\n\nstruct suspend_always {\n\n    constexpr bool await_ready() const noexcept { return false; }\n\n    constexpr void await_suspend(coroutine_handle<>) const noexcept {}\n\n    constexpr void await_resume() const noexcept {}\n\n};\n```", "```cpp\nadd_executable(coroutines_1 coroutines/main_1.cpp)\n\ntarget_link_libraries(coroutines_1 PRIVATE cppcoro fmt::fmt Threads::Threads)\n\ntarget_compile_features(coroutines_1 PRIVATE cxx_std_20)\n```", "```cpp\ninline constexpr auto WORK_ITEMS = 5;\n\n\nint main() {\n\n  auto thread_pool = cppcoro::static_thread_pool{3};\n```", "```cpp\n  fmt::print(\"Thread {}: preparing work\\n\", std::this_thread::get_id());\n\n  auto work = do_routine_work(thread_pool);\n\n\n  fmt::print(\"Thread {}: starting work\\n\", std::this_thread::get_id());\n\n  const auto ints = cppcoro::sync_wait(work);\n```", "```cpp\n  fmt::print(\"Thread {}: work done. Produced ints are: \",\n\n             std::this_thread::get_id());\n\n  for (auto i : ints) {\n\n    fmt::print(\"{}, \", i);\n\n  }\n\n  fmt::print(\"\\n\");\n```", "```cpp\ncppcoro::task<std::vector<int>>\n\ndo_routine_work(cppcoro::static_thread_pool &thread_pool) {\n\n\n  auto mutex = cppcoro::async_mutex{};\n\n  auto ints = std::vector<int>{};\n\n  ints.reserve(WORK_ITEMS);\n```", "```cpp\n  fmt::print(\"Thread {}: passing execution to the pool\\n\",\n\n             std::this_thread::get_id());\n\n\n  co_await thread_pool.schedule();\n```", "```cpp\n  fmt::print(\"Thread {}: running first pooled job\\n\",\n\n             std::this_thread::get_id());\n\n\n  std::vector<cppcoro::task<>> tasks;\n\n  for (int i = 0; i < WORK_ITEMS; ++i) {\n\n    tasks.emplace_back(\n\n        cppcoro::schedule_on(thread_pool, fill_number(i, ints, mutex)));\n\n  }\n\n  co_await cppcoro::when_all_ready(std::move(tasks));\n  co_return ints;\n```", "```cpp\ncppcoro::task<> fill_number(int i, std::vector<int> &ints,\n\n                            cppcoro::async_mutex &mutex) {\n\n  fmt::print(\"Thread {}: producing {}\\n\", std::this_thread::get_id(), i);\n\n  std::this_thread::sleep_for(\n\n      std::chrono::milliseconds((WORK_ITEMS - i) * 200));\n```", "```cpp\n  {\n\n    auto lock = co_await mutex.scoped_lock_async();\n\n    ints.emplace_back(i);\n\n  }\n```", "```cpp\n  fmt::print(\"Thread {}: produced {}\\n\", std::this_thread::get_id(), i);\n\n  co_return;\n```", "```cpp\nThread 140471890347840: preparing work\n\nThread 140471890347840: starting work\n\nThread 140471890347840: passing execution to the pool\n\nThread 140471890282240: running first pooled job\n\nThread 140471890282240: producing 4\n\nThread 140471881828096: producing 1\n\nThread 140471873373952: producing 0\n\nThread 140471890282240: produced 4\n\nThread 140471890282240: producing 3\n\nThread 140471890282240: produced 3\n\nThread 140471890282240: producing 2\n\nThread 140471881828096: produced 1\n\nThread 140471873373952: produced 0\n\nThread 140471890282240: produced 2\n\nThread 140471890347840: work done. Produced ints are: 4, 3, 1, 0, 2, \n```"]