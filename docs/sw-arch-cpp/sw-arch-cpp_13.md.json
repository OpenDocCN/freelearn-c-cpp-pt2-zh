["```cpp\nTransactionStatus processTransaction(AccountName account, ServiceToken token,\n\nAmount amount)\n\n{\n\n  payment::login(account, token);\n\n  auto _ = gsl::finally([] { payment::logout(); });\n\n  payment::process(amount); // We assume this can lead to exception\n\n\n  return TransactionStatus::TransactionSuccessful;\n\n}\n```", "```cpp\nTransactionStatus chargeTheAccount(AccountNumber acountNumber, Amount amount)\n\n{\n\n  Amount accountBalance = getAcountBalance(accountNumber);\n\n  if (accountBalance > amount)\n\n  {\n\n    setAccountBalance(accountNumber, accountBalance - amount);\n\n    return TransactionStatus::TransactionSuccessful;\n\n  }\n\n  return TransactionStatus::InsufficientFunds;\n\n}\n```", "```cpp\nRegistrationResult registerUser(UnsafeUsername username, PasswordHash passwordHash)\n\n{\n\n  SafeUsername safeUsername = username.sanitize();\n\n  try\n\n  {\n\n    std::unique_ptr<User> user = std::make_unique<User>(safeUsername, passwordHash);\n\n    CommitResult result = user->commit();\n\n    if (result == CommitResult::CommitSuccessful)\n\n    {\n\n      return RegistrationResult::RegistrationSuccessful;\n\n    }\n\n    else\n\n    {\n\n      return RegistrationResult::RegistrationUnsuccessful;\n\n    }\n\n  }\n\n  catch (UserExistsException _)\n\n  {\n\n    return RegistrationResult::UserExists;\n\n  }\n\n}\n```", "```cpp\nadd_library(customer ${SOURCES_GO_HERE})\n\ntarget_include_directories(customer PUBLIC include)\n\ntarget_compile_options(customer PRIVATE -Werror -Wall -Wextra)\n```"]