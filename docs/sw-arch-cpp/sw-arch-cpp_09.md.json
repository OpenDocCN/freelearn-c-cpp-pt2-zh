["```cpp\nmkdir build-release-gcc\ncd build-release-gcc\ncmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ \n```", "```cpp\ntemplate<bool>\n struct conditional {\n     template<typename T, typename F>\n     using type = F;\n };\n\n template<>\n struct conditional<true> {\n     template<typename T, typename F>\n     using type = T;\n };\n\n template<bool B, typename T, typename F>\n using conditional_t = conditional<B>::template type<T, F>;\n```", "```cpp\ntemplate<bool B, class T, class F>\n struct conditional {\n     using type = T;\n };\n\n template<class T, class F>\n struct conditional<false, T, F> {\n     using type = F;\n };\n\n template<bool B, class T, class F>\n using conditional_t = conditional<B,T,F>::type;\n```", "```cpp\ncmake_minimum_required(VERSION 3.15...3.19)\n\nproject(\n   Customer\n   VERSION 0.0.1\n   LANGUAGES CXX)\n```", "```cpp\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\"\n```", "```cpp\nadd_executable(customer main.cpp)\n```", "```cpp\ntarget_compile_features(customer PRIVATE cxx_std_17)\n```", "```cpp\nset_target_properties(customer PROPERTIES\n     CXX_STANDARD 17\n     CXX_STANDARD_REQUIRED YES\n     CXX_EXTENSIONS NO\n )\n```", "```cpp\ntarget_compile_options(customer PRIVATE ${BASE_COMPILE_FLAGS})\n```", "```cpp\nadd_library(libcustomer lib.cpp)\nadd_library(domifair::libcustomer ALIAS libcustomer)\nset_target_properties(libcustomer PROPERTIES OUTPUT_NAME customer)\n# ...\ntarget_link_libraries(customer PRIVATE libcustomer)\n```", "```cpp\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin) \nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\n```", "```cpp\nif(CMAKE_BUILD_TYPE STREQUAL Release)\n   target_compile_definitions(libcustomer PRIVATE RUN_FAST)\nendif()\n```", "```cpp\ntarget_compile_definitions(libcustomer PRIVATE \"$<$<CONFIG:Release>:RUN_FAST>\")\n```", "```cpp\ntarget_include_directories(\n   libcustomer PUBLIC $<INSTALL_INTERFACE:include>\n                      $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)\n```", "```cpp\nlist(\n   APPEND\n   BASE_COMPILE_FLAGS\n   \"$<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:-Wall;-Wextra;-pedantic;-Werror>\"\n   \"$<$<CXX_COMPILER_ID:MSVC>:/W4;/WX>\")\n```", "```cpp\ninclude(FetchContent)\n\n FetchContent_Declare(\n   googletest\n   GIT_REPOSITORY https://github.com/google/googletest.git\n   GIT_TAG dcc92d0ab6c4ce022162a23566d44f673251eee4)\n\n FetchContent_GetProperties(googletest)\n if(NOT googletest_POPULATED)\n   FetchContent_Populate(googletest)\n   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}\n                    EXCLUDE_FROM_ALL)\n endif()\n\n message(STATUS \"GTest binaries are present at ${googletest_BINARY_DIR}\")\n\n```", "```cpp\nset(Boost_USE_STATIC_LIBS OFF)\nset(Boost_USE_MULTITHREADED ON)\nset(Boost_USE_STATIC_RUNTIME OFF)\n```", "```cpp\nfind_package(Boost 1.69 EXACT REQUIRED COMPONENTS Beast)\n```", "```cpp\ntarget_link_libraries(MyTarget PUBLIC Boost::Beast)\n```", "```cpp\n #.rst:\n # FindMyDep\n # ----------\n #\n # Find my favourite external dependency (MyDep).\n #\n # Imported targets\n # ^^^^^^^^^^^^^^^^\n #\n # This module defines the following :prop_tgt:`IMPORTED` target:\n #\n # ``MyDep::MyDep``\n #   The MyDep library, if found.\n #\n```", "```cpp\n # Result variables\n # ^^^^^^^^^^^^^^^^\n #\n # This module will set the following variables in your project:\n #\n # ``MyDep_FOUND``\n #   whether MyDep was found or not\n # ``MyDep_VERSION_STRING``\n #   the found version of MyDep\n```", "```cpp\nfind_package(Boost REQUIRED)\n```", "```cpp\nfind_package(PkgConfig)\npkg_check_modules(PC_MyDep QUIET MyDep)\n```", "```cpp\nfind_path(MyDep_INCLUDE_DIR\n   NAMES MyDep.h\n   PATHS \"${MyDep_ROOT_DIR}/include\" \"${PC_MyDep_INCLUDE_DIRS}\"\n   PATH_SUFFIXES MyDep\n )\n\n find_library(MyDep_LIBRARY\n   NAMES mydep\n   PATHS \"${MyDep_ROOT_DIR}/lib\" \"${PC_MyDep_LIBRARY_DIRS}\"\n )\n```", "```cpp\nset(MyDep_VERSION ${PC_MyDep_VERSION})\n```", "```cpp\ninclude(FindPackageHandleStandardArgs)\n\nfind_package_handle_standard_args(MyDep\n         FOUND_VAR MyDep_FOUND\n         REQUIRED_VARS\n         MyDep_LIBRARY\n         MyDep_INCLUDE_DIR\n         VERSION_VAR MyDep_VERSION\n         )\n```", "```cpp\nif(MyDep_FOUND AND NOT TARGET MyDep::MyDep)\n     add_library(MyDep::MyDep UNKNOWN IMPORTED)\n     set_target_properties(MyDep::MyDep PROPERTIES\n             IMPORTED_LOCATION \"${MyDep_LIBRARY}\"\n             INTERFACE_COMPILE_OPTIONS \"${PC_MyDep_CFLAGS_OTHER}\"\n             INTERFACE_INCLUDE_DIRECTORIES \"${MyDep_INCLUDE_DIR}\"\n             INTERFACE_LINK_LIBRARIES Boost::boost\n             )\nendif()\n```", "```cpp\nmark_as_advanced(\n MyDep_INCLUDE_DIR\n MyDep_LIBRARY\n )\n```", "```cpp\nfind_package(MyDep REQUIRED)\ntarget_link_libraries(MyTarget PRIVATE MyDep::MyDep)\n```", "```cpp\n conan profile new hosacpp\n conan profile update settings.compiler=gcc hosacpp\n conan profile update settings.compiler.libcxx=libstdc++11 hosacpp\n conan profile update settings.compiler.version=10 hosacpp\n conan profile update settings.arch=x86_64 hosacpp\n conan profile update settings.os=Linux hosacpp\n```", "```cpp\n [requires]\n cpprestsdk/2.10.18\n\n [generators]\n CMakeDeps\n```", "```cpp\n [options]\n cpprestsdk:shared=False\n```", "```cpp\nconan install path/to/directory/containing/conanfile.txt --build=missing -s build_type=Release -pr=hosacpp\n```", "```cpp\ncmake path/to/directory/containing/CMakeLists.txt -DCMAKE_BUILD_TYPE=Release\n```", "```cpp\nlist(APPEND CMAKE_PREFIX_PATH \"${CMAKE_BINARY_DIR}\")\nfind_package(cpprestsdk CONFIG REQUIRED)\n```", "```cpp\n target_link_libraries(libcustomer PUBLIC cpprestsdk::cpprest)\n```", "```cpp\n if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)\n   include(CTest)\n   if(BUILD_TESTING)\n     add_subdirectory(test)\n   endif()\n endif()\n```", "```cpp\n include(FetchGTest)\n include(GoogleTest)\n\n add_subdirectory(customer)\n```", "```cpp\n add_executable(unittests unit.cpp)\n target_compile_options(unittests PRIVATE ${BASE_COMPILE_FLAGS})\n target_link_libraries(unittests PRIVATE domifair::libcustomer gtest_main)\n gtest_discover_tests(unittests)\n```", "```cpp\n cmake --build . --target unittests\n ctest # or cmake --build . --target test\n```", "```cpp\ninclude(GNUInstallDirs)\n```", "```cpp\ninstall(\n   TARGETS libcustomer customer\n   EXPORT CustomerTargets\n   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n```", "```cpp\n install(TARGETS libcustomer customer\n         CONFIGURATIONS Debug\n         # destinations for other components go here...\n         RUNTIME DESTINATION Debug/bin)\n install(TARGETS libcustomer customer\n         CONFIGURATIONS Release\n         # destinations for other components go here...\n         RUNTIME DESTINATION Release/bin)\n```", "```cpp\n install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/\n         DESTINATION include)\n```", "```cpp\n install(\n     EXPORT CustomerTargets\n     FILE CustomerTargets.cmake\n     NAMESPACE domifair::\n     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Customer)\n```", "```cpp\n  configure_file(${PROJECT_SOURCE_DIR}/cmake/CustomerConfig.cmake.in\n                  CustomerConfig.cmake @ONLY)\n```", "```cpp\n include(CMakeFindDependencyMacro)\n\n find_dependency(cpprestsdk 2.10.18 REQUIRED)\n```", "```cpp\nconan install cpprestsdk/2.10.18\n```", "```cpp\nif(NOT TARGET domifair::@PROJECT_NAME@)\n   include(\"${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake\")\nendif()\n```", "```cpp\n include(CMakePackageConfigHelpers)\n write_basic_package_version_file(\n   CustomerConfigVersion.cmake\n   VERSION ${PACKAGE_VERSION}\n   COMPATIBILITY AnyNewerVersion)\n```", "```cpp\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/CustomerConfig.cmake\n               ${CMAKE_CURRENT_BINARY_DIR}/CustomerConfigVersion.cmake\n         DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Customer)\n```", "```cpp\ninstall(\n   FILES ${PROJECT_SOURCE_DIR}/LICENSE\n   DESTINATION ${CMAKE_INSTALL_DOCDIR})\n```", "```cpp\nexport(\n   TARGETS libcustomer customer\n   NAMESPACE domifair::\n   FILE CustomerTargets.cmake)\n\nset(CMAKE_EXPORT_PACKAGE_REGISTRY ON)\nexport(PACKAGE domifair)\n```", "```cpp\n find_package(cpprestsdk 2.10.18)\n find_package(domifair)\n```", "```cpp\n set(CPACK_PACKAGE_VENDOR \"Authors\")\n set(CPACK_PACKAGE_CONTACT \"author@example.com\")\n set(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n     \"Library and app for the Customer microservice\")\n```", "```cpp\n if(UNIX)\n   find_program(DPKG_PROGRAM dpkg)\n   if(DPKG_PROGRAM)\n     list(APPEND CPACK_GENERATOR DEB)\n     set(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS} libcpprest2.10 (>= 2.10.2-6)\")\n     set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n   else()\n     message(STATUS \"dpkg not found - won't be able to create DEB packages\")\n   endif()\n```", "```cpp\n find_program(RPMBUILD_PROGRAM rpmbuild)\n   if(RPMBUILD_PROGRAM)\n     list(APPEND CPACK_GENERATOR RPM)\n     set(CPACK_RPM_PACKAGE_REQUIRES \"${CPACK_RPM_PACKAGE_REQUIRES} cpprest >= 2.10.2-6\")\n   else()\n     message(STATUS \"rpmbuild not found - won't be able to create RPM packages\")\n   endif()\n endif()\n```", "```cpp\nconfigure_file(${PROJECT_SOURCE_DIR}/conan/conanfile.py.in\n                ${CMAKE_CURRENT_BINARY_DIR}/conan/conanfile.py @ONLY)\n```", "```cpp\n import os\n from conans import ConanFile, CMake\n```", "```cpp\nclass CustomerConan(ConanFile):\n     name = \"customer\"\n     version = \"@PROJECT_VERSION@\"\n     license = \"MIT\"\n     author = \"Authors\"\n     description = \"Library and app for the Customer microservice\"\n     topics = (\"Customer\", \"domifair\")\n```", "```cpp\n     homepage = \"https://example.com\"\n     url = \"https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-Cpp/\"\n```", "```cpp\n     settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n     options = {\"shared\": [True, False], \"fPIC\": [True, False]}\n     default_options = {\"shared\": False, \"fPIC\": True}\n     generators = \"CMakeDeps\"\n     keep_imports = True  # useful for repackaging, e.g. of licenses\n```", "```cpp\n    def package_info(self):\n         self.cpp_info.libs = [\"customer\"]\n```", "```cpp\n    def requirements(self):\n         self.requires.add('cpprestsdk/2.10.18')\n```", "```cpp\n    def _configure_cmake(self):\n         cmake = CMake(self)\n         cmake.configure(source_folder=\"@CMAKE_SOURCE_DIR@\")\n         return cmake\n```", "```cpp\n    def build(self):\n         cmake = self._configure_cmake()\n         cmake.build()\n```", "```cpp\n    def package(self):\n         cmake = self._configure_cmake()\n         cmake.install()\n         self.copy(\"license*\", ignore_case=True, keep_path=True)\n```", "```cpp\n    def imports(self):\n         self.copy(\"license*\", dst=\"licenses\", folder=True, ignore_case=True)\n\n         # Use the following for the cmake_multi generator on Windows and/or Mac OS to copy libs to the right directory.\n         # Invoke Conan like so:\n         #   conan install . -e CONAN_IMPORT_PATH=Release -g cmake_multi\n         dest = os.getenv(\"CONAN_IMPORT_PATH\", \"bin\")\n         self.copy(\"*.dll\", dst=dest, src=\"img/bin\")\n         self.copy(\"*.dylib*\", dst=dest, src=\"img/lib\")\n```", "```cpp\nimport os\n\nfrom conans import ConanFile, CMake, tools\n\n```", "```cpp\nclass CustomerTestConan(ConanFile):\n     settings = \"os\", \"compiler\", \"build_type\", \"arch\"\n     generators = \"CMakeDeps\"\n```", "```cpp\n    def build(self):\n        cmake = CMake(self)\n        # Current dir is \"test_package/build/<build_id>\" and \n        # CMakeLists.txt is in \"test_package\"\n        cmake.configure()\n        cmake.build()\n```", "```cpp\n    def imports(self):\n        self.copy(\"*.dll\", dst=\"bin\", src=\"img/bin\")\n        self.copy(\"*.dylib*\", dst=\"bin\", src=\"img/lib\")\n        self.copy('*.so*', dst='bin', src='lib')\n```", "```cpp\n    def test(self):\n         if not tools.cross_building(self.settings):\n             self.run(\".%sexample\" % os.sep)\n```", "```cpp\n cmake_minimum_required(VERSION 3.12)\n project(PackageTest CXX)\n\n list(APPEND CMAKE_PREFIX_PATH \"${CMAKE_BINARY_DIR}\")\n\n find_package(customer CONFIG REQUIRED)\n\n add_executable(example example.cpp)\n target_link_libraries(example customer::customer)\n\n # CTest tests can be added here\n```", "```cpp\n #include <customer/customer.h>\n\n int main() { responder{}.prepare_response(\"Conan\"); }\n```", "```cpp\nif(NOT CONAN_EXPORTED)\n   install(\n     EXPORT CustomerTargets\n     FILE CustomerTargets.cmake\n     NAMESPACE domifair::\n     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Customer)\n\n   configure_file(${PROJECT_SOURCE_DIR}/cmake/CustomerConfig.cmake.in\n                  CustomerConfig.cmake @ONLY)\n\n   include(CMakePackageConfigHelpers)\n   write_basic_package_version_file(\n     CustomerConfigVersion.cmake\n     VERSION ${PACKAGE_VERSION}\n     COMPATIBILITY AnyNewerVersion)\n\n   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CustomerConfig.cmake\n                 ${CMAKE_CURRENT_BINARY_DIR}/CustomerConfigVersion.cmake\n           DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Customer)\n endif()\n\n install(\n   FILES ${PROJECT_SOURCE_DIR}/LICENSE\n   DESTINATION $<IF:$<BOOL:${CONAN_EXPORTED}>,licenses,${CMAKE_INSTALL_DOCDIR}>)\n```", "```cpp\nadd_custom_target(\n   conan\n   COMMAND\n     ${CMAKE_COMMAND} -E copy_directory ${PROJECT_SOURCE_DIR}/conan/test_package/\n     ${CMAKE_CURRENT_BINARY_DIR}/conan/test_package\n   COMMAND conan create . customer/testing -s build_type=$<CONFIG>\n   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/conan\n   VERBATIM)\n```"]