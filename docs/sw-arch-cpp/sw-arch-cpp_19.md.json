["```cpp\napiVersion: v1\n\nkind: Pod\n\nmetadata:\n\n  name: simple-server\n\n  labels:\n\n    app: dominican-front\n\nspec:\n\n  containers:\n\n    - name: webserver\n\n      image: nginx\n\n      ports:\n\n        - name: http\n\n          containerPort: 80\n\n          protocol: TCP\n```", "```cpp\n#include <jaegertracing/Tracer.h>\n\n\nvoid setUpTracer()\n\n{\n\n    // We want to read the sampling server configuration from the \n    // environment variables\n\n    auto config = jaegertracing::Config;\n    config.fromEnv();\n\n    // Jaeger provides us with ConsoleLogger and NullLogger\n\n    auto tracer = jaegertracing::Tracer::make(\n\n        \"customer\", config, jaegertracing::logging::consoleLogger());\n\n    opentracing::Tracer::InitGlobal(\n\n        std::static_pointer_cast<opentracing::Tracer>(tracer));\n\n}\n```", "```cpp\nauto responder::respond(const http_request &request, status_code status,\n\n                        const json::value &response) -> void {\n\n  auto span = opentracing::Tracer::Global()->StartSpan(\"respond\");\n\n  // ...\n\n}\n```", "```cpp\nauto responder::prepare_response(const std::string &name, const std::unique_ptr<opentracing::Span>& parentSpan)\n\n    -> std::pair<status_code, json::value> {\n\n  auto span = opentracing::Tracer::Global()->StartSpan(\n\n        \"prepare_response\", { opentracing::ChildOf(&parentSpan->context()) });\n\n  return {status_codes::OK,\n\n          json::value::string(string_t(\"Hello, \") + name + \"!\")};\n\n}\n\n\nauto responder::respond(const http_request &request, status_code status)\n\n    -> void {\n\n  auto span = opentracing::Tracer::Global()->StartSpan(\"respond\");\n\n  // ...\n\n  auto response = this->prepare_response(\"Dominic\", span);\n\n  // ...\n\n}\n```"]