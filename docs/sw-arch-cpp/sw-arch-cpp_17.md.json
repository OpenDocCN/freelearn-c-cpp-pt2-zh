["```cpp\n#include <cstdlib>\n#include <iostream>\n\n#include <redis-cpp/execute.h>\n#include <redis-cpp/stream.h>\n\nint main() {\n  try {\n    auto stream = rediscpp::make_stream(\"localhost\", \"6379\");\n\n    auto const key = \"my_key\";\n\n    auto response = rediscpp::execute(*stream, \"set\", key,\n                                      \"Some value for 'my_key'\", \"ex\", \n                                      \"60\");\n\n    std::cout << \"Set key '\" << key << \"': \" \n              << response.as<std::string>()\n              << std::endl;\n\n    response = rediscpp::execute(*stream, \"get\", key);\n    std::cout << \"Get key '\" << key << \"': \" \n              << response.as<std::string>()\n              << std::endl;\n  } catch (std::exception const &e) {\n    std::cerr << \"Error: \" << e.what() << std::endl;\n    return EXIT_FAILURE;\n  }\n  return EXIT_SUCCESS;\n}\n```", "```cpp\nservice Greeter {\n rpc Greet(GreetRequest) returns (GreetResponse);\n}\n\nmessage GreetRequest {\n string name = 1;\n}\n\nmessage GreetResponse {\n string reply = 1;\n}\n```", "```cpp\nclass Greeter : public Greeter::Service {\n  Status sendRequest(ServerContext *context, const GreetRequest \n*request,\n                     GreetReply *reply) override {\n    auto name = request->name();\n    if (name.empty()) return Status::INVALID_ARGUMENT;\n    reply->set_result(\"Hello \" + name);\n    return Status::OK;\n  }\n};\n```", "```cpp\nint main() {\n  Greeter service;\n  ServerBuilder builder;\n  builder.AddListeningPort(\"localhost\", grpc::InsecureServerCredentials());\n  builder.RegisterService(&service);\n\n  auto server(builder.BuildAndStart());\n  server->Wait();\n}\n```", "```cpp\n  #include <grpcpp/grpcpp.h>\n\n  #include <string>\n\n  #include \"grpc/service.grpc.pb.h\"\n\n  using grpc::ClientContext;\n  using grpc::Status;\n\n  int main() {\n    std::string address(\"localhost:50000\");\n    auto channel =\n        grpc::CreateChannel(address, grpc::InsecureChannelCredentials());\n    auto stub = Greeter::NewStub(channel);\n\n    GreetRequest request;\n    request.set_name(\"World\");\n\n    GreetResponse reply;\n    ClientContext context;\n    Status status = stub->Greet(&context, request, &reply);\n\n    if (status.ok()) {\n      std::cout << reply.reply() << '\\n';\n    } else {\n      std::cerr << \"Error: \" << status.error_code() << '\\n';\n    }\n  }\n```", "```cpp\nautoscaling_policy {\n    max_replicas = 5\n    min_replicas = 3\n\n    cooldown_period = 60\n\n    cpu_utilization {\n      target = 0.8\n    }\n}\n```"]