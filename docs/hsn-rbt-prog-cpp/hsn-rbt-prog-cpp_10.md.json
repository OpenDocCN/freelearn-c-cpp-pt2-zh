["```cpp\nMat img = imread(\"abcd.jpg\"); //abcd.jpg is the image name\n```", "```cpp\nMat img = imread(\"/home/pi/abcd.jpg\"); //abcd image is in \n                                      // the Pi folder\n\n```", "```cpp\nimshow(\"Apple Image\", img);\n```", "```cpp\nresize(img, rzimg, cvSize(400,400));  //new width is 400 \n                                     //and height is 400\n```", "```cpp\nflip(img, flipimage, 1)\n```", "```cpp\ncvtColor(img, grayimage, COLOR_BGR2GRAY)\n```", "```cpp\nthreshold(src, thresimg, threshold value, max threshold value, threshold type);\n```", "```cpp\nthreshold(src, thresimg,85, 255, 0);\n```", "```cpp\ninRange(img, Scalar(min B,min G,min R), Scalar(max B,max G,max R),thresImage)\n```", "```cpp\ncircle(img, point, radius, Scalar(B,G,R),thickness);\n```", "```cpp\n#include <iostream>\n#include<opencv2/opencv.hpp>\n#include<opencv2/core/core.hpp>\n#include<opencv2/highgui/highgui.hpp>\n#include<opencv2/imgproc/imgproc.hpp>\n\nusing namespace cv;\nusing namespace std;\n\nint main()\n{\n\n Mat img, resizeimg,thresimage;\n img = imread(\"greenball.png\");\n imshow(\"Green Ball Image\", img);\n waitKey(0);\n\n resize(img, resizeimg, cvSize(640, 480));\n imshow(\"Resized Image\", resizeimg);\n waitKey(0);\n\n inRange(resizeimg, Scalar(39, 140, 34), Scalar(122, 245, 119), thresimage);\n imshow(\"Thresholded Image\", thresimage);\n waitKey(0);\n\n Moments m = moments(thresimage,true);\n int x,y;\n x = m.m10/m.m00;\n y = m.m01/m.m00;\n Point p(x,y);\n circle(img, p, 5, Scalar(0,0,200), -1);\n imshow(\"Image with center\",img);\n waitKey(0);\n\n return 0;\n}\n```", "```cpp\nint main()\n{\n Mat videoframe;\n\nVideoCapture vid(0);\n\nif (!vid.isOpened())\n {\ncout<<\"Error opening camera\"<<endl;\n return -1;\n }\n for(;;)\n {\n vid.read(videoframe);\n imshow(\"Frame\", videoframe);\n if (waitKey(1) > 0) break;\n }\n return 0;\n}\n```", "```cpp\nint main()\n{\n  Mat videofeed,resizevideo,thresholdvideo;\n  VideoCapture vid(0);\n  if (!vid.isOpened())\n  {\n    return -1;\n  } \n  for (;;)\n  { \n    vid.read(videofeed);\n  resize(videofeed, resizevideo, cvSize(640, 480));\n  flip(resizevideo, resizevideo, 1);\n\n  inRange(resizevideo, Scalar(39, 140, 34), Scalar(122, 245, 119), thresholdvideo); \n\n  Moments m = moments(thresholdvideo,true);\n  int x,y;\n  x = m.m10/m.m00;\n  y = m.m01/m.m00; \n  Point p(x,y);\n\n  circle(resizevideo, p, 10, Scalar(0,0,128), -1);\n\n  imshow(\"Image with center\",resizevideo);\n    imshow(\"Thresolding Video\",thresholdvideo);\n\n  cout<<Mat(p)<< endl;\n\n  if (waitKey(33) >= 0) break;\n  }\n  return 0;\n}\n```", "```cpp\nint main()\n { \n...\n float distance = (totalTime * 0.034)/2;\n\n if(distance < 15)\n {\n cout<<\"Object close to Robot\"<< \" \" << Mat(p)<< \" \" <<distance << \" cm\" << endl;\n stop();\n }\n\n else{ \n      if(x<20 && y< 20)\n      {\n      cout<<\"Object not found\"<< \" \" << Mat(p)<< \" \" <<distance << \" cm\" << endl;\n      stop();\n      }\n      if(x > 20 && x < 170 && y > 20 )\n      {\n      cout<<\"LEFT TURN\"<< \" \" << Mat(p)<< \" \" <<distance << \" cm\" << endl;\n      left();\n      }\n      if(x > 170 && x < 470)\n      {\n      cout<<\"FORWARD\"<< \" \" << Mat(p)<< \" \" <<distance << \" cm\" << endl;\n      forward();\n      }\n      if(x > 470 && x < 640)\n      {\n      cout<<\"RIGHT TURN\"<< \" \" << Mat(p)<< \" \" <<distance << \" cm\" << endl;\n      right();\n      }\n\n      }\n      if (waitKey(33) >= 0) break;\n      }\n       return 0;\n}\n```"]