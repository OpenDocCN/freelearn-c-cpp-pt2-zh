["```cpp\n#include <stdio.h>\n#include <iostream>\n#include <wiringPi.h>\n\nusing namespace std;\n\n#define trigger 12\n#define echo 13\n\nlong startTime;\nlong stopTime;\n\nint main()\n{\n\n wiringPiSetup();\n\n pinMode(trigger,OUTPUT);\n pinMode(echo, INPUT); \n\nfor(;;){\n digitalWrite(trigger,LOW);\n delay(500);\n\n digitalWrite(trigger,HIGH);\n delayMicroseconds(10);\n\n digitalWrite(trigger,LOW); \n\n while(digitalRead(echo) == LOW);\n startTime = micros();\n\n while(digitalRead(echo) == HIGH);\n stopTime = micros(); \n\nlong totalTime= stopTime - startTime; \n float distance = (totalTime * 0.034)/2;\n\n cout << \"Distance is: \" << distance << \" cm\"<<endl;\n delay(2000);\n}\nreturn 0;\n}\n```", "```cpp\n#include <wiringPi.h> \n#include <lcd.h> \n\n#define RS 22 //Register Select\n#define E 26 //Enable\n\n#define D4 24 //Data pin 4\n#define D5 25 //Data pin 5\n#define D6 27 //Data pin 6\n#define D7 28 //Data pin 7\n\nint main()\n{\n\nint fd; \nwiringPiSetup(); \nfd= lcdInit (2, 16, 4, RS, E, D4, D5, D6, D7, 0, 0, 0, 0); \nlcdPuts(fd, \"LCD OUTPUT\"); \n\n}\n```", "```cpp\nfd= lcdInit (2, 16, 4, RS, E, D4, D5, D6, D7, 0, 0, 0, 0);\nlcdPosition(fd, 0, 0); \nlcdPuts(fd, \"LCD OUTPUT\");\n```", "```cpp\nint main()\n{\n...\nfor(;;)\n{\n...\ncout << \"Distance is: \" << distance << \" cm\"<<endl;\nlcdPosition(fd, 0, 0);           //position the cursor on column 0, row 0\nlcdPuts(fd, \"Distance: \");      //this code will print Distance text\nlcdPosition(fd, 0, 1);          //position the cursor on column 0, row 1\nlcdPrintf(fd, distance);        // print the distance value\nlcdPuts(fd, \" cm\");\ndelay(2000);\nclear();                     \n}\nreturn 0\n}\n```", "```cpp\nsudo raspi-config\n```", "```cpp\n#include <wiringPiI2C.h>\n#include <wiringPi.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n#define I2C_DEVICE_ADDRESS 0x27 \n#define firstrow 0x80 // 1st line\n#define secondrow 0xC0 // 2nd line\nint lcdaddr;\n```", "```cpp\nint main() {\n\n wiringPiSetup();\n\n lcdaddr = wiringPiI2CSetup(I2C_DEVICE_ADDRESS);\n\n init_lcd(); // initializing OR setting up the LCD \n for(;;) {\n\n moveCursor(firstrow);\n printmessage(\"LCD OUTPUT\");\n moveCursor(secondrow);\n printmessage(\"USING I2C\");\n delay(2000);\n clear();\n\n moveCursor(firstrow);\n printmessage(\"Integer: \");\n int iNumber = 314;\n printInt(iNumber);\n\n moveCursor(secondrow);\n printmessage(\"Float: \");\n float fNumber= 3.14;\n printFloat(fNumber);\n delay(2000);\n clear();\n }\n return 0;\n}\n```", "```cpp\n moveCursor(firstrow);\n printmessage(\"DISTANCE\");\n moveCursor(secondrow);\n printFloat(distance);\n printmessage(\" cm\");\n delay(2000);\n clear();\n```", "```cpp\nint main()\n{\n...\nfor(;;)\n{\n...\nif(distance < 7)\n{\ndigitalWrite(0,LOW);\ndigitalWrite(2,HIGH);\ndigitalWrite(3,HIGH);\ndigitalWrite(4,LOW);\ndelay(500);\nmoveCursor(firstrow);\nprintmessage(\"Obstacle Status\");\nmoveCursor(secondrow);\nprintmessage(\"Obstacle detected\");\nclear();\n}\nelse\n{\ndigitalWrite(0,HIGH);\ndigitalWrite(2,LOW);\ndigitalWrite(3,HIGH);\ndigitalWrite(4,LOW);\nmoveCursor(firstrow);\nprintmessage(\"Obstacle Status\");\nmoveCursor(secondrow);\nprintmessage(\"No Obstacle\");\nclear();\n}\n}\nreturn 0;\n}\n```"]