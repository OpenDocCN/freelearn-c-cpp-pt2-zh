["```cpp\nsudo apt-get install libbluetooth-dev \n```", "```cpp\nsudo nano /lib/systemd/system/bluetooth.service\n```", "```cpp\nsudo reboot\n```", "```cpp\nsudo service bluetooth status\n```", "```cpp\nsudo bluetoothctl\n```", "```cpp\npower on     //turns on the Bluetooth\n\npairable on  //Bluetooth is ready to pair with other Bluetooth \n discoverable on  //Bluetooth is now in discoverable mode\n\nagent on      //Bluetooth agent is the one which \n //manages Bluetooth pairing \n //code. It can respond to incoming pairing \n              //code and it can also \n //send out pairing code default-agent\n```", "```cpp\nsudo nano bt_serial\n```", "```cpp\nhciconfig hci0 piscan\nsdptool add SP\n```", "```cpp\nsocket(int domain, int type, int protocol)\n```", "```cpp\nconnect(int sock, const struct sockaddr *server_address, socklen_t info)\n```", "```cpp\nbind(int sock, const struct sockaddr *address, socklen_t info);\n```", "```cpp\nlisten(int sock, int backlog);\n```", "```cpp\nint new_socket = accept(int sock, struct sock_address *clientaddress, socklen_t info);\n```", "```cpp\n#include <stdio.h>\n#include <unistd.h>\n#include <sys/socket.h>               //Socket header file\n#include <bluetooth/bluetooth.h>      //Bluetooth header file\n#include <bluetooth/rfcomm.h>         //Radio frequency communication header file\n#include <wiringPi.h>\n```", "```cpp\n pinMode(0,OUTPUT);\n pinMode(2,OUTPUT);\n pinMode(3,OUTPUT);\n pinMode(4,OUTPUT);\n```", "```cpp\nstruct sockaddr_rc server_address = { 0 }, client_address = { 0 };\nchar data[1024] = { 0 };\nint s, clientsocket, bytes;\nsocklen_t opt = sizeof(client_address);\n```", "```cpp\ns = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);\n```", "```cpp\nbind(s, (struct sockaddr *)&server_address, sizeof(server_address));\nlisten(s, 1);\n```", "```cpp\nclientsocket = accept(s, (struct sockaddr *)&client_address, &opt);\n```", "```cpp\n ba2str( &client_address.rc_bdaddr, data );\n fprintf(stderr, \"Connected to %s\\n\", data);\n```", "```cpp\n for(;;){\n bytes = read(clientsocket, data, sizeof(data));\n if( bytes > 0 ) {\n printf(\"Alphabet: %s\\n\", data);\n```", "```cpp\n if(*data=='F')\n {\n----Forward Code----\n }\n else if(*data=='B')\n {\n----Backward Code----\n }\n else if(*data=='L')\n {\n----Axial Left Turn Code----\n }\n else if(*data=='R')\n {\n----Axial Right Turn Code----\n }\n else if(*data=='S')\n {\n----Stop Code----\n }\n```", "```cpp\n close(clientsocket);\n close(s);\n```", "```cpp\nsudo chmod +x bt_serial            //Execution code\nsudo ./bt_serial                   //Run Code\n```"]