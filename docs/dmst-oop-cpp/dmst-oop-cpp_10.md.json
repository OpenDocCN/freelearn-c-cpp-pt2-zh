["```cpp\nclass LifeForm\u00a0\u00a0\u00a0\u00a0// Abstract class definition\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0int lifeExpectancy; // all LifeForms have a lifeExpectancy\npublic:\n\u00a0\u00a0\u00a0\u00a0LifeForm() { lifeExpectancy = 0; }\n\u00a0\u00a0\u00a0\u00a0LifeForm(int life) { lifeExpectancy = life; }\n\u00a0\u00a0\u00a0\u00a0LifeForm(const LifeForm &form) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ lifeExpectancy = form.lifeExpectancy; }\n\u00a0\u00a0\u00a0\u00a0virtual ~LifeForm() { }\u00a0\u00a0\u00a0// virtual destructor\n\u00a0\u00a0\u00a0\u00a0int GetLifeExpectancy() const { return lifeExpectancy; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const = 0; // pure virtual functions \n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() = 0;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() = 0;\n};\n```", "```cpp\nclass Charitable\u00a0\u00a0\u00a0\u00a0// interface class definition\n{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// implemented using an abstract class\npublic:\n\u00a0\u00a0\u00a0\u00a0virtual void Give(float) = 0; // interface for 'giving'\n\u00a0\u00a0\u00a0\u00a0virtual ~Charitable() { } // remember virtual destructor\n};\nclass Person: public Charitable\u00a0\u00a0\u00a0// mix-in an 'interface'\n{\n\u00a0\u00a0\u00a0\u00a0// Assume typical Person class definition w/ data members,\n\u00a0\u00a0\u00a0\u00a0// constructors, member functions exist.\npublic:\n\u00a0\u00a0\u00a0\u00a0virtual void Give(float amt) override\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0// implement a means for giving here \n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0virtual ~Person();\u00a0\u00a0// prototype\n};\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nclass Student: public Person \n{\u00a0\u00a0\u00a0// Student Is-A Person which mixes-in Charitable interface\n\u00a0\u00a0\u00a0\u00a0// Assume typical Student class definition w/ data\n\u00a0\u00a0\u00a0\u00a0// members, constructors, member functions exist.\npublic:\n\u00a0\u00a0\u00a0\u00a0virtual void Give(float amt) override\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0// Should a Student have little money to give,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// perhaps they can donate their time equivalent to\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// the desired monetary amount they'd like to give\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0virtual ~Student();\u00a0\u00a0// prototype\n};\n```", "```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\nconst int MAX = 5;\nclass LifeForm\u00a0\u00a0\u00a0// abstract class definition\n{\nprivate:\n\u00a0\u00a0\u00a0int lifeExpectancy;\npublic:\n\u00a0\u00a0\u00a0LifeForm() { lifeExpectancy = 0; }\n\u00a0\u00a0\u00a0LifeForm(int life) { lifeExpectancy = life; }\n\u00a0\u00a0\u00a0LifeForm(const LifeForm &form) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ lifeExpectancy = form.lifeExpectancy; }\n\u00a0\u00a0\u00a0virtual ~LifeForm() { }\u00a0\u00a0\u00a0\u00a0\u00a0// virtual destructor\n\u00a0\u00a0\u00a0int GetLifeExpectancy() const { return lifeExpectancy; }\n\u00a0\u00a0\u00a0virtual void Print() const = 0;\u00a0\u00a0\u00a0// pure virtual functions \n\u00a0\u00a0\u00a0virtual const char *IsA() = 0;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0virtual const char *Speak() = 0;\n};\n```", "```cpp\nclass Cat: public LifeForm\n{\nprivate:\n\u00a0\u00a0\u00a0int numberLivesLeft;\n\u00a0\u00a0\u00a0char *name;\npublic:\n\u00a0\u00a0\u00a0Cat() : LifeForm(15) { numberLivesLeft = 9; name = 0; }\n\u00a0\u00a0\u00a0Cat(int lives) : LifeForm(15) { numberLivesLeft = lives; }\n\u00a0\u00a0\u00a0Cat(const char *n);\n\u00a0\u00a0\u00a0virtual ~Cat() { delete name; }\u00a0\u00a0\u00a0// virtual destructor\n\u00a0\u00a0\u00a0const char *GetName() const { return name; }\n\u00a0\u00a0\u00a0int GetNumberLivesLeft() const { return numberLivesLeft; }\n\u00a0\u00a0\u00a0virtual void Print() const override; // redef pure virt fns\n\u00a0\u00a0\u00a0virtual const char *IsA() override { return \"Cat\"; }\n\u00a0\u00a0\u00a0virtual const char *Speak() override { return \"Meow!\"; }\n};\nCat::Cat(const char *n) : LifeForm(15)\n{\n\u00a0\u00a0\u00a0name = new char [strlen(n) + 1];\n\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0numberLivesLeft = 9;\n}\nvoid Cat::Print() const\n{\n\u00a0\u00a0\u00a0cout << \"\\t\" << name << \" has \" << GetNumberLivesLeft();\n\u00a0\u00a0\u00a0cout << \" lives left\" << endl;\n}\n```", "```cpp\nclass Person: public LifeForm\n{\nprivate: \n\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0char *title;\u00a0\u00a0// Mr., Ms., Mrs., Miss, Dr., etc.\nprotected:\n\u00a0\u00a0\u00a0void ModifyTitle(const char *);\u00a0\u00a0\npublic:\n\u00a0\u00a0\u00a0Person();\u00a0\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0Person(const char *, const char *, char, const char *);\u00a0\u00a0\n\u00a0\u00a0\u00a0Person(const Person &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0virtual ~Person();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0const char *GetTitle() const { return title; } \n\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n\u00a0\u00a0\u00a0virtual void Print() const override; // redef pure virt fns\n\u00a0\u00a0\u00a0virtual const char *IsA() override;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0virtual const char *Speak() override;\n};\n```", "```cpp\nPerson::Person(): LifeForm(80)\n{\n\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0title = 0;\n}\nPerson::Person(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t): LifeForm(80)\n{\n\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0middleInitial = mi;\n\u00a0\u00a0\u00a0title = new char [strlen(t) + 1];\n\u00a0\u00a0\u00a0strcpy(title, t);\n}\nPerson::Person(const Person &pers): LifeForm(pers)\n{\n\u00a0\u00a0\u00a0firstName = new char [strlen(pers.firstName) + 1];\n\u00a0\u00a0\u00a0strcpy(firstName, pers.firstName);\n\u00a0\u00a0\u00a0lastName = new char [strlen(pers.lastName) + 1];\n\u00a0\u00a0\u00a0strcpy(lastName, pers.lastName);\n\u00a0\u00a0\u00a0middleInitial = pers.middleInitial;\n\u00a0\u00a0\u00a0title = new char [strlen(pers.title) + 1];\n\u00a0\u00a0\u00a0strcpy(title, pers.title);\n}\nPerson::~Person()\n{\n\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0delete title;\n}\nvoid Person::ModifyTitle(const char *newTitle)\n{\n\u00a0\u00a0\u00a0delete title;\u00a0\u00a0// delete old title\n\u00a0\u00a0\u00a0title = new char [strlen(newTitle) + 1];\n\u00a0\u00a0\u00a0strcpy(title, newTitle);\n}\nvoid Person::Print() const\n{\n\u00a0\u00a0\u00a0cout << \"\\t\" << title << \" \" << firstName << \" \";\n\u00a0\u00a0\u00a0cout << middleInitial << \". \" << lastName << endl;\n}\nconst char *Person::IsA() {\u00a0\u00a0return \"Person\";\u00a0\u00a0}\nconst char *Person::Speak() {\u00a0\u00a0return \"Hello!\";\u00a0\u00a0}\u00a0\u00a0\u00a0\n```", "```cpp\nclass Student: public Person\n{\nprivate: \n\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0const char *studentId;\u00a0\u00a0\npublic:\n\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *, const char *); \n\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0virtual ~Student();\u00a0\u00a0// virtual destructor\n\u00a0\u00a0\u00a0void EarnPhD();\u00a0\u00a0\n\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0const char *GetCurrentCourse() const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0const char *GetStudentId() const { return studentId; }\n\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\n\u00a0\u00a0\u00a0virtual void Print() const override; // redefine not all \n\u00a0\u00a0\u00a0virtual const char *IsA() override;\u00a0\u00a0// virtual functions\n};\ninline void Student::SetCurrentCourse(const char *c)\n{\n\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\u00a0// delete existing course\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, c); \n}\n```", "```cpp\nStudent::Student(): studentId (0)\u00a0\u00a0// default constructor\n{\n\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0currentCourse = 0;\n}\n// Alternate constructor member function definition\nStudent::Student(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t, float avg, const char *course,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *id): Person(fn, ln, mi, t)\n{\n\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0char *temp = new char [strlen(id) + 1];\n\u00a0\u00a0\u00a0strcpy (temp, id); \n\u00a0\u00a0\u00a0studentId = temp;\n}\n// Copy constructor definition\nStudent::Student(const Student &ps): Person(ps)\n{\n\u00a0\u00a0\u00a0gpa = ps.gpa;\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(ps.currentCourse) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, ps.currentCourse);\n\u00a0\u00a0\u00a0char *temp = new char [strlen(ps.studentId) + 1];\n\u00a0\u00a0\u00a0strcpy (temp, ps.studentId); \n\u00a0\u00a0\u00a0studentId = temp;\n}\n\n// destructor definition\nStudent::~Student()\n{\n\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0delete (char *) studentId;\n}\nvoid Student::EarnPhD()\u00a0\u00a0{\u00a0\u00a0\u00a0ModifyTitle(\"Dr.\");\u00a0\u00a0}\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0cout << \"\\t\" << GetTitle() << \" \" << GetFirstName() << \" \";\n\u00a0\u00a0\u00a0cout << GetMiddleInitial() << \". \" << GetLastName();\n\u00a0\u00a0\u00a0cout << \" with id: \" << studentId << \" has a gpa of: \";\n\u00a0\u00a0\u00a0cout << setprecision(2) <<\u00a0\u00a0\" \" << gpa << \" enrolled in: \";\n\u00a0\u00a0\u00a0cout << currentCourse << endl;\n}\nconst char *Student::IsA() {\u00a0\u00a0return \"Student\";\u00a0\u00a0}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0// Notice that we are creating an array of POINTERS to\n\u00a0\u00a0\u00a0// LifeForms. Since LifeForm cannot be instantiated, \n\u00a0\u00a0\u00a0// we could not create an array of LifeForm (s).\n\u00a0\u00a0\u00a0LifeForm *entity[MAX];\n\u00a0\u00a0\u00a0entity[0] = new Person(\"Joy\", \"Lin\", 'M', \"Ms.\");\n\u00a0\u00a0\u00a0entity[1] = new Student(\"Renee\", \"Alexander\", 'Z', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.95, \"C++\", \"21-MIT\"); \n\u00a0\u00a0\u00a0entity[2] = new Student(\"Gabby\", \"Doone\", 'A', \"Ms.\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.95, \"C++\", \"18-GWU\"); \n\u00a0\u00a0\u00a0entity[3] = new Cat(\"Katje\"); \n\u00a0\u00a0\u00a0entity[4] = new Person(\"Giselle\", \"LeBrun\", 'R', \"Miss\");\n\u00a0\u00a0\u00a0for (int i = 0; i < MAX; i++)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << entity[i]->Speak();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" I am a \" << entity[i]->IsA() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity[i]->Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Has a life expectancy of: \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << entity[i]->GetLifeExpectancy();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\n\";\n\u00a0\u00a0\u00a0} \n\u00a0\u00a0\u00a0for (int i = 0; i < MAX; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0delete entity[i];\n\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nHello! I am a Person\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ms. Joy M. Lin\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Has a life expectancy of: 80\nHello! I am a Student\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Dr. Renee Z. Alexander with id: 21-MIT has a gpa of:\u00a0\u00a04 enrolled in: C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Has a life expectancy of: 80\nHello! I am a Student\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ms. Gabby A. Doone with id: 18-GWU has a gpa of: 4 enrolled in: C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Has a life expectancy of: 80\nMeow! I am a Cat\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Katje has 9 lives left\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Has a life expectancy of: 15\nHello! I am a Person\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Miss Giselle R. LeBrun\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Has a life expectancy of: 80\n```"]