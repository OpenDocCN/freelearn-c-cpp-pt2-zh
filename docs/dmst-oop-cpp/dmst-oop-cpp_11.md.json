["```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nclass Person\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0char *title;\u00a0\u00a0// Mr., Ms., Mrs., Miss, Dr., etc.\n\u00a0\u00a0\u00a0\u00a0Person(const Person &);\u00a0\u00a0// prohibit copies \nprotected:\n\u00a0\u00a0\u00a0\u00a0void ModifyTitle(const char *);\u00a0\u00a0\npublic:\n\u00a0\u00a0\u00a0\u00a0Person();\u00a0\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Person(const char *, const char *, char, const char *);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual ~Person();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetTitle() const { return title; } \n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n};\n```", "```cpp\nPerson::Person()\n{\n\u00a0\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0\u00a0title = 0;\n}\nPerson::Person(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0middleInitial = mi;\n\u00a0\u00a0\u00a0\u00a0title = new char [strlen(t) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(title, t);\n}\nPerson::~Person()\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete title;\n}\nvoid Person::ModifyTitle(const char *newTitle)\n{\n\u00a0\u00a0\u00a0\u00a0delete title;\u00a0\u00a0// delete old title\n\u00a0\u00a0\u00a0\u00a0title = new char [strlen(newTitle) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(title, newTitle);\n}\n```", "```cpp\nclass BillableEntity\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0float invoiceAmt;\n\u00a0\u00a0\u00a0\u00a0BillableEntity(const BillableEntity &); // prohibit copies\npublic:\n\u00a0\u00a0\u00a0\u00a0BillableEntity() { invoiceAmt = 0.0; }\n\u00a0\u00a0\u00a0\u00a0BillableEntity(float amt) { invoiceAmt = amt; } \n\u00a0\u00a0\u00a0\u00a0virtual ~BillableEntity() { }\n\u00a0\u00a0\u00a0\u00a0void Pay(float amt) { invoiceAmt -= amt; }\n\u00a0\u00a0\u00a0\u00a0float GetBalance() const { return invoiceAmt; }\n\u00a0\u00a0\u00a0\u00a0void Balance();\n};\nvoid BillableEntity::Balance()\n{\n\u00a0\u00a0\u00a0\u00a0if (invoiceAmt)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Owed amount: $ \" << invoiceAmt << endl;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Credit: $ \" << 0.0 - invoiceAmt << endl;\n}\n```", "```cpp\nclass Student: public Person, public BillableEntity\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0const char *studentId;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// prohibit copies \npublic:\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *, const char *, float); \n\u00a0\u00a0\u00a0\u00a0virtual ~Student(); \n\u00a0\u00a0\u00a0\u00a0void Print() const;\n\u00a0\u00a0\u00a0\u00a0void EarnPhD();\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() const\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0const char *GetStudentId() const { return studentId; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\n};\ninline void Student::SetCurrentCourse(const char *c)\n{\n\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\u00a0// delete existing course\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, c); \n}\n```", "```cpp\nStudent::Student(): studentId (0) // call default base\u00a0\u00a0\n{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// class constructors\n\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0currentCourse = 0;\n}\n// The member initialization list specifies which versions\n// of each base class constructor should be utilized.\nStudent::Student(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t, float avg, const char *course, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *id, float amt):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person(fn, ln, mi, t), BillableEntity(amt)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n{\n\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0char *temp = new char [strlen(id) + 1];\n\u00a0\u00a0\u00a0strcpy (temp, id); \n\u00a0\u00a0\u00a0studentId = temp;\n}\nStudent::~Student()\n{\n\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0delete (char *) studentId;\n}\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << GetTitle() << \" \" << GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0cout << GetMiddleInitial() << \". \" << GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" with id: \" << studentId << \" has a gpa of: \";\n\u00a0\u00a0\u00a0\u00a0cout << \" \" << gpa << \" and course: \" << currentCourse;\n\u00a0\u00a0\u00a0\u00a0cout << \" with balance: $\" << GetBalance() << endl;\n}\nvoid Student::EarnPhD() \n{\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0ModifyTitle(\"Dr.\"); \n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0float tuition1 = 1000.00, tuition2 = 2000.00;\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Gabby\", \"Doone\", 'A', \"Ms.\", 3.9, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"178GWU\", tuition1); \n\u00a0\u00a0\u00a0\u00a0Student s2(\"Zack\", \"Moon\", 'R', \"Dr.\", 3.9, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"272MIT\", tuition2); \n\u00a0\u00a0\u00a0\u00a0// public members of Person, BillableEntity, Student are\n\u00a0\u00a0\u00a0\u00a0// accessible from any scope, including main()\n\u00a0\u00a0\u00a0\u00a0s1.Print();\n\u00a0\u00a0\u00a0\u00a0s2.Print();\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" paid $500.00\" << endl;\n\u00a0\u00a0\u00a0\u00a0s1.Pay(500.00);\n\u00a0\u00a0\u00a0\u00a0cout << s2.GetFirstName() << \" paid $750.00\" << endl;\n\u00a0\u00a0\u00a0\u00a0s2.Pay(750.00);\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \": \";\n\u00a0\u00a0\u00a0\u00a0s1.Balance();\n\u00a0\u00a0\u00a0\u00a0cout << s2.GetFirstName() << \": \";\n\u00a0\u00a0\u00a0\u00a0s2.Balance();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMs. Gabby A. Doone with id: 178GWU has a gpa of:\u00a0\u00a03.9 and course: C++ with balance: $1000\nDr. Zack R. Moon with id: 272MIT has a gpa of:\u00a0\u00a03.9 and course: C++ with balance: $2000\nGabby paid $500.00\nZack paid $750.00\nGabby: Owed amount: $ 500\nZack: Owed amount: $ 1250\n```", "```cpp\nclass Lifeform\n{\u00a0\u00a0\u00a0// abbreviated class definition\nprivate:\n\u00a0\u00a0\u00a0\u00a0int lifeExpectancy;\npublic:\n\u00a0\u00a0\u00a0\u00a0LifeForm(int life) {lifeExpectancy = life; }\n\u00a0\u00a0\u00a0\u00a0int GetLifeExpectancy() const { return lifeExpectancy; }\n\u00a0\u00a0\u00a0\u00a0// additional constructors, destructor, etc \u2026\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const = 0; // pure virtual functions\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() = 0;\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() = 0;\n};\nclass Horse: public LifeForm\n{\u00a0\u00a0\u00a0// abbreviated class definition\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *name;\npublic:\n\u00a0\u00a0\u00a0\u00a0Horse(): LifeForm(35) { name = 0; }\n\u00a0\u00a0\u00a0\u00a0// additional constructors, destructor, etc \u2026\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ cout << name << endl; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override { return \"Horse\"; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override { return \"Neigh!\"; }\n};\nclass Person: public LifeForm\n{\u00a0\u00a0\u00a0// abbreviated class definition\nprivate: \n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0// additional data members \u2026\npublic:\n\u00a0\u00a0\u00a0\u00a0Person(): LifeForm(80) { firstName = lastName = 0; }\n\u00a0\u00a0\u00a0\u00a0// additional constructors, destructor, etc \u2026\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ cout << firstName << \" \" << lastName << endl; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override { return \"Person\"; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override { return \"Hello!\"; }\n};\n```", "```cpp\nclass Centaur: public Person, public Horse\n{\u00a0\u00a0\u00a0// abbreviated class definition\npublic:\n\u00a0\u00a0\u00a0\u00a0// constructors, destructor, etc \u2026\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ cout << GetFirstName() << endl; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override { return \"Centaur\"; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return \"Neigh! and Hello!\"; }\n};\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Centaur beast(\"Wild\", \"Man\");\n\u00a0\u00a0\u00a0\u00a0cout << beast.Speak() << \" I'm a \" << beast.IsA() << endl;\n\u00a0\u00a0\u00a0\u00a0// Ambiguous method call \u2013 which LifeForm sub-object?\n\u00a0\u00a0\u00a0\u00a0// cout << beast.GetLifeExpectancy();\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0cout << \"It is unclear how many years I will live: \";\n\u00a0\u00a0\u00a0\u00a0cout << beast.Person::GetLifeExpectancy() << \" or \";\n\u00a0\u00a0\u00a0\u00a0cout << beast.Horse::GetLifeExpectancy() << endl; \n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nNeigh! and Hello! I'm a Centaur.\nIt is unclear how many years I will live: 80 or 35.\n```", "```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nclass LifeForm\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0int lifeExpectancy;\npublic:\n\u00a0\u00a0\u00a0\u00a0LifeForm() { lifeExpectancy = 0; }\n\u00a0\u00a0\u00a0\u00a0LifeForm(int life) { lifeExpectancy = life; }\n\u00a0\u00a0\u00a0\u00a0LifeForm(const LifeForm &form) \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ lifeExpectancy = form.lifeExpectancy; }\n\u00a0\u00a0\u00a0\u00a0virtual ~LifeForm() { }\n\u00a0\u00a0\u00a0\u00a0int GetLifeExpectancy() const { return lifeExpectancy; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const = 0; \n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() = 0;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() = 0;\n};\n```", "```cpp\nclass Horse: public virtual LifeForm\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *name;\npublic:\n\u00a0\u00a0\u00a0\u00a0Horse() : LifeForm(35) { name = 0; }\n\u00a0\u00a0\u00a0\u00a0Horse(const char *n);\n\u00a0\u00a0\u00a0\u00a0Horse(const Horse &); \n\u00a0\u00a0\u00a0\u00a0virtual ~Horse() { delete name; }\n\u00a0\u00a0\u00a0\u00a0const char *GetName() const { return name; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ cout << name << endl; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override { return \"Horse\"; }\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override { return \"Neigh!\"; }\n};\nHorse::Horse(const char *n): LifeForm(35)\n{\n\u00a0\u00a0\u00a0name = new char [strlen(n) + 1];\n\u00a0\u00a0\u00a0strcpy(name, n);\n}\nHorse::Horse(const Horse &h): LifeForm (h)\n{\n\u00a0\u00a0\u00a0name = new char [strlen(h.name) + 1];\n\u00a0\u00a0\u00a0strcpy(name, h.name); \n}\n```", "```cpp\nclass Person: public virtual LifeForm\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0char *title;\u00a0\u00a0// Mr., Ms., Mrs., Miss, Dr., etc.\nprotected:\n\u00a0\u00a0\u00a0\u00a0void ModifyTitle(const char *);\u00a0\u00a0\npublic:\n\u00a0\u00a0\u00a0\u00a0Person();\u00a0\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Person(const char *, const char *, char, const char *);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Person(const Person &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0virtual ~Person();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetTitle() const { return title; } \n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override;\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override;\n};\n```", "```cpp\nPerson::Person(): LifeForm(80)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0\u00a0title = 0;\n}\nPerson::Person(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t): LifeForm(80)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0middleInitial = mi;\n\u00a0\u00a0\u00a0\u00a0title = new char [strlen(t) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(title, t);\n}\nPerson::Person(const Person &pers): LifeForm(pers)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(pers.firstName) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, pers.firstName);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(pers.lastName) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, pers.lastName);\n\u00a0\u00a0\u00a0\u00a0middleInitial = pers.middleInitial;\n\u00a0\u00a0\u00a0\u00a0title = new char [strlen(pers.title) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(title, pers.title);\n}\nPerson::~Person()\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete title;\n}\nvoid Person::ModifyTitle(const char *newTitle)\n{\n\u00a0\u00a0\u00a0\u00a0delete title;\u00a0\u00a0// delete old title\n\u00a0\u00a0\u00a0\u00a0title = new char [strlen(newTitle) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(title, newTitle);\n}\nvoid Person::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << title << \" \" << firstName << \" \";\n\u00a0\u00a0\u00a0\u00a0cout << middleInitial << \". \" << lastName << endl;\n}\nconst char *Person::IsA() {\u00a0\u00a0return \"Person\"; }\nconst char *Person::Speak() {\u00a0\u00a0return \"Hello!\"; }\n```", "```cpp\nclass Centaur: public Person, public Horse\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0// no additional data members required \npublic:\n\u00a0\u00a0\u00a0\u00a0Centaur(): LifeForm(1000) { }\n\u00a0\u00a0\u00a0\u00a0Centaur(const char *, const char *, char = ' ', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char * = \"Mythological Creature\"); \n\u00a0\u00a0\u00a0\u00a0Centaur(const Centaur &c): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person(c), Horse(c),LifeForm(1000) { }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override;\n\u00a0\u00a0\u00a0\u00a0virtual const char *IsA() override;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual const char *Speak() override;\n};\n// Constructors for Centaur need to specify how the shared\n// base class LifeForm will be initialized\nCentaur::Centaur(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *title): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person(fn, ln, mi, title), Horse(fn), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LifeForm(1000)\n{\n\u00a0\u00a0\u00a0// All initialization has been taken care of in init. list\n}\nvoid Centaur::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << \"My name is \" << GetFirstName();\n\u00a0\u00a0\u00a0\u00a0cout << \".\u00a0\u00a0I am a \" << GetTitle() << endl;\n}\nconst char *Centaur::IsA() { return \"Centaur\"; }\nconst char *Centaur::Speak() \n{\n\u00a0\u00a0\u00a0\u00a0return \"Neigh! and Hello! I'm a master of two languages.\";\n} \n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0Centaur beast(\"Wild\", \"Man\");\n\u00a0\u00a0\u00a0cout << beast.Speak() << endl;\n\u00a0\u00a0\u00a0cout << \" I'm a \" << beast.IsA() << \". \";\n\u00a0\u00a0\u00a0beast.Print();\n\u00a0\u00a0\u00a0cout << \"I will live: \";\n\u00a0\u00a0\u00a0cout << beast.GetLifeExpectancy();\u00a0\u00a0// no longer ambiguous!\n\u00a0\u00a0\u00a0cout << \" years\" << endl; \n\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nNeigh!!! and Hello! I'm a master of two languages.\nI am a Centaur. My name is Wild. I am a Mythological Creature.\nI will live: 1000 years.\n```"]