["```cpp\n#include <list>\u00a0\u00a0\u00a0// partial list of #includes\n#include <iterator>\nusing namespace std;\nconst int MAXCOURSES = 5, MAXSTUDENTS = 5;\nclass Subject;\u00a0\u00a0// forward declarations\nclass Student;\nclass Observer\u00a0\u00a0// Observer is an abstract class\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0int observerState;\nprotected:\n\u00a0\u00a0\u00a0\u00a0Observer() { observerState = 0; }\n\u00a0\u00a0\u00a0\u00a0Observer(int s) { observerState = s; }\n\u00a0\u00a0\u00a0\u00a0void SetState(int s) { observerState = s; }\npublic:\n\u00a0\u00a0\u00a0\u00a0int GetState() const { return observerState; }\n\u00a0\u00a0\u00a0\u00a0virtual ~Observer() {}\n\u00a0\u00a0\u00a0\u00a0virtual void Update() = 0;\n};\n```", "```cpp\nclass Subject\u00a0\u00a0\u00a0// Treated as an abstract class, due to\n{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// protected constructors. However, there's no \nprivate:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// pure virtual function\n\u00a0\u00a0\u00a0\u00a0list<class Observer *> observers;\n\u00a0\u00a0\u00a0\u00a0int numObservers;\n\u00a0\u00a0\u00a0\u00a0int subjectState;\n\u00a0\u00a0\u00a0\u00a0list<Observer *>::iterator newIter;\nprotected:\n\u00a0\u00a0\u00a0\u00a0Subject() { subjectState = 0; numObservers = 0; }\n\u00a0\u00a0\u00a0\u00a0Subject(int s) { subjectState = s; numObservers = 0; }\n\u00a0\u00a0\u00a0\u00a0void SetState(int s) { subjectState = s; }\npublic:\n\u00a0\u00a0\u00a0\u00a0int GetState() const { return subjectState; }\n\u00a0\u00a0\u00a0\u00a0int GetNumObservers() const { return numObservers; }\n\u00a0\u00a0\u00a0\u00a0virtual ~Subject() {}\n\u00a0\u00a0\u00a0\u00a0virtual void Register(Observer *);\n\u00a0\u00a0\u00a0\u00a0virtual void Release(Observer *);\n\u00a0\u00a0\u00a0\u00a0virtual void Notify();\n};\n```", "```cpp\nvoid Subject::Register(Observer *ob)\n{\n\u00a0\u00a0\u00a0\u00a0observers.push_back(ob);\u00a0\u00a0\u00a0// Add an Observer to the list\n\u00a0\u00a0\u00a0\u00a0numObservers++;\n}\nvoid Subject::Release(Observer *ob) // Remove an Observer \n{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// from the list\n\u00a0\u00a0\u00a0\u00a0bool found;\n\u00a0\u00a0\u00a0\u00a0// loop until we find the desired Observer\n\u00a0\u00a0\u00a0\u00a0for (list<Observer *>::iterator iter = observers.begin();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iter != observers.end() && !found; iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Observer *temp = *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (temp == ob)\u00a0\u00a0// if we found observer which we seek\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// erase() element, iterator is now corrupt; Save\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// returned (good) iterator, we'll need it later\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newIter = observers.erase(iter);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0found = true;\u00a0\u00a0// exit loop after found\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numObservers--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\nvoid Subject::Notify()\n{\u00a0\u00a0\u00a0// Notify all Observers\n\u00a0\u00a0\u00a0\u00a0for (list<Observer *>::iterator iter = observers.begin(); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iter != observers.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Observer *temp = *iter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp->Update(); // AddCourse, then Release Observer\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// State 1 means we added course, got off waitlist \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// (waitlist had a Release), so update the iterator\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (temp->GetState() == 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iter = newIter;\u00a0\u00a0// update the iterator since\n\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// erase() invalidated this one\n\u00a0\u00a0\u00a0\u00a0if (observers.size() != 0)\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0// Update last item on waitlist\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Observer *last = *newIter; \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0last->Update();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass Course: public Subject\u00a0\u00a0\n{ // inherits Observer list; represents Students on wait-list\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *title;\n\u00a0\u00a0\u00a0\u00a0int number, totalStudents; // course num; total students\n\u00a0\u00a0\u00a0\u00a0Student *students[MAXSTUDENTS];\u00a0\u00a0// students cur. enrolled\npublic:\n\u00a0\u00a0\u00a0\u00a0Course(const char *title, int num): number(num)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this->title = new char[strlen(title) + 1];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0strcpy(this->title, title);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalStudents = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAXSTUDENTS; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0students[i] = 0; \n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0virtual ~Course() { delete title; } // There's more work!\n\u00a0\u00a0\u00a0\u00a0int GetCourseNum() const { return number; }\n\u00a0\u00a0\u00a0\u00a0const char *GetTitle() const { return title; }\n\u00a0\u00a0\u00a0\u00a0void Open() { SetState(1); Notify(); } \n\u00a0\u00a0\u00a0\u00a0void PrintStudents();\n};\nbool Course::AddStudent(Student *s)\n{\u00a0\u00a0// Should also check Student isn't already added to Course.\n\u00a0\u00a0\u00a0\u00a0if (totalStudents < MAXSTUDENTS)\u00a0\u00a0// course not full\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0students[totalStudents++] = s;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else return false;\n}\nvoid Course::PrintStudents()\n{\n\u00a0\u00a0\u00a0\u00a0cout << \"Course: (\" << GetTitle() << \") has the following\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0students: \" << endl;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAXSTUDENTS && students[i] != 0; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\t\" << students[i]->GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << students[i]->GetLastName() << endl;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass Person { };\u00a0\u00a0// Assume this is our typical Person class\nclass Student: public Person, public Observer\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0const char *studentId;\n\u00a0\u00a0\u00a0\u00a0int currentNumCourses;\n\u00a0\u00a0\u00a0\u00a0Course *courses[MAXCOURSES]; // currently enrolled courses\n\u00a0\u00a0\u00a0\u00a0// Course we'd like to take - we're on the waitlist. \n\u00a0\u00a0\u00a0\u00a0Course *waitList;// This is our Subject (specialized form)\npublic:\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *, Course *);\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *);\n\u00a0\u00a0\u00a0\u00a0Student(const Student &) = delete;\u00a0\u00a0// Copies disallowed\n\u00a0\u00a0\u00a0\u00a0virtual ~Student();\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0void EarnPhD();\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetStudentId() const { return studentId; }\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override;\n\u00a0\u00a0\u00a0\u00a0virtual void IsA() override;\n\u00a0\u00a0\u00a0\u00a0virtual void Update() override;\n\u00a0\u00a0\u00a0\u00a0virtual void Graduate();\u00a0\u00a0\u00a0// newly introduced virtual fn.\n\u00a0\u00a0\u00a0\u00a0bool AddCourse(Course *);\n\u00a0\u00a0\u00a0\u00a0void PrintCourses();\n};\n```", "```cpp\n// Assume most Student member functions are as we are\n// accustomed to seeing. Let's look at those which may differ:\nStudent::Student(const char *fn, const char *ln, char mi,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t, float avg, const char *id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Course *c) : Person(fn, ln, mi, t), Observer()\n{\n\u00a0\u00a0\u00a0\u00a0// Most data members are set as usual - see online code \n\u00a0\u00a0\u00a0\u00a0waitList = c;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Set waitlist to Course (Subject)\n\u00a0\u00a0\u00a0\u00a0c->Register(this); // Add the Student (Observer) to \n}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// the Subject's list of Observers\nbool Student::AddCourse(Course *c)\n{ \n\u00a0\u00a0\u00a0\u00a0// Should also check that Student isn't already in Course\n\u00a0\u00a0\u00a0\u00a0if (currentNumCourses < MAXCOURSES)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0courses[currentNumCourses++] = c;\u00a0\u00a0// set association\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c->AddStudent(this);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// set back-link\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return true;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0// if we can't add the course,\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0// add Student (Observer) to the Course's Waitlist, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c->Register(this);\u00a0\u00a0// stored in Subject base class\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitList = c;// set Student (Observer) link to Subject\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return false;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nvoid Student::Update()\n{\u00a0\u00a0\u00a0// Course state changed to 'Open' so we can now add it.\n\u00a0\u00a0\u00a0\u00a0if (waitList->GetState() == 1)\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (AddCourse(waitList))\u00a0\u00a0// if success in Adding \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << GetFirstName() << \" \" << GetLastName();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" removed from waitlist and added to \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << waitList->GetTitle() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SetState(1); // set Obser's state to \"Add Success\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Remove Student from Course's waitlist\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitList->Release(this); // Remove Obs from Subj\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0waitList = 0;\u00a0\u00a0// Set our link to Subject to Null\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\nvoid Student::PrintCourses()\n{\n\u00a0\u00a0\u00a0\u00a0cout << \"Student: (\" << GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0cout << GetLastName() << \") enrolled in: \" << endl;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAXCOURSES && courses[i] != 0; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\t\" << courses[i]->GetTitle() << endl;\n}\n```", "```cpp\nint main()\n{\u00a0\u00a0\u00a0// Instantiate several courses\n\u00a0\u00a0\u00a0\u00a0Course *c1 = new Course(\"C++\", 230);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Course *c2 = new Course(\"Advanced C++\", 430);\n\u00a0\u00a0\u00a0\u00a0Course *c3 = new Course(\"Design Patterns in C++\", 550);\n\u00a0\u00a0\u00a0\u00a0// Instantiate Students, select a course to be on the \n\u00a0\u00a0\u00a0\u00a0// waitlist for -- to be added when registration starts\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Anne\", \"Chu\", 'M', \"Ms.\", 3.9, \"555CU\", c1);\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Joley\", \"Putt\", 'I', \"Ms.\", 3.1, \"585UD\", c1);\n\u00a0\u00a0\u00a0\u00a0Student s3(\"Geoff\", \"Curt\", 'K', \"Mr.\", 3.1, \"667UD\", c1);\n\u00a0\u00a0\u00a0\u00a0Student s4(\"Ling\", \"Mau\", 'I', \"Ms.\", 3.1, \"55UD\", c1);\n\u00a0\u00a0\u00a0\u00a0Student s5(\"Jiang\", \"Wu\", 'Q', \"Dr.\", 3.8, \"883TU\", c1);\n\u00a0\u00a0\u00a0\u00a0cout << \"Registration is Open. Waitlist Students to be\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0added to Courses\" << endl;\n\u00a0\u00a0\u00a0\u00a0// Sends a message to Students that Course is Open. \n\u00a0\u00a0\u00a0\u00a0c1->Open();\u00a0\u00a0\u00a0// Students on wait-list will automatically\n\u00a0\u00a0\u00a0\u00a0c2->Open();\u00a0\u00a0\u00a0// be Added (as room allows)\n\u00a0\u00a0\u00a0\u00a0c3->Open();\n\u00a0\u00a0\u00a0\u00a0// Now that registration is open, add more courses \n\u00a0\u00a0\u00a0\u00a0cout << \"During open registration, Students now adding\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0additional courses\" << endl;\n\u00a0\u00a0\u00a0\u00a0s1.AddCourse(c2);\u00a0\u00a0// Try to add more courses\n\u00a0\u00a0\u00a0\u00a0s2.AddCourse(c2);\u00a0\u00a0// If full, we'll be added to wait-list\n\u00a0\u00a0\u00a0\u00a0s4.AddCourse(c2);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0s5.AddCourse(c2);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0s1.AddCourse(c3);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0s3.AddCourse(c3);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0s5.AddCourse(c3);\n\u00a0\u00a0\u00a0\u00a0cout << \"Registration complete\\n\" << endl;\n\u00a0\u00a0\u00a0\u00a0c1->PrintStudents();\u00a0\u00a0\u00a0// print each Course's roster\n\u00a0\u00a0\u00a0\u00a0c2->PrintStudents();\n\u00a0\u00a0\u00a0\u00a0c3->PrintStudents();\n\u00a0\u00a0\u00a0\u00a0s1.PrintCourses();\u00a0\u00a0\u00a0\u00a0\u00a0// print each Student's course list\n\u00a0\u00a0\u00a0\u00a0s2.PrintCourses();\n\u00a0\u00a0\u00a0\u00a0s3.PrintCourses();\n\u00a0\u00a0\u00a0\u00a0s4.PrintCourses();\n\u00a0\u00a0\u00a0\u00a0s5.PrintCourses();\n\u00a0\u00a0\u00a0\u00a0delete c1;\n\u00a0\u00a0\u00a0\u00a0delete c2;\n\u00a0\u00a0\u00a0\u00a0delete c3;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nRegistration is Open. Waitlist Students to be added to Courses\nAnne Chu removed from waitlist and added to C++\nGoeff Curt removed from waitlist and added to C++\nJiang Wu removed from waitlist and added to C++\nJoley Putt removed from waitlist and added to C++\nLing Mau removed from waitlist and added to C++\nDuring open registration, Students now adding more courses\nRegistration complete\nCourse: (C++) has the following students:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Anne Chu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Goeff Curt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Jiang Wu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Joley Putt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ling Mau\nCourse: (Advanced C++) has the following students:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Anne Chu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Joley Putt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ling Mau\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Jiang Wu\nCourse: (Design Patterns in C++) has the following students:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Anne Chu\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Goeff Curt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Jiang Wu\nStudent: (Anne Chu) enrolled in:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Advanced C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Design Patterns in C++\nStudent: (Joley Putt) enrolled in:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Advanced C++\nStudent: (Goeff Curt) enrolled in:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Design Patterns in C++\nStudent: (Ling Mau) enrolled in:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Advanced C++\nStudent: (Jiang Wu) enrolled in:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Advanced C++\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Design Patterns in C++\n```"]