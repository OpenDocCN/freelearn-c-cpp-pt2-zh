["```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nstruct student\n{\n\u00a0\u00a0\u00a0\u00a0char name[20];\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0void Initialize(const char *, float);\u00a0\u00a0// fn. prototype\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\nclass University\n{\npublic:\n\u00a0\u00a0\u00a0\u00a0char name[30];\n\u00a0\u00a0\u00a0\u00a0int numStudents;\n\u00a0\u00a0\u00a0\u00a0void Initialize(const char *, int);\u00a0\u00a0\u00a0// fn. prototype\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\n```", "```cpp\nvoid student::Initialize(const char *n, float avg)\n{ \n\u00a0\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0\u00a0gpa = avg;\n}\nvoid student::Print()\n{ \n\u00a0\u00a0\u00a0\u00a0cout << name << \" GPA: \" << gpa << endl;\n}\nvoid University::Initialize(const char *n, int num)\n{ \n\u00a0\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0\u00a0numStudents = num;\n} \nvoid University::Print()\n{ \n\u00a0\u00a0\u00a0\u00a0cout << name << \" Enrollment: \" << numStudents << endl;\n}\n```", "```cpp\nint main()\n{ \n\u00a0\u00a0\u00a0\u00a0student s1;\u00a0\u00a0// instantiate a student (struct instance)\n\u00a0\u00a0\u00a0\u00a0s1.Initialize(\"Gabby Doone\", 4.0);\n\u00a0\u00a0\u00a0\u00a0s1.Print();\n\u00a0\u00a0\u00a0\u00a0University u1;\u00a0\u00a0// instantiate a University (class)\n\u00a0\u00a0\u00a0\u00a0u1.Initialize(\"GWU\", 25600);\n\u00a0\u00a0\u00a0\u00a0u1.Print();\n\u00a0\u00a0\u00a0\u00a0University *u2;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// pointer declaration\n\u00a0\u00a0\u00a0\u00a0u2 = new University();\u00a0\u00a0// instantiation with new()\n\u00a0\u00a0\u00a0\u00a0u2->Initialize(\"UMD\", 40500);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0u2->Print();\u00a0\u00a0// or alternatively: (*u2).Print();\n\u00a0\u00a0\u00a0\u00a0delete u2;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nGabby Doone GPA: 4.4\nGWU Enrollment: 25600\nUMD Enrollment: 40500\n```", "```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nclass Student\n{\npublic:\u00a0\u00a0// for now, let's put everything public access region\n\u00a0\u00a0\u00a0\u00a0char *firstName;\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0void Initialize(const char *, const char *, char, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *);\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\n```", "```cpp\n// Member function definition\nvoid Student::Initialize(const char *fn, const char *ln, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char mi, float gpa, const char *course)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0this->middleInitial = mi;\u00a0\u00a0// optional use of 'this'\n\u00a0\u00a0\u00a0\u00a0this->gpa = gpa;\u00a0\u00a0// required, explicit use of 'this'\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n}\n// It is as if Student::Initialize() is written as:\n// void \n// Student_Initialize_constchar*_constchar*_float_constchar*\n//\u00a0\u00a0\u00a0\u00a0\u00a0(Student *const this, const char *fn, const char *ln,\n//\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char mi, float avg, char *course) \n// {\n//\u00a0\u00a0\u00a0\u00a0this->firstName = new char [strlen(fn) + 1];\n//\u00a0\u00a0\u00a0\u00a0strcpy(this->firstName, fn);\n//\u00a0\u00a0\u00a0\u00a0this->lastName = new char [strlen(ln) + 1];\n//\u00a0\u00a0\u00a0\u00a0strcpy(this->lastName, ln);\n//\u00a0\u00a0\u00a0\u00a0this->middleInitial = mi;\n//\u00a0\u00a0\u00a0\u00a0this->gpa = avg;\n//\u00a0\u00a0\u00a0\u00a0this->currentCourse = new char [strlen(course) + 1];\n//\u00a0\u00a0\u00a0\u00a0strcpy(this->currentCourse, course);\n// }\n// Member function definition\nvoid Student::Print()\n{\n\u00a0\u00a0\u00a0cout << firstName << \" \";\n\u00a0\u00a0\u00a0cout << middleInitial << \". \";\n\u00a0\u00a0\u00a0cout << lastName << \" has a gpa of: \";\n\u00a0\u00a0\u00a0cout << gpa << \" and is enrolled in: \";\n\u00a0\u00a0\u00a0cout << currentCourse << endl;\n}\n// It is as if Student::Print() is written as:\n// void Student_Print(Student *const this)\n// {\n//\u00a0\u00a0\u00a0\u00a0cout << this->firstName << \" \";\n//\u00a0\u00a0\u00a0\u00a0cout << this->middleInitial << \". \" \n//\u00a0\u00a0\u00a0\u00a0cout << this->lastName << \" has a gpa of: \";\n//\u00a0\u00a0\u00a0\u00a0cout << this->gpa << \" and is enrolled in: \";\n//\u00a0\u00a0\u00a0\u00a0cout << this->currentCourse << endl;\n// }\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1;\u00a0\u00a0\u00a0// instance\n\u00a0\u00a0\u00a0\u00a0Student *s2 = new Student; // ptr to an instance\n\u00a0\u00a0\u00a0\u00a0s1.Initialize(\"Mary\", \"Jacobs\", 'I', 3.9, \"C++\");\n\u00a0\u00a0\u00a0\u00a0s2->Initialize(\"Sam\", \"Nelson\", 'B', 3.2, \"C++\");\n\u00a0\u00a0\u00a0\u00a0s1.Print();\n\u00a0\u00a0\u00a0\u00a0s2->Print(); // or use (*s2).Print();\n\u00a0\u00a0\u00a0\u00a0delete s1.firstName;\u00a0\u00a0// delete dynamically allocated\n\u00a0\u00a0\u00a0\u00a0delete s1.lastName;\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0delete s1.currentCourse;\n\u00a0\u00a0\u00a0\u00a0delete s2->firstName;\n\u00a0\u00a0\u00a0\u00a0delete s2->lastName;\n\u00a0\u00a0\u00a0\u00a0delete s2->currentCourse;\n\u00a0\u00a0\u00a0\u00a0delete s2;\u00a0\u00a0\u00a0\u00a0// delete dynamically allocated instance\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMary I. Jacobs has a gpa of: 3.9 and is enrolled in: C++\nSam B. Nelson has a gpa of: 3.2 and is enrolled in: C++\n```", "```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nclass Student\n{\n// private members are accessible only within the scope of\n// the class (e.g. within member functions or friends) \nprivate: \n\u00a0\u00a0\u00a0\u00a0char *firstName;\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0char *studentId;\u00a0\u00a0\npublic:\u00a0\u00a0\u00a0// public members are accessible from any scope\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0void Initialize();\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0void Initialize(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *, const char *);\n\u00a0\u00a0\u00a0\u00a0void CleanUp();\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\n```", "```cpp\nvoid Student::Initialize()\n{\n\u00a0\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0middleInitial = '\\0';\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// null character\n\u00a0\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0\u00a0currentCourse = studentId = 0;\n}\n// Overloaded member function definition\nvoid Student::Initialize(const char *fn, const char *ln, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char mi, float avg, const char *course, const char *id) \n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0middleInitial = mi; \n\u00a0\u00a0\u00a0\u00a0gpa = avg;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0\u00a0studentId = new char [strlen(id) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy (studentId, id); \n}\n// Member function definition\nvoid Student::CleanUp()\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0\u00a0delete studentId;\n}\n// Member function definition\nvoid Student::Print()\n{\n\u00a0\u00a0\u00a0\u00a0cout << firstName << \" \" << middleInitial << \". \";\n\u00a0\u00a0\u00a0\u00a0cout << lastName << \" with id: \" << studentId;\n\u00a0\u00a0\u00a0\u00a0cout << \" has gpa: \" << gpa << \" and enrolled in: \";\n\u00a0\u00a0\u00a0\u00a0cout << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1;\n\u00a0\u00a0\u00a0\u00a0// Initialize() is public; accessible from any scope\n\u00a0\u00a0\u00a0\u00a0s1.Initialize(\"Ming\", \"Li\", 'I', 3.9, \"C++\", \"178GW\"); \n\u00a0\u00a0\u00a0\u00a0s1.Print();\u00a0\u00a0// Print() is public, accessible from main() \n\u00a0\u00a0\u00a0\u00a0// Error! firstName is private; not accessible in main()\n\u00a0\u00a0\u00a0\u00a0// cout << s1.firstName << endl;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// CleanUp() is public, accessible from any scope\n\u00a0\u00a0\u00a0\u00a0s1.CleanUp(); \n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMing I. Li with id: 178GW has gpa: 3.9 and is enrolled in: C++\n```", "```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\nclass University\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char name[30];\n\u00a0\u00a0\u00a0\u00a0int numStudents;\npublic: \n\u00a0\u00a0\u00a0\u00a0// constructor prototypes\n\u00a0\u00a0\u00a0\u00a0University(); // default constructor\n\u00a0\u00a0\u00a0\u00a0University(const char *, int);\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\nUniversity::University()\n{\n\u00a0\u00a0\u00a0\u00a0name[0] = '\\0';\n\u00a0\u00a0\u00a0\u00a0numStudents = 0;\n}\nUniversity::University(const char * n, int num)\n{\n\u00a0\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0\u00a0numStudents = num;\n}\nvoid University::Print()\n{\n\u00a0\u00a0\u00a0\u00a0cout << \"University: \" << name;\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrollment: \" << numStudents << endl;\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0University u1; // Implicit call to default constructor\n\u00a0\u00a0\u00a0\u00a0University u2(\"University of Delaware\", 23800);\n\u00a0\u00a0\u00a0\u00a0u1.Print();\n\u00a0\u00a0\u00a0\u00a0u2.Print();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nUniversity: Enrollment: 0\nUniversity: University of Delaware Enrollment: 23800\n```", "```cpp\n\u00a0\u00a0\u00a0\u00a0// disallow copying during construction\n\u00a0\u00a0\u00a0\u00a0Student(const Student &) = delete;\u00a0\u00a0\u00a0// prototype\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring>\u00a0\u00a0\u00a0\u00a0\nusing namespace std;\nclass Student\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\u00a0\u00a0\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *); \n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor prototype\n\u00a0\u00a0\u00a0\u00a0void CleanUp();\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\n```", "```cpp\n// default constructor\nStudent::Student()\n{\n\u00a0\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0\u00a0currentCourse = 0;\n}\n// Alternate constructor member function definition\nStudent::Student(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float avg, const char *course)\n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0middleInitial = mi;\n\u00a0\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n}\n// Copy constructor definition \u2013 implement a deep copy\nStudent::Student(const Student &s)\n{\n\u00a0\u00a0\u00a0\u00a0// allocate necessary memory for destination string\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(s.firstName) + 1];\n\u00a0\u00a0\u00a0\u00a0// then copy source to destination string\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, s.firstName);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(s.lastName) + 1];\n\u00a0\u00a0\u00a0\u00a0// data members which are not pointers do not need their\n\u00a0\u00a0\u00a0\u00a0// space allocated for deep copy, such as is done above\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, s.lastName);\n\u00a0\u00a0\u00a0\u00a0middleInitial = s.middleInitial;\n\u00a0\u00a0\u00a0\u00a0gpa = s.gpa;\n\u00a0\u00a0\u00a0\u00a0// allocate destination string space, then copy contents\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(s.currentCourse) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, s.currentCourse);\n}\n// Member function definition\nvoid Student::CleanUp()\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n}\n\n// Member function definition\nvoid Student::Print()\n{\n\u00a0\u00a0\u00a0\u00a0cout << firstName << \" \" << middleInitial << \". \";\n\u00a0\u00a0\u00a0\u00a0cout << lastName << \" has a gpa of: \" << gpa;\n\u00a0\u00a0\u00a0\u00a0cout << \" and is enrolled in: \" << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{ \n\u00a0\u00a0\u00a0\u00a0// instantiate two Students\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Zachary\", \"Moon\", 'R', 3.7, \"C++\");\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Gabrielle\", \"Doone\", 'A', 3.7, \"C++\");\n\u00a0\u00a0\u00a0// These initializations implicitly invoke copy constructor\n\u00a0\u00a0\u00a0\u00a0Student s3(s1);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Student s4 = s2;\n\u00a0\u00a0\u00a0\u00a0strcpy(s3.firstName, \"Zack\");// alter each object slightly\n\u00a0\u00a0\u00a0\u00a0strcpy(s4.firstName, \"Gabby\"); \n\u00a0\u00a0\u00a0\u00a0// This sequence does not invoke copy constructor \n\u00a0\u00a0\u00a0\u00a0// This is instead an assignment.\n\u00a0\u00a0\u00a0\u00a0// Student s5(\"Giselle\", \"LeBrun\", 'A', 3.1, \"C++);\n\u00a0\u00a0\u00a0\u00a0// Student s6;\n\u00a0\u00a0\u00a0\u00a0// s6 = s5;\u00a0\u00a0// this is an assignment, not initialization\n\u00a0\u00a0\u00a0\u00a0S1.Print();\u00a0\u00a0\u00a0// print each instance\n\u00a0\u00a0\u00a0\u00a0S3.Print();\n\u00a0\u00a0\u00a0\u00a0s2.Print();\n\u00a0\u00a0\u00a0\u00a0s4.Print();\n\u00a0\u00a0\u00a0\u00a0s1.CleanUp();\u00a0\u00a0// Since some data members are pointers,\n\u00a0\u00a0\u00a0\u00a0s2.CleanUp(); // let's call a function to delete() them\n\u00a0\u00a0\u00a0\u00a0s3.CleanUp();\n\u00a0\u00a0\u00a0\u00a0s4.CleanUp();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nZachary R. Moon has a gpa of: 3.7 and is enrolled in: C++\nZack R. Moon has a gpa of: 3.7 and is enrolled in: C++\nGabrielle A. Doone has a gpa of: 3.7 and is enrolled in: C++\nGabby A. Doone has a gpa of: 3.7 and is enrolled in: C++\n```", "```cpp\n#include <iostream>\u00a0\u00a0\u00a0\n#include <cstring>\u00a0\u00a0\u00a0\nusing namespace std;\nclass Student;\u00a0\u00a0// forward declaration of Student class\nclass Employee\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char firstName[20];\n\u00a0\u00a0\u00a0\u00a0char lastName[20];\n\u00a0\u00a0\u00a0\u00a0float salary;\npublic:\n\u00a0\u00a0\u00a0\u00a0Employee();\n\u00a0\u00a0\u00a0\u00a0Employee(const char *, const char *, float);\n\u00a0\u00a0\u00a0\u00a0Employee(Student &);\u00a0\u00a0// conversion constructor\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\nclass Student\n{\nprivate: // data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\npublic:\n\u00a0\u00a0\u00a0\u00a0// constructor prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *);\n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0void Print();\n\u00a0\u00a0\u00a0\u00a0void CleanUp();\n\u00a0\u00a0\u00a0\u00a0float GetGpa(); // access function for private data member\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName();\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName();\n};\n```", "```cpp\nEmployee::Employee()\u00a0\u00a0// default constructor\n{\n\u00a0\u00a0\u00a0\u00a0firstName[0] = lastName[0] = '\\0';\u00a0\u00a0// null character\n\u00a0\u00a0\u00a0\u00a0salary = 0.0;\n}\n// alternate constructor\nEmployee::Employee(const char *fn, const char *ln, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float money)\n{\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0salary = money;\n}\n// conversion constructor \u2013 argument is a Student not Employee\nEmployee::Employee(Student &s)\n{\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, s.GetFirstName());\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, s.GetLastName());\n\u00a0\u00a0\u00a0\u00a0if (s.GetGpa() >= 4.0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary = 75000;\n\u00a0\u00a0\u00a0\u00a0else if (s.GetGpa() >= 3.0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary = 60000;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0salary = 50000; \n}\nvoid Employee::Print()\n{\n\u00a0\u00a0\u00a0\u00a0cout << firstName << \" \" << lastName << \" \" << salary;\n\u00a0\u00a0\u00a0\u00a0cout << endl;\n}\n// Definitions for Student's default, alternate, copy\n// constructors, Print()and CleanUp() have been omitted \n// for space, but are same as the prior Student example.\nfloat Student::GetGpa()\n{\n\u00a0\u00a0\u00a0\u00a0return gpa;\n}\nconst char *Student::GetFirstName()\n{\n\u00a0\u00a0\u00a0\u00a0return firstName;\n}\nconst char *Student::GetLastName()\n{\n\u00a0\u00a0\u00a0\u00a0return lastName;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Giselle\", \"LeBrun\", 'A', 3.5, \"C++\");\n\u00a0\u00a0\u00a0\u00a0Employee e1(s1);\u00a0\u00a0// conversion constructor\n\u00a0\u00a0\u00a0\u00a0e1.Print();\n\u00a0\u00a0\u00a0\u00a0s1.CleanUp();\u00a0\u00a0// CleanUp() will delete() s1's dynamically\n\u00a0\u00a0\u00a0\u00a0return 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// allocated data members\n}\n```", "```cpp\nGiselle LeBrun 60000\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring> \nusing namespace std;\nclass University\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *name;\n\u00a0\u00a0\u00a0\u00a0int numStudents;\npublic: \n\u00a0\u00a0\u00a0\u00a0// constructor prototypes\n\u00a0\u00a0\u00a0\u00a0University(); // default constructor\n\u00a0\u00a0\u00a0\u00a0University(const char *, int);\u00a0\u00a0// alternate constructor\n\u00a0\u00a0\u00a0\u00a0University(const University &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0~University();\u00a0\u00a0// destructor prototype\n\u00a0\u00a0\u00a0\u00a0void Print();\n};\n```", "```cpp\nUniversity::University()\u00a0\u00a0// default constructor\n{\n\u00a0\u00a0\u00a0\u00a0name = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0numStudents = 0;\n}\nUniversity::University(const char * n, int num) \n{\n\u00a0\u00a0\u00a0\u00a0name = new char [strlen(n) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0\u00a0numStudents = num;\n}\nUniversity::University(const University &u) // copy const\n{\n\u00a0\u00a0\u00a0\u00a0name = new char [strlen(u.name) + 1];\u00a0\u00a0// deep copy\n\u00a0\u00a0\u00a0\u00a0strcpy(name, u.name);\n\u00a0\u00a0\u00a0\u00a0numStudents = u.numStudents;\n}\nUniversity::~University()\u00a0\u00a0// destructor definition\n{\n\u00a0\u00a0\u00a0\u00a0delete name;\n\u00a0\u00a0\u00a0\u00a0cout << \"Destructor called \" << this << endl;\n}\nvoid University::Print()\n{\n\u00a0\u00a0\u00a0\u00a0cout << \"University: \" << name;\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrollment: \" << numStudents << endl;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0University u1(\"Temple University\", 39500);\n\u00a0\u00a0\u00a0\u00a0University *u2 = new University(\"Boston U\", 32500);\n\u00a0\u00a0\u00a0\u00a0u1.Print();\n\u00a0\u00a0\u00a0\u00a0u2->Print();\n\u00a0\u00a0\u00a0\u00a0delete u2;\u00a0\u00a0\u00a0// destructor will be called before delete()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// destructor for u1 will be called before\n\u00a0\u00a0\u00a0\u00a0return 0;\u00a0\u00a0\u00a0\u00a0// program completes \n}\n```", "```cpp\nUniversity: Temple University Enrollment: 39500\nUniversity: Boston U Enrollment: 32500\nDestructor called 0x10d1958\nDestructor called 0x60fe74\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring> \nusing namespace std;\nclass Student\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *); \n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void Print();\n\u00a0\u00a0\u00a0\u00a0// inline function definitions\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0float GetGpa() { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() { return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0// prototype only, see inline function definition below\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\n};\ninline void Student::SetCurrentCourse(const char *c)\n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, c); \n}\n```", "```cpp\n// Definitions for default, alternate, copy constructor,\n// and Print() have been omitted for space,\n// but are same as last example for class Student\n// the destructor is shown because we have not yet seen\n// an example destructor for the Student class\nStudent::~Student()\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Jo\", \"Muritz\", 'Z', 4.0, \"C++\"); \n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrolled in: \" << s1.GetCurrentCourse() << endl;\n\u00a0\u00a0\u00a0\u00a0s1.SetCurrentCourse(\"Advanced C++ Programming\"); \n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" New course: \" << s1.GetCurrentCourse() << endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nJo Muritz Enrolled in: C++\nJo Muritz New course: Advanced C++ Programming\n```", "```cpp\nStudent::Student(): studentId(0), gpa(0.0)\n{\n\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0currentCourse = 0;\n}\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring> \nusing namespace std;\nclass Student\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0const int studentId;\u00a0\u00a0\u00a0// constant data member\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *, int); \n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void Print();\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0float GetGpa() { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() { return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\u00a0\u00a0// prototype only\n};\n```", "```cpp\n// Usual definitions for the destructor, Print(), and \n// SetCurrentCourse() have been omitted to save space.\nStudent::Student(): studentId(0), gpa(0.0) // mbr. Init. list\n{\n\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0currentCourse = 0;\n}\nStudent::Student(const char *fn, const char *ln, char mi,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float avg, const char *course, int id): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentId (id), gpa (avg), middleInitial(mi)\n{\n\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n}\nStudent::Student(const Student &s): studentId (s.studentId)\n{\n\u00a0\u00a0\u00a0firstName = new char [strlen(s.firstName) + 1];\n\u00a0\u00a0\u00a0strcpy(firstName, s.firstName);\n\u00a0\u00a0\u00a0lastName = new char [strlen(s.lastName) + 1];\n\u00a0\u00a0\u00a0strcpy(lastName, s.lastName);\n\u00a0\u00a0\u00a0middleInitial = s.middleInitial;\n\u00a0\u00a0\u00a0gpa = s.gpa;\n\u00a0\u00a0\u00a0currentCourse = new char [strlen(s.currentCourse) + 1];\n\u00a0\u00a0\u00a0strcpy(currentCourse, s.currentCourse);\n}\nint main()\n{ \n\u00a0\u00a0\u00a0\u00a0Student s1(\"Renee\", \"Alexander\", 'Z', 3.7, \"C++\", 1290);\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" has gpa of: \" << s1.GetGpa() << endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nRenee Alexander has gpa of: 3.7\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring> \nusing namespace std;\nclass Student\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0const int studentId;\u00a0\u00a0\u00a0// constant data member\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(char *, char *, char, float, char *, int); \n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void Print() const;\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; }\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() const\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0int GetStudentId() const { return studentId; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\u00a0\u00a0// prototype only\n};\n```", "```cpp\n// Definitions for the constructors, destructor, and \n// SetCurrentCourse() have been omitted to save space.\n// Student::Print() has been revised, so it is shown below:\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << firstName << \" \" << middleInitial << \". \";\n\u00a0\u00a0\u00a0\u00a0cout << lastName << \" with id: \" << studentId;\n\u00a0\u00a0\u00a0\u00a0cout << \" and gpa: \" << gpa << \" is enrolled in: \";\n\u00a0\u00a0\u00a0\u00a0cout << currentCourse << endl;\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Zack\", \"Moon\", 'R', 3.75, \"C++\", 1378); \n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrolled in \" << s1.GetCurrentCourse() << endl;\n\u00a0\u00a0\u00a0\u00a0s1.SetCurrentCourse(\"Advanced C++ Programming\");\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" New course: \" << s1.GetCurrentCourse() << endl;\n\u00a0\u00a0\u00a0\u00a0const Student s2(\"Gabby\", \"Doone\", 'A', 4.0, \"C++\", 2239);\n\u00a0\u00a0\u00a0\u00a0s2.Print();\n\u00a0\u00a0\u00a0\u00a0// Not allowed, s2 is const\n\u00a0\u00a0\u00a0\u00a0// s2.SetCurrentCourse(\"Advanced C++ Programming\");\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nZack Moon Enrolled in C++\nZack Moon New course: Advanced C++ Programming\nGabby A. Doone with id: 2239 and gpa: 3.9 is enrolled in: C++\n```", "```cpp\n#include <iostream>\u00a0\u00a0\n#include <cstring> \nusing namespace std;\nclass Student\n{\nprivate: \n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0const char *studentId;\u00a0\u00a0// pointer to constant string\n\u00a0\u00a0\u00a0\u00a0static int numStudents; // static data member\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, float, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *, const char *); \n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void Print() const;\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; } \n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0const char *GetStudentId() const { return studentId; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *);\n\u00a0\u00a0\u00a0\u00a0static int GetNumberStudents(); // static member function \n};\n// definition for static data member \n// (which is implemented as an external variable)\nint Student::numStudents = 0;\u00a0\u00a0// notice initial value of 0\n// Definition for static member function\ninline int Student::GetNumberStudents()\n{\n\u00a0\u00a0\u00a0\u00a0return numStudents;\n}\ninline void Student::SetCurrentCourse(const char *c) \n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, c); \n}\n```", "```cpp\nStudent::Student(): studentId (0) // default constructor\n{\n\u00a0\u00a0\u00a0\u00a0firstName = lastName = 0;\u00a0\u00a0// NULL pointer\n\u00a0\u00a0\u00a0\u00a0middleInitial = '\\0';\n\u00a0\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0\u00a0currentCourse = 0;\n\u00a0\u00a0\u00a0\u00a0numStudents++;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// increment static counter\n}\n// Alternate constructor member function definition\nStudent::Student(const char *fn, const char *ln, char mi, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float avg, const char *course, const char *id) \n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(fn) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, fn);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(ln) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, ln);\n\u00a0\u00a0\u00a0\u00a0middleInitial = mi;\n\u00a0\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0\u00a0char *temp = new char [strlen(id) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy (temp, id);\u00a0\u00a0// studentId can't be an lvaue,\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0studentId = temp;\u00a0\u00a0\u00a0// but temp can!\n\u00a0\u00a0\u00a0\u00a0numStudents++;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// increment static counter\n}\nStudent::Student(const Student &s)\u00a0\u00a0\u00a0// copy constructor \n{\n\u00a0\u00a0\u00a0\u00a0firstName = new char [strlen(s.firstName) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(firstName, s.firstName);\n\u00a0\u00a0\u00a0\u00a0lastName = new char [strlen(s.lastName) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(lastName, s.lastName);\n\u00a0\u00a0\u00a0\u00a0middleInitial = s.middleInitial;\n\u00a0\u00a0\u00a0\u00a0gpa = s.gpa;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(s.currentCourse) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, s.currentCourse);\n\u00a0\u00a0\u00a0\u00a0char *temp = new char [strlen(s.studentId) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy (temp, s.studentId); //studentId can't be an lvaue, \n\u00a0\u00a0\u00a0\u00a0studentId = temp;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// but temp can!\n\u00a0\u00a0\u00a0\u00a0numStudents++;\u00a0\u00a0\u00a0\u00a0// increment static counter\n}\n\nStudent::~Student()\u00a0\u00a0\u00a0\u00a0// destructor definition\n{\n\u00a0\u00a0\u00a0\u00a0delete firstName;\n\u00a0\u00a0\u00a0\u00a0delete lastName;\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0\u00a0delete (char *) studentId; // cast is necessary for delete\n\u00a0\u00a0\u00a0\u00a0numStudents--;\u00a0\u00a0\u00a0// decrement static counter\n}\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0cout << firstName << \" \" << middleInitial << \". \";\n\u00a0\u00a0\u00a0cout << lastName << \" with id: \" << studentId;\n\u00a0\u00a0\u00a0cout << \" and gpa: \" << gpa << \" and is enrolled in: \";\n\u00a0\u00a0\u00a0cout << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Nick\", \"Cole\", 'S', 3.65, \"C++\", \"112HAV\"); \n\u00a0\u00a0\u00a0\u00a0Student s2(\"Alex\", \"Tost\", 'A', 3.78, \"C++\", \"674HOP\"); \n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrolled in \" << s1.GetCurrentCourse() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" Enrolled in \" << s2.GetCurrentCourse() << endl;\n\n\u00a0\u00a0\u00a0\u00a0// call a static member function in the preferred manner\n\u00a0\u00a0\u00a0\u00a0cout << \"There are \" << Student::GetNumberStudents(); \n\u00a0\u00a0\u00a0\u00a0cout << \" students\" << endl;\n\u00a0\u00a0\u00a0\u00a0// Though not preferable, we could also use:\n\u00a0\u00a0\u00a0\u00a0// cout << \"There are \" << s1.GetNumberStudents(); \n\u00a0\u00a0\u00a0\u00a0// cout << \" students\" << endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nNick Cole Enrolled in C++\nAlex Tost Enrolled in C++\nThere are 2 students\n```"]