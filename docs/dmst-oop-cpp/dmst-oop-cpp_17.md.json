["```cpp\n#include <list>\nint main()\n{\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0list<Student> studentBody;\u00a0\u00a0\u00a0// create a list\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Jul\", \"Li\", 'M', \"Ms.\", 3.8, \"C++\", \"117PSU\");\n\u00a0\u00a0\u00a0\u00a0Student *s2 = new Student(\"Deb\", \"King\", 'H', \"Dr.\", 3.8,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C++\", \"544UD\");\n\u00a0\u00a0\u00a0\u00a0// Add Students to the studentBody list. \n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(s1);\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(*s2);\n\u00a0\u00a0\u00a0\u00a0// The next 3 instances are anonymous objects in main()\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.8, \"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Sara\", \"Kato\", 'B', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.9, \"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Giselle\", \"LeBrun\", 'R',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Ms.\", 3.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0while (!studentBody.empty())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.front().Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.pop_front();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0delete s2;\u00a0\u00a0// delete any heap instances\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMs. Jul M. Li with id: 117PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Deb H. King with id: 544UD GPA:\u00a0\u00a03.8 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\n```", "```cpp\n#include <list>\n#include <iterator>\nbool operator<(const Student &s1, const Student &s2)\n{\u00a0\u00a0\u00a0// overloaded operator< -- required to use list::sort()\n\u00a0\u00a0\u00a0\u00a0return (s1.GetGpa() < s2.GetGpa());\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0list<Student> studentBody;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Jul\", \"Li\", 'M', \"Ms.\", 3.8, \"C++\", \"117PSU\");\n\u00a0\u00a0\u00a0\u00a0// Add Students to the studentBody list.\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(s1);\n\u00a0\u00a0\u00a0\u00a0// The next Student instances are anonymous objects\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.8, \"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Sara\", \"Kato\", 'B', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.9, \"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Giselle\", \"LeBrun\", 'R',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Ms.\", 3.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.sort();\u00a0\u00a0// sort() will rely on operator< \n\u00a0\u00a0\u00a0\u00a0// Create a list iterator; set to first item in the list\n\u00a0\u00a0\u00a0\u00a0list <Student>::iterator listIter = studentBody.begin();\n\u00a0\u00a0\u00a0\u00a0while (listIter != studentBody.end())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Student &temp = *listIter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temp.Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0listIter++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMS. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\nMs. Jul M. Li with id: 117PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\n```", "```cpp\n#include <vector>\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0vector<Student> studentBody1, studentBody2; // two vectors\n\u00a0\u00a0\u00a0\u00a0// add 3 Students, which are anonymous objects, to vect 1 \n\u00a0\u00a0\u00a0\u00a0studentBody1.push_back(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.8, \"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody1.push_back(Student(\"Sara\", \"Kato\", 'B', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.9, \"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody1.push_back(Student(\"Giselle\", \"LeBrun\", 'R',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Ms.\", 3.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < studentBody1.size(); i++)\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody1[i].Print();\u00a0\u00a0\u00a0// print vector1's contents\n\u00a0\u00a0\u00a0\u00a0studentBody2 = studentBody1;\u00a0\u00a0\u00a0// assign one to another\n\u00a0\u00a0\u00a0\u00a0if (studentBody1 == studentBody2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"Vectors are the same\" << endl;\n\u00a0\u00a0\u00a0\u00a0for (auto iter = studentBody2.begin(); // print vector2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iter != studentBody2.end(); iter++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(*iter).Print();\n\u00a0\u00a0\u00a0\u00a0if (!studentBody1.empty())\u00a0\u00a0\u00a0// clear first vector \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody1.clear();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\nVectors are the same\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\n```", "```cpp\ninclude <deque>\u00a0\u00a0\u00a0\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0deque<Student> studentBody;\u00a0\u00a0\u00a0// create a deque\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Tim\", \"Lim\", 'O', \"Mr.\", 3.2, \"C++\", \"111UD\");\n\u00a0\u00a0\u00a0\u00a0// the remainder of the Students are anonymous objects\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Hana\", \"Sato\", 'U', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.8, \"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_back(Student(\"Sara\", \"Kato\", 'B', \"Dr.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.9, \"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push_front(Student(\"Giselle\", \"LeBrun\", 'R',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Ms.\", 3.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0// insert one past the beginning\n\u00a0\u00a0\u00a0\u00a0studentBody.insert(studentBody.begin() + 1, Student\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(\"Anne\", \"Brennan\", 'B', \"Ms.\", 3.9, \"C++\", \"299CU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody[0] = s1;\u00a0\u00a0// replace  element; \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// no bounds checking!\n\u00a0\u00a0\u00a0\u00a0while (studentBody.empty() == false)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.front().Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.pop_front();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMr. Tim O. Lim with id: 111UD GPA:\u00a0\u00a03.2 Course: C++\nMs. Anne B. Brennan with id: 299CU GPA:\u00a0\u00a03.9 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\n```", "```cpp\ninclude <stack>\u00a0\u00a0\u00a0// template class preamble\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0stack<Student> studentBody;\u00a0\u00a0\u00a0// create a stack\n\u00a0\u00a0\u00a0\u00a0// add Students to the stack (anonymous objects)\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Hana\", \"Sato\", 'U', \"Dr.\", 3.8,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Sara\", \"Kato\", 'B', \"Dr.\", 3.9,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Giselle\", \"LeBrun\", 'R', \"Ms.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0while (!studentBody.empty())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.top().Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.pop();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nMs. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\n```", "```cpp\n#include <queue>\u00a0\u00a0\u00a0\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0queue<Student> studentBody;\u00a0\u00a0// create a queue\n\u00a0\u00a0\u00a0\u00a0// add Students to the queue (anonymous objects)\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Hana\", \"Sato\", 'U', \"Dr.\", 3.8,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C++\", \"178PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Sara\", \"Kato\", 'B', \"Dr.\", 3.9,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"C++\", \"272PSU\"));\n\u00a0\u00a0\u00a0\u00a0studentBody.push(Student(\"Giselle\", \"LeBrun\", 'R', \"Ms.\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.4, \"C++\", \"299TU\"));\n\u00a0\u00a0\u00a0\u00a0while (!studentBody.empty())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.front().Print();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody.pop();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nDr. Hana U. Sato with id: 178PSU GPA:\u00a0\u00a03.8 Course: C++\nDr. Sara B. Kato with id: 272PSU GPA:\u00a0\u00a03.9 Course: C++\nMs. Giselle R. LeBrun with id: 299TU GPA:\u00a0\u00a03.4 Course: C++\n```", "```cpp\n#include <map>\nbool operator<(const Student &s1, const Student &s2)\n{\u00a0\u00a0\u00a0// We need to overload operator< to compare Students\n\u00a0\u00a0\u00a0\u00a0return (s1.GetGpa() < s2.GetGpa());\n}\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Hana\", \"Lo\", 'U', \"Dr.\", 3.8, \"C++\", \"178UD\");\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Ali\", \"Li\", 'B', \"Dr.\", 3.9, \"C++\", \"272UD\");\n\u00a0\u00a0\u00a0\u00a0Student s3(\"Rui\", \"Qi\", 'R', \"Ms.\", 3.4, \"C++\", \"299TU\");\n\u00a0\u00a0\u00a0\u00a0Student s4(\"Jiang\", \"Wu\", 'C', \"Ms.\", 3.8, \"C++\",\"887TU\");\n\u00a0\u00a0\u00a0\u00a0// Create map and map iterator, of Students w char * keys\n\u00a0\u00a0\u00a0\u00a0map<const char *, Student> studentBody;\n\u00a0\u00a0\u00a0\u00a0map<const char *, Student>::iterator mapIter;\n\u00a0\u00a0\u00a0\u00a0// create three pairings of ids to Students\n\u00a0\u00a0\u00a0\u00a0pair<const char *, Student> studentPair1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(s1.GetStudentId(), s1);\n\u00a0\u00a0\u00a0\u00a0pair<const char *, Student> studentPair2\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(s2.GetStudentId(), s2);\n\u00a0\u00a0\u00a0\u00a0pair<const char *, Student> studentPair3\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(s3.GetStudentId(), s3);\n\u00a0\u00a0\u00a0\u00a0studentBody.insert(studentPair1);\u00a0\u00a0// insert 3 pairs\n\u00a0\u00a0\u00a0\u00a0studentBody.insert(studentPair2);\n\u00a0\u00a0\u00a0\u00a0studentBody.insert(studentPair3);\n\u00a0\u00a0\u00a0\u00a0// insert using virtual indices per map\n\u00a0\u00a0\u00a0\u00a0studentBody[s4.GetStudentId()] = s4; \n\n\u00a0\u00a0\u00a0\u00a0mapIter = studentBody.begin();\n\u00a0\u00a0\u00a0\u00a0while (mapIter != studentBody.end())\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// set temp to current item in map iterator\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pair<const char *, Student> temp = *mapIter;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Student &tempS = temp.second;\u00a0\u00a0// get 2nd item in pair \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// access using mapIter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << temp.first << \" \"<<temp.second.GetFirstName();\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// or access using temporary Student, tempS\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \" \" << tempS.GetLastName() << endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mapIter++;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\n299TU Rui Qi\n178UD Hana Lo\n272UD Ali Li\n887TU Jiang Wu\n```", "```cpp\n#include <map>\nstruct comparison\u00a0\u00a0\u00a0// This struct represents a 'functor'\n{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// that is, a 'function object'\n\u00a0\u00a0\u00a0\u00a0bool operator() (const char *key1, const char *key2) const\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int ans = strcmp(key1, key2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ans >= 0) return true;\u00a0\u00a0// return a boolean\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else return false;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0comparison() {}\u00a0\u00a0// empty constructor and destructor\n\u00a0\u00a0\u00a0\u00a0~comparison() {}\n};\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Hana\", \"Sato\", 'U', \"Dr.\", 3.8, \"C++\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"178PSU\");\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Sara\", \"Kato\", 'B', \"Dr.\", 3.9, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"272PSU\");\n\u00a0\u00a0\u00a0\u00a0Student s3(\"Jill\", \"Long\", 'R', \"Dr.\", 3.7, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"234PSU\");\n\u00a0\u00a0\u00a0\u00a0// Now, map is maintained in sorted order per 'comparison'\n\u00a0\u00a0\u00a0\u00a0// functor using operator()\n\u00a0\u00a0\u00a0\u00a0map<const char *, Student, comparison> studentBody;\n\u00a0\u00a0\u00a0\u00a0map<const char *, Student, comparison>::iterator mapIter;\n\u00a0\u00a0\u00a0\u00a0// The remainder of the program is similar to prior\n}\u00a0\u00a0\u00a0// map program. See online code for complete example.\n```"]