["```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\nclass Id\u00a0\u00a0// the contained 'part'\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *idNumber;\npublic:\n\u00a0\u00a0\u00a0\u00a0Id() { idNumber = 0; }\n\u00a0\u00a0\u00a0\u00a0Id(const char *); \n\u00a0\u00a0\u00a0\u00a0Id(const Id &);\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0~Id() { delete idNumber; }\n\u00a0\u00a0\u00a0\u00a0const char *GetId() const { return idNumber; }\n};\nId::Id(const char *id)\n{\n\u00a0\u00a0\u00a0\u00a0idNumber = new char [strlen(id) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(idNumber, id);\n} \nId::Id(const Id &id)\n{\n\u00a0\u00a0\u00a0idNumber = new char [strlen(id.idNumber) + 1];\n\u00a0\u00a0\u00a0strcpy(idNumber, id.idNumber);\n}\n```", "```cpp\nclass Person\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0char *firstName;\n\u00a0\u00a0\u00a0\u00a0char *lastName;\n\u00a0\u00a0\u00a0\u00a0char middleInitial;\n\u00a0\u00a0\u00a0\u00a0char *title;\u00a0\u00a0// Mr., Ms., Mrs., Miss, Dr., etc.\nprotected:\n\u00a0\u00a0\u00a0\u00a0void ModifyTitle(const char *);\npublic:\n\u00a0\u00a0\u00a0\u00a0Person();\u00a0\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Person(const char *, const char *, char, const char *);\n\u00a0\u00a0\u00a0\u00a0Person(const Person &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0virtual ~Person();\u00a0\u00a0// virtual destructor\n\u00a0\u00a0\u00a0\u00a0const char *GetFirstName() const { return firstName; }\n\u00a0\u00a0\u00a0\u00a0const char *GetLastName() const { return lastName; }\n\u00a0\u00a0\u00a0\u00a0const char *GetTitle() const { return title; }\n\u00a0\u00a0\u00a0\u00a0char GetMiddleInitial() const { return middleInitial; }\n\u00a0\u00a0\u00a0\u00a0// virtual functions\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0virtual void IsA();\n\u00a0\u00a0\u00a0\u00a0virtual void Greeting(const char *);\n};\n//\u00a0\u00a0Assume the member functions for Person exist here\n//\u00a0\u00a0(they are the same as in previous chapters)\n```", "```cpp\nclass Student: public Person\u00a0\u00a0// 'whole' object\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0static int numStudents;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0Id studentId;\u00a0\u00a0// is composed of a 'part'\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *, const char *);\n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0virtual ~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void EarnPhD() { ModifyTitle(\"Dr.\"); } // various inline\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// functions\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() const\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *); // prototype only\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override;\n\u00a0\u00a0\u00a0\u00a0virtual void IsA() override { cout << \"Student\" << endl; }\n\u00a0\u00a0\u00a0\u00a0static int GetNumberStudents() { return numStudents; }\n\u00a0\u00a0\u00a0\u00a0// Access function for embedded Id object\n\u00a0\u00a0\u00a0\u00a0const char *GetStudentId() const;\u00a0\u00a0\u00a0// prototype only\n};\nint Student::numStudents = 0;\u00a0\u00a0// static data member\ninline void Student::SetCurrentCourse(const char *c)\n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\u00a0// delete existing course\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, c);\n}\n```", "```cpp\n// constructor definitions\nStudent::Student(): studentId (\"None\") \n{\n\u00a0\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0\u00a0currentCourse = 0;\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::Student(const char *fn, const char *ln, char mi,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t, float avg, const char *course,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *id): Person(fn, ln, mi, t),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentId(id)\n{\n\u00a0\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::Student(const Student &ps): Person(ps),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentId(ps.studentId)\n{\n\u00a0\u00a0\u00a0\u00a0gpa = ps.gpa;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(ps.currentCourse) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, ps.currentCourse);\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::~Student()\u00a0\u00a0\u00a0// destructor definition\n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0\u00a0numStudents--;\n\u00a0\u00a0\u00a0\u00a0// the embedded object studentId will also be destructed\n}\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << GetTitle() << \" \" << GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0cout << GetMiddleInitial() << \". \" << GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" with id: \" << studentId.GetId() << \" GPA: \";\n\u00a0\u00a0\u00a0\u00a0cout << setprecision(3) <<\u00a0\u00a0\" \" << gpa;\n\u00a0\u00a0\u00a0\u00a0cout << \" Course: \" << currentCourse << endl;\n}\u00a0\u00a0\u00a0\u00a0\nconst char *GetStudentId() const \n{\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return studentId.GetId();\u00a0\u00a0\u00a0\n} \n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Cyrus\", \"Bond\", 'I', \"Mr.\", 3.65, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"6996CU\");\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Anne\", \"Brennan\", 'M', \"Ms.\", 3.95, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"909EU\");\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" has id #: \" << s1.GetStudentId() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" has id #: \" << s2.GetStudentId() << endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nCyrus Bond has id #: 6996CU\nAnne Brennan has id #: 909EU \n```", "```cpp\n#include <iostream>\n#include <iomanip>\n#include <cstring>\nusing namespace std;\nconst int MAX = 25;\n// class Id and class Person are omitted here to save space.\n// They will be as shown in previous example (Chp10-Ex1.cpp)\nclass Student; // forward declaration\nclass University\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0char *name;\n\u00a0\u00a0\u00a0\u00a0Student *studentBody[MAX]; // Association to many students\n\u00a0\u00a0\u00a0\u00a0int currentNumStudents;\n\u00a0\u00a0\u00a0\u00a0University(const University &);\u00a0\u00a0// prohibit copies\npublic:\n\u00a0\u00a0\u00a0\u00a0University();\n\u00a0\u00a0\u00a0\u00a0University(const char *);\n\u00a0\u00a0\u00a0\u00a0~University();\n\u00a0\u00a0\u00a0\u00a0void EnrollStudent(Student *);\n\u00a0\u00a0\u00a0\u00a0const char *GetName() const { return name; }\n\u00a0\u00a0\u00a0\u00a0void PrintStudents() const;\n};\n```", "```cpp\nUniversity::University()\n{\n\u00a0\u00a0\u00a0\u00a0name = 0;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAX; i++)\u00a0\u00a0// the student body\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody[i] = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// will start out empty\u00a0\n\u00a0\u00a0\u00a0\u00a0currentNumStudents = 0;\n}\nUniversity::University(const char *n)\n{\n\u00a0\u00a0\u00a0\u00a0name = new char [strlen(n) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(name, n);\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAX; i++) // the student body will\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody[i] = 0;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// start out empty\n\u00a0\u00a0\u00a0\u00a0currentNumStudents = 0;\n}\nUniversity::~University()\n{\n\u00a0\u00a0\u00a0\u00a0delete name;\n\u00a0\u00a0\u00a0\u00a0// The students will delete themselves\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < MAX; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0studentBody[i] = 0;\u00a0\u00a0// only NULL out their link\n}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nvoid University::EnrollStudent(Student *s)\n{\n\u00a0\u00a0\u00a0\u00a0// set an open slot in the studentBody to point to the\n\u00a0\u00a0\u00a0\u00a0// Student passed in as an input parameter\n\u00a0\u00a0\u00a0\u00a0studentBody[currentNumStudents++] = s;\n}\nvoid University::PrintStudents()const\n{\n\u00a0\u00a0\u00a0\u00a0cout << name << \" has the following students:\" << endl;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < currentNumStudents; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << \"\\t\" << studentBody[i]->GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout << studentBody[i]->GetLastName() << endl;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cpp\nclass Student: public Person\u00a0\u00a0\n{\nprivate:\n\u00a0\u00a0\u00a0\u00a0// data members\n\u00a0\u00a0\u00a0\u00a0float gpa;\n\u00a0\u00a0\u00a0\u00a0char *currentCourse;\n\u00a0\u00a0\u00a0\u00a0static int numStudents;\n\u00a0\u00a0\u00a0\u00a0Id studentId;\u00a0\u00a0// part, Student Has-A studentId\n\u00a0\u00a0\u00a0\u00a0University *univ;\u00a0\u00a0// Association to University object\npublic:\n\u00a0\u00a0\u00a0\u00a0// member function prototypes\n\u00a0\u00a0\u00a0\u00a0Student();\u00a0\u00a0// default constructor\n\u00a0\u00a0\u00a0\u00a0Student(const char *, const char *, char, const char *,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float, const char *, const char *, University *);\n\u00a0\u00a0\u00a0\u00a0Student(const Student &);\u00a0\u00a0// copy constructor\n\u00a0\u00a0\u00a0\u00a0virtual ~Student();\u00a0\u00a0// destructor\n\u00a0\u00a0\u00a0\u00a0void EarnPhD() { ModifyTitle(\"Dr.\"); }\n\u00a0\u00a0\u00a0\u00a0float GetGpa() const { return gpa; }\n\u00a0\u00a0\u00a0\u00a0const char *GetCurrentCourse() const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return currentCourse; }\n\u00a0\u00a0\u00a0\u00a0void SetCurrentCourse(const char *); // prototype only\n\u00a0\u00a0\u00a0\u00a0virtual void Print() const override;\n\u00a0\u00a0\u00a0\u00a0virtual void IsA() override { cout << \"Student\" << endl; }\n\u00a0\u00a0\u00a0\u00a0static int GetNumberStudents() { return numStudents; }\n\u00a0\u00a0\u00a0\u00a0// Access functions for aggregate/associated objects\n\u00a0\u00a0\u00a0\u00a0const char *GetStudentId() const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return studentId.GetId(); }\n\u00a0\u00a0\u00a0\u00a0const char *GetUniversity() const \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ return univ->GetName(); }\n};\nint Student::numStudents = 0;\u00a0\u00a0// def. of static data member\ninline void Student::SetCurrentCourse(const char *c)\n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\u00a0\u00a0\u00a0// delete existing course\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(c) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, c);\n}\n```", "```cpp\nStudent::Student(): studentId (\"None\")\n{\n\u00a0\u00a0\u00a0\u00a0gpa = 0.0;\n\u00a0\u00a0\u00a0\u00a0currentCourse = 0;\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0univ = 0;\u00a0\u00a0\u00a0\u00a0// no current University association\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::Student(const char *fn, const char *ln, char mi,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *t, float avg, const char *course,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *id, University *univ):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person(fn, ln, mi, t), studentId(id)\n{\n\u00a0\u00a0\u00a0\u00a0gpa = avg;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(course) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, course);\n\u00a0\u00a0\u00a0\u00a0// establish link to University, then back link\n\u00a0\u00a0\u00a0\u00a0this->univ = univ;\u00a0\u00a0// required use of 'this'\n\u00a0\u00a0\u00a0\u00a0univ->EnrollStudent(this);\u00a0\u00a0// another required 'this'\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::Student(const Student &ps): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Person(ps), studentId(ps.studentId)\n{\n\u00a0\u00a0\u00a0\u00a0gpa = ps.gpa;\n\u00a0\u00a0\u00a0\u00a0currentCourse = new char [strlen(ps.currentCourse) + 1];\n\u00a0\u00a0\u00a0\u00a0strcpy(currentCourse, ps.currentCourse);\n\u00a0\u00a0\u00a0\u00a0this->univ = ps.univ;\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0univ->EnrollStudent(this);\n\u00a0\u00a0\u00a0\u00a0numStudents++;\n}\nStudent::~Student()\u00a0\u00a0// destructor\n{\n\u00a0\u00a0\u00a0\u00a0delete currentCourse;\n\u00a0\u00a0\u00a0\u00a0numStudents--;\n\u00a0\u00a0\u00a0\u00a0univ = 0;\u00a0\u00a0// the University will delete itself\n\u00a0\u00a0\u00a0\u00a0// the embedded object studentId will also be destructed\n}\nvoid Student::Print() const\n{\n\u00a0\u00a0\u00a0\u00a0cout << GetTitle() << \" \" << GetFirstName() << \" \";\n\u00a0\u00a0\u00a0\u00a0cout << GetMiddleInitial() << \". \" << GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" with id: \" << studentId.GetId() << \" GPA: \";\n\u00a0\u00a0\u00a0\u00a0cout << setprecision(3) <<\u00a0\u00a0\" \" << gpa;\n\u00a0\u00a0\u00a0\u00a0cout << \" Course: \" << currentCourse << endl;\n}\n```", "```cpp\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0University u1(\"The George Washington University\");\n\u00a0\u00a0\u00a0\u00a0Student s1(\"Gabby\", \"Doone\", 'A', \"Miss\", 3.85, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"4225GWU\", &u1);\n\u00a0\u00a0\u00a0\u00a0Student s2(\"Giselle\", \"LeBrun\", 'A', \"Ms.\", 3.45, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"1227GWU\", &u1);\n\u00a0\u00a0\u00a0\u00a0Student s3(\"Eve\", \"Kendall\", 'B', \"Ms.\", 3.71, \"C++\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"5542GWU\", &u1);\n\u00a0\u00a0\u00a0\u00a0cout << s1.GetFirstName() << \" \" << s1.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" attends \" << s1.GetUniversity() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << s2.GetFirstName() << \" \" << s2.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" attends \" << s2.GetUniversity() << endl;\n\u00a0\u00a0\u00a0\u00a0cout << s3.GetFirstName() << \" \" << s3.GetLastName();\n\u00a0\u00a0\u00a0\u00a0cout << \" attends \" << s2.GetUniversity() << endl;\n\u00a0\u00a0\u00a0\u00a0u1.PrintStudents();\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n```", "```cpp\nGabby Doone attends The George Washington University\nGiselle LeBrun attends The George Washington University\nEve Kendall attends The George Washington University\nThe George Washington University has the following students:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Gabby Doone\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Giselle LeBrun\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Eve Kendall\n```"]