["```cpp\n// Entry point of the application.\nint main()\n{\n    // Set a random seed.\n    std:: srand(static_cast<unsigned int>(time(nullptr)));\n\n    // Create the main game object.\n    Game game;\n\n    // Create a Boolean that we can store out result it.\n    bool result;\n\n    // Initialize and run the game object.\n    result = game.Initialize();\n\n    if (result)\n    {\n        game.Run();\n    }\n\n    // Shutdown and release the game object.\n    game.Shutdown();\n\n    // Exit the application.\n    return 0;\n}\n```", "```cpp\nstd::rand() % 2;\n```", "```cpp\nbool myBool = std::rand() % 2;\n```", "```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n  // Loop forever.\n  while (true)\n{\n    // Generate a number between 0 and 1.\n    bool myBool = rand() % 2;\n    if (myBool)\n    {\n        cout << \"true\";\n    }\n    else\n    {\n        cout << \"false\";\n    }\n    return 0;\n}\n```", "```cpp\n// Populate the level with items.\nvoid Game::PopulateLevel()\n{\n    // A Boolean variable used to determine if an object should be spawned.bool canSpawn;\n\n    // Spawn gold.\n    canSpawn = std::rand() % 2;\n    if (canSpawn)\n    {\n       std::unique_ptr<Gold> gold = std::make_unique<Gold>();\n       gold->SetPosition(sf::Vector2f(m_screenCenter.x - 50.f, m_screenCenter.y));\n       m_items.push_back(std::move(gold));\n    }\n\n    // Spawn a gem.\n    canSpawn = std::rand() % 2;\n    if (canSpawn)\n    {\n       std::unique_ptr<Gem> gem = std::make_unique<Gem>();\n       gem->SetPosition(sf::Vector2f(m_screenCenter.x + 50.f, m_screenCenter.y));\n       m_items.push_back(std::move(gem));\n    }\n}\n```", "```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Entry method of the application.\nint main()\n{\n  // Create and initialize our variables.\n  int upperLimit = 0;\n\n  // Output instructions.\n  cout << \"Enter a number, and we'll split it into three random smaller numbers:\" << endl;\n  cin >> upperLimit;\n  cout << endl;\n\n  float number1Bias = rand() % 101;\n  float number2Bias = rand() % 101;\n  float number3Bias = rand() % 101;\n\n  float total = number1Bias + number2Bias + number3Bias;\n\n  // Output the numbers.\n  cout << upperLimit * (number1Bias / total) << endl;\n  cout << upperLimit * (number2Bias / total) << endl;\n  cout << upperLimit * (number3Bias / total) << endl;\n\n  // Pause so we can see output.\n  cin.get();\n  cin.get();\n\n  // Exit function.\n  return 0;\n}\n```", "```cpp\nm_attack = 10;\nm_defense = 10;\nm_strength = 10;\nm_dexterity = 10;\nm_stamina = 10;\n```", "```cpp\nint m_statPoints;\n```", "```cpp\n// Randomly distribute other stat.\nm_statPoints = 50;\n\nfloat attackBias = std::rand() % 101;\nfloat defenseBias = std::rand() % 101;\nfloat strengthBias = std::rand() % 101;\nfloat dexterityBias = std::rand() % 101;\nfloat staminaBias = std::rand() % 101;\n\nfloat total = attackBias + defenseBias + strengthBias + dexterityBias + staminaBias;\n\nm_attack += m_statPoints * (attackBias / total);\nm_defense += m_statPoints * (defenseBias / total);\nm_strength += m_statPoints * (strengthBias / total);\nm_dexterity += m_statPoints * (dexterityBias / total);\nm_stamina += m_statPoints * (staminaBias / total);\n```", "```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Entry method of the application.\nint main()\n{\n  // Create and populate an array of animals.\n  vector<string> animals = { \"Dog\", \"Cat\", \"Bird\", \"Fox\", \"Lizard\" };\n\n  // Output the instructions.\n  cout << \"Press enter for the name of a random animal!\" << endl;\n\n  // Loop forever.\n  while (true)\n  {\n    // Wait for user input.\n    cin.get();\n\n    // Generate a random index.\n    int randomIndex;\n    randomIndex = rand() % animals.size();\n\n    // Output the name of the randomly selected animal.\n    cout << animals[randomIndex].c_str();\n  }\n\n  // Exit function.\n  return 0;\n}\n```", "```cpp\n// Populate the level with items.\nvoid Game::PopulateLevel()\n{\n    // A Boolean variable used to determine if an object should be spawned.\n    bool canSpawn;\n\n    // Spawn an item.\n    canSpawn = std::rand() % 2;\n    if (canSpawn)\n    {\n        int itemIndex = std::rand() % 2;\n        std::unique_ptr<Item> item;\n        switch (itemIndex)\n        {\n            case 0:\n                item = std::make_unique<Gold>();\n            break;\n\n            case 1:\n                item = std::make_unique<Gem>();\n            break;\n        }\n        item->SetPosition(sf::Vector2f(m_screenCenter.x, m_screenCenter.y));\n        m_items.push_back(std::move(item));\n    }\n}\n```", "```cpp\nStirng myStringLiteral = \"hello\";\nstring myString = { 'h', 'e', 'l', 'l', 'o', '\\0' };\n```", "```cpp\nchar myCharArray[6] = { 'h', 'e', 'l', 'l', 'o', '\\0' };\nstring stringVersion = myCharArray;\n```", "```cpp\nchar myChar = 97;\n```", "```cpp\n#include <iostream>\n\nusing namespace std;\n\n// Entry method of the application.\nint main()\n{\n  // Loop forever.\n  while (true)\n  {\n    // Output instructions.\n    cout << \"Press enter to generate a random character from the ASCII standard:\" << endl;\n\n    // Pause for user input.\n    cin.get();\n\n    // The ASCII characters range from 0 - 127 in decimal.\n    int randInt = rand() % 128;\n\n    // To turn that into a char, we can just assign the int.\n    char randChar = randInt;\n\n    // Output the random char.\n    cout << \"Random Char: \" << randChar << \"\\n\" << endl;\n  }\n\n  // Exit function.\n  return 0;\n}\n```", "```cpp\n// The ASCII characters range from 0 - 127 in decimal.\n//int randInt = rand() % 128;\nint randInt = std::rand() % 128;\nint randInt = std::rand() % 26 + 97;\n\n```", "```cpp\n// Include our dependencies.\n#include <iostream>\n#include <ctime>\n\n// We include std so we don't have to fully qualify everything.\nusing namespace std;\n\nvoid HelloWorld();\n\n// Entry method of the application.\nint main()\n{\n  // First we give the application a random seed.\n  srand(time(nullptr));\n\n  // Loop forever.\n  while (true)\n  {\n    // Output the welcome message.\n    cout << \"Press enter to iterate a random number of times:\" << endl;\n\n    // Pause for user input.\n    cin.get();\n\n    // Generate a random number between 1 and 10.\n    int iterations = rand() % 10 + 1;\n\n    // Now loop that number of times.\n    for (int i = 0; i < iterations; i++)\n    {\n      cout << \"Iteration \" << i << \": \";\n      HelloWorld();\n    }\n\n    // Output ending message.\n    cout << endl << \"We made \" << iterations << \" call(s) to HelloWorld() that time!\" << endl << endl;\n  }\n\n  // Exit function.\n  return 0;\n}\n\n// Outputs the text Hello World!.\nvoid HelloWorld()\n{\n  cout << \"Hello World!\" << endl;\n}\n```", "```cpp\n// Populate the level with items.\nvoid Game::PopulateLevel()\n{\n  // A Boolean variable used to determine if an object should be spawned.\n  bool canSpawn;\n\n // Generate a random number between 1 and 10.\n int iterations = std::rand() % 10 + 1;\n\n // Now loop that number of times.\n for (int i = 0; i < iterations; i++)\n {\n // Spawn an item.\n canSpawn = std::rand() % 2;\n\n    if (canSpawn)\n    {\n      int itemIndex = std::rand() % 2;\n      std::unique_ptr<Item> item;\n\n      switch (itemIndex)\n      {\n      case 0:\n        item = std::make_unique<Gold>();\n        break;\n\n      case 1:\n        item = std::make_unique<Gem>();\n        break;\n      }\n\n      item->SetPosition(sf::Vector2f(m_screenCenter.x, m_screenCenter.y));\n      m_items.push_back(std::move(item));\n    }\n  }\n}\n```"]