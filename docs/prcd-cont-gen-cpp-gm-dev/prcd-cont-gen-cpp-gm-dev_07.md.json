["```cpp\nsf::SoundBuffer buffer;\nbuffer.loadFromFile(\"sound.wav\");\n\nsf::Sound sound;\nsound.setBuffer(buffer);\nsound.play();\n```", "```cpp\n// Music tracks.\nenum class MUSIC_TRACK {\n    ALT_1,\n    ALT_2,\n    ALT_3,\n    ALT_4,\n    COUNT\n};\n```", "```cpp\n// Setup the main game music.\nint trackIndex = std::rand() % static_cast<int>(MUSIC_TRACK::COUNT) + 1;\n```", "```cpp\n// Load the music track.\nm_music.openFromFile(\"../resources/music/msc_main_track_\" + std::to_string(trackIndex) + \".wav\");\n```", "```cpp\nm_music.play();\n```", "```cpp\n/**\n * Torch sound.\n */\nsf::Sound m_fireSound;\n\n/**\n * Gem pickup sound.\n */\nsf::Sound m_gemPickupSound;\n\n/**\n * Coin pickup sound.\n */\nsf::Sound m_coinPickupSound;\n\n/**\n* Key collect sound.\n*/\nsf::Sound m_keyPickupSound;\n\n/**\n * Enemy die sound.\n */\nsf::Sound m_enemyDieSound;\n\n/**\n * Player hit sound.\n */\nsf::Sound m_playerHitSound;\n```", "```cpp\n// Load all game sounds.\nint soundBufferId;\n\n// Load torch sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_fire.wav\");\nm_fireSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_fireSound.setLoop(true);\nm_fireSound.play();\n\n// Load enemy die sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_enemy_dead.wav\");\nm_enemyDieSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\n\n// Load gem pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_gem_pickup.wav\");\nm_gemPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\n\n// Load coin pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_coin_pickup.wav\");\nm_coinPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\n\n// Load key pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_key_pickup.wav\");\nm_keyPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\n\n// Load player hit sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_player_hit.wav\");\nm_playerHitSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\n```", "```cpp\n// check what type of object it was\nswitch (m_items[i]->GetType())\n{\n    case ITEM_GOLD:    \n    {\n        // Get the amount of gold.\n        int goldValue = dynamic_cast<Gold&>(item).GetGoldValue();\n\n        // Add to the gold total.\n        m_goldTotal += goldValue;\n\n        // Check if we have an active level goal regarding gold.\n        if (m_activeGoal)\n        {\n            m_goldGoal -= goldValue;\n        }\n\n        // Play gold collect sound effect\n m_coinPickupSound.play();\n    }\n    break;\n\n    case ITEM_GEM:\n    {\n        // Get the score of the gem.\n        int scoreValue = dynamic_cast<Gem&>(item).GetScoreValue();\n\n        // Add to the score total\n        m_scoreTotal += scoreValue;\n\n        // Check if we have an active level goal.\n        if (m_activeGoal)\n        --m_gemGoal;\n\n // Play the gem pickup sound\n m_gemPickupSound.play();\n    }\n    break;\n}\n```", "```cpp\n/**\n * Plays the given sound effect, with randomized parameters./\n */\nvoid PlaySound(sf::Sound& sound, sf::Vector2f position = { 0.f, 0.f });\n```", "```cpp\n// Plays the given sound effect, with randomized parameters.\nvoid Game::PlaySound(sf::Sound& sound, sf::Vector2f position)\n{\n    // Play the sound.\n    sound.play();\n}\n```", "```cpp\n// Load gem pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_gem_pickup.wav\");\nm_gemPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_gemPickupSound.setRelativeToListener(true);\n// Load coin pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_coin_pickup.wav\");\nm_coinPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_coinPickupSound.setRelativeToListener(true);\n\n// Load key pickup sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_key_pickup.wav\");\nm_keyPickupSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_keyPickupSound.setRelativeToListener(true);\n\n// Load player hit sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_player_hit.wav\");\nm_playerHitSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_playerHitSound.setRelativeToListener(true); \n\n```", "```cpp\n// Plays the given sound effect, with randomized parameters.\nvoid Game::PlaySound(sf::Sound& sound, sf::Vector2f position)\n{\n // Generate and set a random pitch.\n float pitch = (rand() % 11 + 95) / 100.f;\n sound.setPitch(pitch);\n\n    // Play the sound.\n    sound.play();\n}\n```", "```cpp\n// check what type of object it was\nswitch (m_items[i]->GetType())\n{\n    case ITEM_GOLD:\n    {\n        // Get the amount of gold.\n        int goldValue = dynamic_cast<Gold&>(item).GetGoldValue();\n\n        // Add to the gold total.\n        m_goldTotal += goldValue;\n\n        // Check if we have an active level goal regarding gold.\n        if (m_activeGoal)\n        {\n            m_goldGoal -= goldValue;\n        }\n\n // Play gold collect sound effect\n PlaySound(m_coinPickupSound);\n    }\n    break;\n\n    case ITEM_GEM:\n    {\n        // Get the score of the gem.\n        int scoreValue = dynamic_cast<Gem&>(item).GetScoreValue();\n\n        // Add to the score total\n        m_scoreTotal += scoreValue;\n\n        // Check if we have an active level goal.\n        if (m_activeGoal)\n        {\n            --m_gemGoal;\n        }\n\n // Play the gem pickup sound\n PlaySound(m_gemPickupSound);\n    }\n    break;\n}\n```", "```cpp\n// Update the player.\nm_player.Update(timeDelta, m_level);\n\n// Store the player position as it's used many times.\nsf::Vector2f playerPosition = m_player.GetPosition();\n\n// Move the audio listener to the players location.\nsf::Listener::setPosition(playerPosition.x, playerPosition.y, 0.f);\n\n// If the player is attacking create a projectile.\nif (m_player.IsAttacking())\n{\n```", "```cpp\n// Load torch sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_fire.wav\");\nm_fireSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_fireSound.setLoop(true);\nm_fireSound.setMinDistance(80.f);\nm_fireSound.play();\n\n// Load enemy die sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_enemy_dead.wav\");\nm_enemyDieSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_enemyDieSound.setMinDistance(80.f); \n\n```", "```cpp\n// Load torch sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_fire.wav\");\nm_fireSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_fireSound.setLoop(true);\nm_fireSound.setAttenuation(5.f);\nm_fireSound.setMinDistance(80.f);\nm_fireSound.play();\n\n// Load enemy die sound.\nsoundBufferId = SoundBufferManager::AddSoundBuffer(\"../resources/sounds/snd_enemy_dead.wav\");\nm_enemyDieSound.setBuffer(SoundBufferManager::GetSoundBuffer(soundBufferId));\nm_enemyDieSound.setAttenuation(5.f);\nm_enemyDieSound.setMinDistance(80.f);\n```", "```cpp\n// Plays the given sound effect, with randomized parameters.\nvoid Game::PlaySound(sf::Sound& sound, sf::Vector2f position)\n{\n    // Generate and set a random pitch.\n    float pitch = (rand() % 11 + 95) / 100.f;\n    sound.setPitch(pitch);\n\n // Set the position of the sound.\n sound.setPosition(position.x, position.y, 0.f);\n\n    // Play the sound.\n    sound.play();\n}\n```", "```cpp\n// 1 in 5 change of spawning potion.\nelse if ((std::rand() % 5) == 1)\n{\n    position.x += std::rand() % 31 - 15;\n    position.y += std::rand() % 31 - 15;\n    SpawnItem(ITEM::POTION, position);\n}\n\n// Play enemy kill sound.\nPlaySound(m_enemyDieSound, enemy.GetPosition());\n\n// Delete enemy.\nenemyIterator = m_enemies.erase(enemyIterator);\n```", "```cpp\n// Update all projectiles.\nUpdateProjectiles(timeDelta);\n\n// Find which torch is nearest the player.\nauto torches = m_level.GetTorches();\n\n// If there are torches.\nif (!torches->empty())\n{\n // Store the first torch as the current closest.\n std::shared_ptr<Torch> nearestTorch = torches->front();\n float lowestDistanceToPlayer = DistanceBetweenPoints(playerPosition, nearestTorch->GetPosition());\n\n for (std::shared_ptr<Torch> torch : *torches)\n {\n // Get the distance to the player.\n float distanceToPlayer = DistanceBetweenPoints(playerPosition, torch->GetPosition());\n if (distanceToPlayer < lowestDistanceToPlayer)\n {\n lowestDistanceToPlayer = distanceToPlayer;\n nearestTorch = torch;\n }\n }\n}\n\n// Check if the player has moved grid square.\nTile* playerCurrentTile = m_level.GetTile(playerPosition);\n```", "```cpp\n    // Get the distance to the player.\n    float distanceToPlayer = DistanceBetweenPoints(playerPosition, torch->GetPosition());\n    if (distanceToPlayer < lowestDistanceToPlayer)\n        {\n            lowestDistanceToPlayer = distanceToPlayer;\n            nearestTorch = torch;\n        }\n    }\n\n m_fireSound.setPosition(nearestTorch->GetPosition().x, nearestTorch->GetPosition().y, 0.0f);\n}\n\n// Check if the player has moved grid square.\nTile* playerCurrentTile = m_level.GetTile(playerPosition);\n```"]