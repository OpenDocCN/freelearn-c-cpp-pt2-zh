["```cpp\n// Player classes.\nenum class PLAYER_CLASS {\n  WARRIOR,\n  MAGE,\n  ARCHER,\n  THIEF,\n  COUNT\n};\n```", "```cpp\n/**\n * The player's class.\n */\nPLAYER_CLASS m_class;\n```", "```cpp\n// Generate a random class.\nm_class = static_cast<PLAYER_CLASS>(std::rand() % stat-ic_cast<int>(PLAYER_CLASS::COUNT));\n```", "```cpp\n// Load textures.\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_UP)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_walk_up.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_DOWN)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_walk_down.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_RIGHT)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_walk_right.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_LEFT)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_walk_left.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_UP)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_idle_up.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_DOWN)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_idle_down.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_RIGHT)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_idle_right.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_LEFT)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_idle_left.png\");\n```", "```cpp\n// Load textures.\nswitch (m_class)\n{\n    case PLAYER_CLASS::WARRIOR:\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_LEFT)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_walk_left.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_UP)] = TextureManager::AddTexture(\"../resources/players/warrior/spr_warrior_idle_up.png\");\n    . . .\n    break;\n\n    case PLAYER_CLASS::MAGE:\n    . . .\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_LEFT)] = TextureManag-er::AddTexture(\"../resources/players/mage/spr_mage_walk_left.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_UP)] = TextureManag-er::AddTexture(\"../resources/players/mage/spr_mage_idle_up.png\");\n    . . .\n```", "```cpp\nstd::string className;\n\n// Set class-specific variables.\nswitch (m_class)\n{\ncase PLAYER_CLASS::WARRIOR:\n  className = \"warrior\";\n  break;\n\ncase PLAYER_CLASS::MAGE:\n  className = \"mage\";\n  break;\n\ncase PLAYER_CLASS::ARCHER:\n  className = \"archer\";\n  break;\n\ncase PLAYER_CLASS::THIEF:\n  className = \"thief\";\n  break;\n}\n\n// Load textures.\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_UP)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_walk_up.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_DOWN)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_walk_down.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_RIGHT)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_walk_right.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_LEFT)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_walk_left.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_UP)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_idle_up.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_DOWN)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_idle_down.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_RIGHT)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_idle_right.png\");\nm_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_LEFT)] = TextureManager::AddTexture(\"../resources/players/\" + className + \"/spr_\" + className + \"_idle_left.png\");\n```", "```cpp\n// Returns the player's class.\nPLAYER_CLASS Player::GetClass() const\n{\n return m_class;\n}\n```", "```cpp\n// Load the correct projectile texture.\n//m_projectileTextureID = TextureManager::AddTexture(\"../resources/projectiles/spr_sword.png\");\n\nswitch (m_player.GetClass())\n{\ncase PLAYER_CLASS::ARCHER:\n m_projectileTextureID = TextureManager::AddTexture(\"../resources/projectiles/spr_arrow.png\");\n break;\ncase PLAYER_CLASS::MAGE:\n m_projectileTextureID = TextureManager::AddTexture(\"../resources/projectiles/spr_magic_ball.png\");\n break;\ncase PLAYER_CLASS::THIEF:\n m_projectileTextureID = TextureManager::AddTexture(\"../resources/projectiles/spr_dagger.png\");\n break;\ncase PLAYER_CLASS::WARRIOR:\n m_projectileTextureID = TextureManager::AddTexture(\"../resources/projectiles/spr_sword.png\");\n break;\n}\n```", "```cpp\n// Set class-specific variables.\nswitch (m_class)\n{\ncase PLAYER_CLASS::WARRIOR:\n m_strength += std::rand() % 6 + 5;\n  className = \"warrior\";\n  break;\n\ncase PLAYER_CLASS::MAGE:\n m_defense = std::rand() % 6 + 5;\n  className = \"mage\";\n  break;\n\ncase PLAYER_CLASS::ARCHER:\n m_dexterity = std::rand() % 6 + 5;\n  className = \"archer\";\n  break;\n\ncase PLAYER_CLASS::THIEF:\n m_stamina = std::rand() % 6 + 5;\n  className = \"thief\";\n  break;\n}\n```", "```cpp\n// Player traits.\nenum class PLAYER_TRAIT {\n  ATTACK,\n  DEFENSE,\n  STRENGTH,\n  DEXTERITY,\n  STAMINA,\n  COUNT\n};\n```", "```cpp\n/**\n * The number of traits that the player can have.\n */\nstatic const int PLAYER_TRAIT_COUNT = 2;\n```", "```cpp\n/**\n * An array containing the character's traits.\n */\nPLAYER_TRAIT m_traits[PLAYER_TRAIT_COUNT];\n```", "```cpp\n/**\n * Chooses 2 random traits for the character.\n */\nvoid SetRandomTraits();\n```", "```cpp\n// Chooses random traits for the character.\nvoid Player::SetRandomTraits()\n{\n    // Generate the traits.\n    for (int i = 0; i < PLAYER_TRAIT_COUNT; ++i)\n    {\n        m_traits[i] = static_cast<PLAYER_TRAIT>(std::rand() % static_cast<int>(PLAYER_TRAIT::COUNT));\n    }\n\n    // Action the traits.\n    for (PLAYER_TRAIT trait : m_traits)\n    {\n         switch (trait)\n        {\n            case PLAYER_TRAIT::ATTACK: default:\n                m_attack += rand() % 6 + 5;\n            break;\n            case PLAYER_TRAIT::ATTACK: default:\n                m_attack += std::rand() % 6 + 5;\n            break;\n            case PLAYER_TRAIT::DEFENSE:\n                m_defense += std::rand() % 6 + 5;\n            break;\n            case PLAYER_TRAIT::STRENGTH:\n                m_strength += std::rand() % 6 + 5;\n            break;\n            case PLAYER_TRAIT::DEXTERITY:\n                m_dexterity += std::rand() % 6 + 5;\n            break;\n\n        case PLAYER_TRAIT::STAMINA:\n            m_stamina += std::rand() % 6 + 5;\n        break;\n        }\n    }\n}\n```", "```cpp\n// Set random traits.\nSetRandomTraits();\n```", "```cpp\n/**\n * Gets the players current traits.\n * @return The players two current traits.\n */\nPLAYER_TRAIT* GetTraits();\n```", "```cpp\n// Return the players traits.\nPLAYER_TRAIT* Player::GetTraits()\n{\n  return &m_traits[0];\n}\n```", "```cpp\nm_traits[2] = 1;\nGetTraits()[2] = 1;\n```", "```cpp\n// Returns the number of traits the player has.\nint Player::GetTraitCount()\n{\n  return PLAYER_TRAIT_COUNT;\n}\n```", "```cpp\n// Set player traits.\nint traitCount = m_player.GetTraitCount();\n\nfor (int i = 0; i < traitCount; ++i)\n{\n\n}\n```", "```cpp\nfor (int i = 0; i < traitCount; ++i)\n{\n  switch (m_player.GetTraits()[i])\n  {\n  case PLAYER_TRAIT::ATTACK:\n    m_attackStatSprite->setTexture(TextureManager::GetTexture(m_attackStatTextureIDs[1]));\n    m_attackStatSprite->setScale(sf::Vector2f(1.2f, 1.2f));\n    break;\n\n  case PLAYER_TRAIT::DEFENSE:\n    m_defenseStatSprite->setTexture(TextureManager::GetTexture(m_defenseStatTextureIDs[1]));\n    m_defenseStatSprite->setScale(sf::Vector2f(1.2f, 1.2f));\n    break;\n\n  case PLAYER_TRAIT::STRENGTH:\n    m_strengthStatSprite->setTexture(TextureManager::GetTexture(m_strengthStatTextureIDs[1]));\n    m_strengthStatSprite->setScale(sf::Vector2f(1.2f, 1.2f));\n    break;\n\n  case PLAYER_TRAIT::DEXTERITY:\n    m_dexterityStatSprite->setTexture(TextureManager::GetTexture(m_dexterityStatTextureIDs[1]));\n    m_dexterityStatSprite->setScale(sf::Vector2f(1.2f, 1.2f));\n    break;\n\n  case PLAYER_TRAIT::STAMINA:\n    m_staminaStatSprite->setTexture(TextureManager::GetTexture(m_staminaStatTextureIDs[1]));\n    m_staminaStatSprite->setScale(sf::Vector2f(1.2f, 1.2f));\n    break;\n  }\n}\n```", "```cpp\n// Enemy humanoid types.\nenum class HUMANOID {\n  GOBLIN,\n  SKELETON,\n  COUNT\n};\n```", "```cpp\n// Default constructor.\nHumanoid::Humanoid()\n{\n    // Generate a humanoid type. (Skeleton or Goblin).\n    HUMANOID humanoidType = static_cast<HUMANOID>(std::rand() % static_cast<int>(HUMANOID::COUNT));\n    std::string enemyName;\n\n    // Set enemy specific variables.\n    switch (humanoidType)\n    {\n        case HUMANOID::GOBLIN:\n            enemyName = \"goblin\";\n        break;\n\n        case HUMANOID::SKELETON:\n            enemyName = \"skeleton\";\n        break;\n    }\n    // Load textures.\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_UP)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_walk_up.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_DOWN)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_walk_down.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_RIGHT)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_walk_right.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_LEFT)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_walk_left.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_UP)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_idle_up.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_DOWN)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_idle_down.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_RIGHT)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_idle_right.png\");\n    m_textureIDs[static_cast<int>(ANIMATION_STATE::IDLE_LEFT)] = TextureManager::AddTexture(\"../resources/enemies/\" + enemyName + \"/spr_\" + enemyName + \"_idle_left.png\");\n\n    // Set initial sprite.\n    SetSprite(TextureManager::GetTexture(m_textureIDs[static_cast<int>(ANIMATION_STATE::WALK_UP)]), false, 8, 12.f);\n}\n```", "```cpp\n// Set the value of the gem.\n// m_scoreValue = 50;\nm_scoreValue = std::rand() % 100;\n\n```", "```cpp\n// Set health value.\n// m_health = 15;\nm_health = std::rand() % 11 + 10;\n\n```", "```cpp\n// Default constructor.\nGold::Gold()\n{\n    // Randomly generate the value of the pickup.\n    this->goldValue = std::rand() % 21 + 5;\n\n    // Choose a sprite based on the gold value.\n    int textureID;\n    if (this->goldValue < 9)\n    {\n        textureID = TextureManager::AddTexture(\"../resources/loot/gold/spr_pickup_gold_small.png\");\n    }\n    else if (this->goldValue >= 16)\n    {\n        textureID = TextureManager::AddTexture(\"../resources/loot/gold/spr_pickup_gold_large.png\");\n    }\n    else\n    {\n        textureID = TextureManager::AddTexture(\"../resources/loot/gold/spr_pickup_gold_medium.png\");\n    }\n\n    // Set the sprite.\n    this->SetSprite(TextureManager::GetTexture(textureID), false, 8, 12.f);\n\n    // Set the item type.\n    m_type = ITEM::GOLD;\n}\n```", "```cpp\n// Potions.\nenum class POTION {\n  ATTACK,\n  DEFENSE,\n  STRENGTH,\n  DEXTERITY,\n  STAMINA,\n  COUNT\n};\n```", "```cpp\npublic:\n  /**\n   * Gets the potion type.\n   * @return The potion type.\n   */\n  POTION GetPotionType() const;\n\nprivate:\n  /**\n   * The potion type.\n   */\n  POTION m_potionType;\n```", "```cpp\n// Gets the potion type.\nPOTION Potion::GetPotionType() const\n{\n    return m_potionType;\n}\n```", "```cpp\n// The string for the sprite path.\nstd::string spriteFilePath;\n\n// Set the potion type.\nm_potionType = static_cast<POTION>(std::rand() % static_cast<int>(POTION::COUNT));\n```", "```cpp\n// Set stat modifiers, sprite file path, and item name.\nswitch (m_potionType)\n{\ncase POTION::ATTACK:\n  m_dexterity = std::rand() % 11 + 5;\n  spriteFilePath = \"../resources/loot/potions/spr_potion_attack.png\";\n  break;\n\ncase POTION::DEFENSE:\n  m_dexterity = std::rand() % 11 + 5;\n  spriteFilePath = \"../resources/loot/potions/spr_potion_defense.png\";\n  break;\n\ncase POTION::STRENGTH:\n  m_strength = std::rand() % 11 + 5;\n  spriteFilePath = \"../resources/loot/potions/spr_potion_strength.png\";\n  break;\n\ncase POTION::DEXTERITY:\n  m_dexterity = std::rand() % 11 + 5;\n  spriteFilePath = \"../resources/loot/potions/spr_potion_dexterity.png\";\n  break;\n\ncase POTION::STAMINA:\n  m_stamina = std::rand() % 11 + 5;\n  spriteFilePath = \"../resources/loot/potions/spr_potion_stamina.png\";\n  break;\n}\n```", "```cpp\n// Load and set sprite.\nSetSprite(TextureManager::GetTexture(TextureManager::AddTexture(spriteFilePath)), false, 8, 12.f);\n\n// Set the item type.\nm_type = ITEM::POTION;\n```", "```cpp\ncase ITEM::POTION:\n{\n  // Cast to position and get type.\n  Potion& potion = dynamic_cast<Potion&>(item);\n  POTION potionType = potion.GetPotionType();\n}\nbreak;\n}\n```", "```cpp\nswitch (potionType)\n{\ncase POTION::ATTACK:\n  m_player.SetAttack(m_player.GetAttack() + potion.GetAttack());\n  break;\n\ncase POTION::DEFENSE:\n  m_player.SetDefense(m_player.GetDefense() + potion.GetDefense());\n  break;\n\ncase POTION::STRENGTH:\n  m_player.SetStrength(m_player.GetStrength() + potion.GetStrength());\n  break;\n\ncase POTION::DEXTERITY:\n  m_player.SetDexterity(m_player.GetDexterity() + potion.GetDexterity());\n  break;\n\ncase POTION::STAMINA:\n  m_player.SetStamina(m_player.GetStamina() + potion.GetStamina());\n  break;\n}\n```"]