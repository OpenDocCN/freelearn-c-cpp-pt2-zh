["```cpp\nbool\tAttachSpriteComponent(SpriteComponent spriteCompontent);\nbool\tAttachInputComponent(InputComponent inputComponent);\n```", "```cpp\nObject object;\nobject.spriteComponent = SpriteComponent();\n```", "```cpp\n// Disable the spring on the HingeJoint component.\nHingeJoint hinge = GetComponent<HingeJoint>();\nhinge.useSpring = false;\n```", "```cpp\nvoid AttachComponent(COMPONENT_TYPE type, Component component);\n```", "```cpp\nvoid Object::AttachComponent(COMPONENT_TYPE type, Component component)\n{\n    switch (type)\n    {\n        case SOME_TYPE:\n            m_someTypeVariable = component;\n        break;\n. . .\n```", "```cpp\nint Add(int value1, int value2)\n{\n\treturn value1 + value2;\n}\n\ndouble Add(double value1, double value2)\n{\n    return value1, value2;\n}\n```", "```cpp\ntemplate<typename T>\nT Add(T value1, T value2)\n{\n    T value;\n    Value = value1 + value2;\n    return value;\n}\n```", "```cpp\ntemplate<template-parameters> function-declaration;\n```", "```cpp\ntemplate<typename T1, typename T2>\nbool AreEqual(T1 value1, T2 value2)\n{\n    return value1==value2;\n}\n```", "```cpp\ntemplate<typename T, int I>\nT IntegerMultiply(T value1)\n{\n    return value1 / value2;\n}\n```", "```cpp\nfloat floatValue = Add<float>(1.f, 2.f);\nbool isEqual = AreEqual<double, int>(5.0, 5);\nint intValue = IntegerMultiply<float, 2>(1.f);\n```", "```cpp\nint intValue = IntegerMultiply<float, 2>(1.f);\nint intValue = IntegerMultiply<float, 10>(1.f);\n```", "```cpp\nint a = 10;\nint intValue = IntegerMultiply<float, a>(1.f);\n```", "```cpp\nfloat floatValue = Add(1.f, 2.f);\nbool isEqual = AreEqual(5.0, 5);\n```", "```cpp\nfloat floatValue = Add(1.f, 2);\n```", "```cpp\ntemplate<>\nstd::string Add<std::string>(std::string value1, std::string  value2)\n{\n    std::string result;\n    result = value1 + \" \" + value2;\n    return result;\n}\n```", "```cpp\nvoid DoStuff(T parameter);\n```", "```cpp\nvoid DoStuff(T parameter);\nvoid DoStuff(Y parameter);\n```", "```cpp\n#ifndef COMPONENT_H\n#define COMPONENT_H\n\nclass Component\n{\npublic:\n\n    /**\n    * Default Constructor.\n    */\n    Component();\n\n    /**\n    * Create a virtual function so the class is polymorphic.\n    */\n    virtual void Update(float timeDelta) {};\n};\n#endif\n```", "```cpp\nprivate:\n/**\n * A collection of all components the object has attached.\n */\nstd::vector<std::shared_ptr<Component>> m_components;\n```", "```cpp\n/**\n * Attaches a component to the object.\n */\ntemplate <typename T>\nstd::shared_ptr<T> AttachComponent()\n{\n    // First we'll create the component.\n    std::shared_ptr<T> newComponent = std::make_shared<T>();\n\n    // Check that we don't already have a component of this type.\n    for (std::shared_ptr<Component>& exisitingComponent : m_components)\n    {\n        if (std::dynamic_pointer_cast<T>(exisitingComponent))\n        {\n            // If we do replace it.\n            exisitingComponent = newComponent;\n            return newComponent;\n        }\n    }\n\n    // The component is the first of its type so add it.\n    m_components.push_back(newComponent);\n\n    // Return the new component.\n    return newComponent;\n};\n```", "```cpp\n/**\n* Gets a component from the object.\n*/\ntemplate <typename T>\nstd::shared_ptr<T> GetComponent()\n{\n    // Check that we don't already have a component of this type.\n    for (std::shared_ptr<Component> exisitingComponent : m_components)\n    {\n        if (std::dynamic_pointer_cast<T>(exisitingComponent))\n        {\n            return std::dynamic_pointer_cast<T>(exisitingComponent);\n        }\n    }\n\n    return nullptr;\n};\n```", "```cpp\nm_player.AttachComponent<Component>();\nm_player.AttachComponent<Component>();\n\nstd::shared_ptr<Component> component = m_player.GetComponent<Component>();\n```", "```cpp\n#ifndef TRANSFORMCOMPONENT_H\n#define TRANSFORMCOMPONENT_H\n\n#include \"Component.h\"\n\nclass TransformComponent : public Component\n{\npublic:\n    TransformComponent();\n    void SetPosition(sf::Vector2f position);\n    sf::Vector2f&  GetPosition();\n\nprivate:\n    sf::Vector2f  m_position;\n};\n#endif\n```", "```cpp\n#include \"PCH.h\"\n#include \"TransformComponent.h\"\n\nTransformComponent::TransformComponent() :\nm_position({ 0.f, 0.f })\n{\n}\n\nvoid TransformComponent::SetPosition(sf::Vector2f position)\n{\n    m_position = position;\n}\n\nsf::Vector2f& TransformComponent::GetPosition()\n{\n    return m_position;\n}\n```", "```cpp\n. . .\n\n#ifndef OBJECT_H\n#define OBJECT_H\n\n#include \"Component.h\"\n#include \"TransformComponent.h\"\n\nclass Object\n{\npublic:\n\n. . .\n```", "```cpp\n// Add a transform component.\nAttachComponent<TransformComponent>();\n```", "```cpp\n// Get the position.\nsf::Vector2f playerPos = m_position;\n\n// Set the position.\nm_position = sf::Vector2f(100.f, 100.f);\n```", "```cpp\n// Get the transform component.\nauto transformComponent = GetComponent<TransformComponent>();\n\n// Get the position.\nsf::Vector2f position = transformComponent->GetPosition();\n\n// Set the position.\ntransformComponent->SetPosition(sf::Vector2f(100.f, 100.f));\n```", "```cpp\nsf::Vector2f position = m_player.GetComponent<TransformComponent>()->GetPosition();\n```", "```cpp\npublic:\n    virtual void Draw(sf::RenderWindow &window, float timeDelta);\n    bool SetSprite(sf::Texture& texture, bool isSmooth, int frames = 1, int frameSpeed = 0);\n    sf::Sprite& GetSprite();\n    int GetFrameCount() const;\n    bool IsAnimated();\n    void SetAnimated(bool isAnimated);\n\nprotected:\n\n    sf::Sprite m_sprite;\n\nprivate:\n\n    void NextFrame();\n\nprivate:\n\n    int m_animationSpeed;\n    bool m_isAnimated;\n    int m_frameCount;\n    int m_currentFrame;\n    int m_frameWidth;\n    int m_frameHeight;\n```", "```cpp\n#ifndef SPRITECOMPONENT_H\n#define SPRITECOMPONENT_H\n\n#include <SFML/Graphics.hpp>\n#include \"Component.h\"\n\nclass SpriteComponent : public Component\n{\npublic:\n    SpriteComponent();\n\n    virtual void Draw(sf::RenderWindow &window, float timeDelta);\n    bool SetSprite(sf::Texture& texture, bool isSmooth, int frames = 1, int frameSpeed = 0);\n    sf::Sprite& GetSprite();\n    int GetFrameCount() const;\n    bool IsAnimated();\n    void SetAnimated(bool isAnimated);\n\nprivate:\n\n    void NextFrame();\n\nprivate:\nsf::Sprite m_sprite;\n    int m_animationSpeed;\n    bool m_isAnimated;\n    int m_frameCount;\n    int m_currentFrame;\n    int m_frameWidth;\n    int m_frameHeight;\n};\n#endif\n```", "```cpp\n. . .\n\n#ifndef OBJECT_H\n#define OBJECT_H\n\n#include \"Component.h\"\n#include \"TransformComponent.h\"\n#include \"SpriteComponent.h\"\n\nclass Object\n{\npublic:\n\n. . .\n```", "```cpp\n    . . .\n\n    // Add a transform component.\n    AttachComponent<TransformComponent>();\n\n // Add a sprite component.\n AttachComponent<SpriteComponent>();\n}\n```", "```cpp\n. . .\n\n// Draw all objects.\nfor (const auto& item : m_items)\n{\n    //item->Draw(m_window, timeDelta);\n\n auto spriteComponent = item->GetComponent<SpriteComponent>();\n\n if (spriteComponent)\n {\n spriteComponent->Draw(m_window, timeDelta);\n    }\n}\n\n. . .\n```", "```cpp\n#ifndef AUDIOCOMPONENT_H\n#define AUDIOCOMPONENT_H\n\n#include \"SFML/Audio.hpp\"\n#include \"Component.h\"\n\nclass AudioComponent\n{\npublic:\n    AudioComponent();\n\n    void Play();\n    bool SetSoundBuffer(sf::SoundBuffer& buffer);\n    bool SetSoundBuffer(std::string filePath);\n\nprivate:\n    sf::Sound m_sound;\n};\n#endif\n```", "```cpp\n. . .\n\n#ifndef OBJECT_H\n#define OBJECT_H\n\n#include \"Component.h\"\n#include \"TransformComponent.h\"\n#include \"SpriteComponent.h\"\n#include \"AudioComponent.h\"\n\nclass Object\n\n. . .\n```", "```cpp\n    . . .\n\n    // Add a transform component.\n    AttachComponent<TransformComponent>();\n\n    // Add a sprite component.\n    AttachComponent<SpriteComponent>();\n\n    // Add an audio component.\n    AttachComponent<AudioComponent>();\n}\n```", "```cpp\n    . . .\n\n    // Add an audio component.\n    AttachComponent<AudioComponent>();\n\n    // Set the player's attack sound.\n    GetComponent<AudioComponent>()->SetSoundBuffer(\"../resources/sounds/snd_player_hit.wav\");\n}\n```", "```cpp\n. . .\n\n// Check for collision with player.\nif (enemyTile == playerTile)\n{\n    if (m_player.CanTakeDamage())\n    {\n        m_player.Damage(10);\n        //PlaySound(m_playerHitSound);\n        m_player.GetComponent<AudioComponent>()->Play();\n    }\n}\n\n. . .\n```"]