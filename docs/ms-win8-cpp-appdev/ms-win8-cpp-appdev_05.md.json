["```cpp\n<TextBlock Text=\"This is a sizing text\"                   \n    TextAlignment=\"Center\" VerticalAlignment=\"Center\"/>\n<Slider x:Name=\"_slider\" Grid.Row=\"1\" Minimum=\"10\" Maximum=\"100\"\n    Value=\"30\"/>\n```", "```cpp\nFontSize=\"{Binding Path=Value, ElementName=_slider}\"\n```", "```cpp\nFontSize=\"{Binding Value, ElementName=_slider}\".\n```", "```cpp\nauto binding = ref new Binding;\nbinding->Path = ref new PropertyPath(\"Value\");\nbinding->ElementName = \"_slider\";\nBindingOperations::SetBinding(_tb, TextBlock::FontSizeProperty,\nbinding);\n```", "```cpp\n<TextBox Grid.Row=\"2\" Text=\"{Binding Value, ElementName=_slider}\" \n    FontSize=\"20\" TextAlignment=\"Center\"/>\n```", "```cpp\nText=\"{Binding Value, ElementName=_slider, Mode=TwoWay}\"\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic ref class Person sealed {\n  public:\n  property Platform::String^ FirstName;\n  property Platform::String^ LastName;\n  property int BirthYear;\n};\n```", "```cpp\n<Page.Resources>\n  <local:Person FirstName=\"Albert\" LastName=\"Einstein\" \n    BirthYear=\"1879\" x:Key=\"p1\" />\n  <local:Person FirstName=\"Issac\" LastName=\"Newton\" \n    BirthYear=\"1642\" x:Key=\"p2\" />\n</Page.Resources>\n```", "```cpp\n<TextBlock Text=\"{Binding FirstName, Source={StaticResource p1}}\"\n  FontSize=\"30\" />\n<TextBlock Text=\"{Binding LastName, Source={StaticResource p1}}\"\n  FontSize=\"30\" />\n<TextBlock FontSize=\"30\" >\n  <Span>Born: </Span>\n  <Run Text=\"{Binding BirthYear, Source={StaticResource p1}}\" />\n</TextBlock>\n```", "```cpp\n<StackPanel Margin=\"4\" DataContext=\"{StaticResource p2}\">\n    <TextBlock Text=\"{Binding FirstName}\" />\n    <TextBlock Text=\"{Binding LastName}\" />\n    <TextBlock>\n        <Span>Born: </Span>\n        <Run Text=\"{Binding BirthYear}\" />\n    </TextBlock>\n</StackPanel>\n```", "```cpp\nError: BindingExpression path error: 'FirstNam' property not found on 'ElementObjectBinding.Person'. BindingExpression: Path='FirstNam' DataItem='ElementObjectBinding.Person'; target element is 'Windows.UI.Xaml.Controls.TextBlock' (Name='null'); target property is 'Text' (type 'String')\n```", "```cpp\nauto person = (Person^)this->Resources->Lookup(\"p1\");\nperson->BirthYear++;\n```", "```cpp\nproperty int BirthYear;\n```", "```cpp\n[Bindable]\npublic ref class Person sealed : INotifyPropertyChanged {\npublic:\n  property int BirthYear { \n    int get() { return _birthYear; }\n    void set(int year);\n  }\n\n  virtual event PropertyChangedEventHandler^ PropertyChanged;\n\nprivate:\n  int _birthYear;\n//...\n};\n```", "```cpp\nvoid Person::BirthYear::set(int year) {\n  _birthYear = year;\n  PropertyChanged(this, \n  ref new PropertyChangedEventArgs(\"BirthYear\"));\n}\n```", "```cpp\nproperty String^ FirstName {\n  String^ get() { return _firstName; }\n  void set(String^ name) {\n    _firstName = name;\n    PropertyChanged(this, \n    ref new PropertyChangedEventArgs(\"FirstName\"));\n  }\n}\n```", "```cpp\nauto people = ref new Vector<Person^>;\npeople->Append(ref new Person(L\"Bart\", L\"Simpson\", 1990));\npeople->Append(ref new Person(L\"Lisa\", L\"Simpson\", 1987));\npeople->Append(ref new Person(L\"Homer\", L\"Simpson\", 1960));\npeople->Append(ref new Person(L\"Marge\", L\"Simpson\", 1965));\npeople->Append(ref new Person(L\"Maggie\", L\"Simpson\", 2000));\n```", "```cpp\n_theList->ItemsSource = people;\n```", "```cpp\n<ListView ItemsSource=\"{Binding}\" >\n```", "```cpp\nDataContext = people;\n```", "```cpp\n<ListView ItemsSource=\"{Binding}\">\n  <ListView.ItemTemplate>\n    <DataTemplate>\n      <Border BorderThickness=\"0,1\" Padding=\"4\"\n        BorderBrush=\"Red\">\n          <Grid>\n            <Grid.RowDefinitions>\n              <RowDefinition Height=\"Auto\" />\n              <RowDefinition Height=\"Auto\" />\n            </Grid.RowDefinitions>\n            <Grid.ColumnDefinitions>\n              <ColumnDefinition Width=\"200\"/>\n              <ColumnDefinition Width=\"80\" />\n            </Grid.ColumnDefinitions>\n            <TextBlock Text=\"{Binding FirstName}\"\n            FontSize=\"20\" />\n            <TextBlock FontSize=\"16\" Foreground=\"Yellow\" \n            Grid.Row=\"1\" Text=\"{Binding LastName}\" />\n            <TextBlock Grid.Column=\"1\" Grid.RowSpan=\"2\">\n            <Span FontSize=\"15\">Born</Span>\n            <LineBreak />\n            <Run FontSize=\"30\" Foreground=\"Green\" \n            Text=\"{Binding BirthYear}\" />\n          </TextBlock>\n        </Grid>\n      </Border> \n    </DataTemplate>\n  </ListView.ItemTemplate>\n</ListView>\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic ref class Book sealed {\npublic:\n  property Platform::String^ BookName;\n  property double Price;\n  property Platform::String^ Author;\n  property bool IsOnSale;\n\ninternal:\n  Book(Platform::String^ bookName, Platform::String^ author,\n    double price, bool onSale) {\n    BookName = bookName;\n    Author = author;\n    Price = price;\n    IsOnSale = onSale;\n  }\n};\n```", "```cpp\n<ListView.ItemTemplate>\n  <DataTemplate>\n    <Border BorderThickness=\"1\" BorderBrush=\"Blue\" Margin=\"2\"\n    Padding=\"4\">\n      <Grid>\n        <Grid.ColumnDefinitions>\n          <ColumnDefinition Width=\"400\" />\n          <ColumnDefinition Width=\"50\" />\n        </Grid.ColumnDefinitions>\n        <TextBlock VerticalAlignment=\"Center\" \n          FontSize=\"20\">\n          <Run Text=\"{Binding BookName}\" />\n          <Span> by </Span>\n          <Run Text=\"{Binding Author}\" />\n        </TextBlock>\n        <TextBlock Grid.Column=\"1\" FontSize=\"25\">\n          <Span>$</Span>\n          <Run Text=\"{Binding Price}\" />\n        </TextBlock>\n      </Grid>\n    </Border>\n  </DataTemplate>\n</ListView.ItemTemplate>\n```", "```cpp\npublic ref class OnSaleToBrushConverter sealed : IValueConverter {\npublic:\n  virtual Object^ Convert(Object^ value, TypeName targetType,\n  Object^ parameter, String^ language);\n  virtual Object^ ConvertBack(Object^ value, TypeName\n  targetType, Object^ parameter, String^ language);\n\n  OnSaleToBrushConverter();\n\nprivate:\n  Brush^ _normalBrush;\n  Brush^ _onSaleBrush;\n};\n```", "```cpp\nOnSaleToBrushConverter::OnSaleToBrushConverter() {\n  _normalBrush = ref new SolidColorBrush(Colors::Transparent);\n  _onSaleBrush = ref new SolidColorBrush(Colors::Green);\n}\n\nObject^ OnSaleToBrushConverter::Convert(Object^ value, TypeName targetType, Object^ parameter, String^ culture) {\n  return (bool)value ? _onSaleBrush : _normalBrush;\n}\n\nObject^ OnSaleToBrushConverter::ConvertBack(Object^ value, TypeName targetType, Object^ parameter, String^ culture) {\n  throw ref new NotImplementedException();\n}\n```", "```cpp\n<Page.Resources>\n    <local:OnSaleToBrushConverter x:Key=\"sale2brush\" />\n</Page.Resources>\n```", "```cpp\n<Border BorderThickness=\"1\" BorderBrush=\"Blue\" Margin=\"2\"\n    Padding=\"4\" Background=\"{Binding IsOnSale, \n    Converter={StaticResource sale2brush}}\">\n```", "```cpp\nObject^ BooleanToVisibilityConverter::Convert(Object^ value, TypeName targetType, Object^ parameter, String^ culture) {\n  return (bool)value ? Visibility::Visible :\n    Visibility::Collapsed;\n}\n\nObject^ BooleanToVisibilityConverter::ConvertBack(Object^ value, TypeName targetType, Object^ parameter, String^ culture) {\n  return (Visibility)value == Visibility::Visible;\n}\n```", "```cpp\n<local:BooleanToVisibilityConverter x:Key=\"bool2vis\" />\n```", "```cpp\n<Image Source=\"Assets/sun.png\" VerticalAlignment=\"Center\" \n  HorizontalAlignment=\"Center\" Height=\"24\" Grid.Column=\"2\"\n  Visibility=\"{Binding IsOnSale, Converter={StaticResource\n  bool2vis}}\" />\n```", "```cpp\nprotected:\nvirtual DataTemplate^ SelectTemplateCore(Object^ item, \n  DependencyObject^ container);\n```", "```cpp\npublic ref class IncreaseAgeCommand sealed : ICommand {\npublic:\n  virtual void Execute(Platform::Object^ parameter);\n  virtual bool CanExecute(Platform::Object^ parameter);\n  virtual event EventHandler<Object^>^ CanExecuteChanged;\n\n};\n```", "```cpp\nvoid IncreaseAgeCommand::Execute(Object^ parameter)  {\n  auto person = (Person^)parameter;\n  person->BirthYear++;\n}\n\nbool IncreaseAgeCommand::CanExecute(Object^ parameter) {\n  return true;\n}\n```", "```cpp\n<Button Content=\"Inrease Birth Year With Command\" \n  CommandParameter=\"{StaticResource p1}\">\n  <Button.Command>\n    <local:IncreaseAgeCommand />\n  </Button.Command>\n</Button>\n```", "```cpp\npublic ref class ObservableObject : \n  DependencyObject, INotifyPropertyChanged {\n  public:\n    virtual event PropertyChangedEventHandler^ PropertyChanged;\n  protected:\n    virtual void OnPropertyChanged(Platform::String^ name);\n  };\n```", "```cpp\nvoid ObservableObject::OnPropertyChanged(String^ name) {\n  PropertyChanged(this, ref new PropertyChangedEventArgs(name));\n}\n```", "```cpp\npublic ref class Book : ObservableObject {\npublic:\n  property Platform::String^ BookName {\n    Platform::String^ get() { return _bookName; }\n  void set(Platform::String^ name) {\n    _bookName = name;\n    OnPropertyChanged(\"BookName\");\n  }\n}\n\nproperty bool IsOnLoan {\n  bool get() { return _isOnLoan; }\n  void set(bool isLoaned) {\n    _isOnLoan = isLoaned;\n    OnPropertyChanged(\"IsOnLoan\");\n  }\n}\n\nprivate:\n  Platform::String^ _bookName;\n  bool _isOnLoan;\n//...\n};\n```", "```cpp\npublic delegate void ExecuteCommandDelegate(Platform::Object^\n  parameter);\npublic delegate bool CanExecuteCommandDelegate(Platform::Object^\n  parameter);\n\npublic ref class DelegateCommand sealed : ICommand {\npublic:\n  DelegateCommand(ExecuteCommandDelegate^ executeHandler,\n    CanExecuteCommandDelegate^ canExecuteHandler)\n  : _executeHandler(executeHandler),\n    _canExecuteHandler(canExecuteHandler) { }\n\n  virtual bool CanExecute(Platform::Object^ parameter) {\n    if (_canExecuteHandler != nullptr)\n    return _canExecuteHandler(parameter);\n\n    return true;\n  }\n\n  virtual void Execute(Platform::Object^ parameter) {\n    if (_executeHandler != nullptr && CanExecute(parameter))\n    _executeHandler(parameter);\n  }\n\n virtual event EventHandler<Platform::Object^>^ \n    CanExecuteChanged;\n\nprivate:\n  ExecuteCommandDelegate^ _executeHandler;\n  CanExecuteCommandDelegate^ _canExecuteHandler;\n};\n```", "```cpp\npublic ref class LibraryViewModel sealed : ObservableObject {\npublic:\n  property IVector<Book^>^ Books {\n    IVector<Book^>^ get() { return _books; }\n  }\n\n  property ICommand^ LoanBookCommand {\n    ICommand^ get() { return _loanBookCommand; }\n  }\n\ninternal:\n  LibraryViewModel();\n\nprivate:\n  Platform::Collections::Vector<Book^>^ _books;\n  ICommand^ _loanBookCommand;\n};\n```", "```cpp\nLibraryViewModel::LibraryViewModel() {\n  _loanBookCommand = ref new DelegateCommand\n  (ref new ExecuteCommandDelegate([](Object^ parameter) {\n    // execute the command\n    auto book = (Book^)parameter;\n    book->IsOnLoan = true;\n  }), nullptr);\t// command is always enabled\n}\n```"]