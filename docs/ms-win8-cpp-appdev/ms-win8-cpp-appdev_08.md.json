["```cpp\nDataTransferManager::GetForCurrentView()->DataRequested\u00a0+=\u00a0\n   ref\u00a0new\u00a0TypedEventHandler<DataTransferManager^,\u00a0\n   DataRequestedEventArgs^>( this,\u00a0&MainPage::OnDataRequested);\n```", "```cpp\nvoid\u00a0MainPage::OnDataRequested(DataTransferManager^\u00a0dtm,\u00a0\n   DataRequestedEventArgs^\u00a0e)\u00a0{\n  int\u00a0index\u00a0=\u00a0_gridFlags->SelectedIndex;\n  if(index\u00a0<\u00a00)\u00a0return;\n\n  auto\u00a0data\u00a0=\u00a0e->Request->Data;\n  auto\u00a0flag\u00a0=\u00a0(CountryInfo^)_gridFlags->SelectedItem;\n\n  data->SetText(ref\u00a0new\u00a0String(L\"Flag\u00a0of\u00a0\")\u00a0+\u00a0flag->CountryName);\n  auto\u00a0bitmap\u00a0=\u00a0RandomAccessStreamReference::CreateFromUri(\n      flag->FlagUri);\n  data->SetBitmap(bitmap);\n  data->Properties->Title\u00a0=\u00a0\"Flags\u00a0of\u00a0the\u00a0world\";\n  data->Properties->Thumbnail\u00a0=\u00a0bitmap;\n}\n```", "```cpp\nif(index\u00a0<\u00a00)\u00a0{\n   e->Request->FailWithDisplayText(   \n     \"Please\u00a0select\u00a0a\u00a0flag\u00a0to\u00a0share.\");\n   return;\n}\n```", "```cpp\n<StackPanel>\n\u00a0\u00a0\u00a0\u00a0<TextBlock\u00a0Text=\"{Binding\u00a0Text}\"\u00a0FontSize=\"20\"\u00a0Margin=\"10\"/>\n\u00a0\u00a0\u00a0\u00a0<TextBlock\u00a0Text=\"{Binding\u00a0Description}\"\u00a0FontSize=\"15\"\u00a0\n          TextWrapping=\"Wrap\"\u00a0Margin=\"4\"\u00a0/>\n\u00a0\u00a0\u00a0\u00a0<Image\u00a0Margin=\"10\"\u00a0Source=\"{Binding\u00a0Source}\"\u00a0/>\n\u00a0\u00a0\u00a0\u00a0<Button\u00a0Content=\"Share\"\u00a0FontSize=\"25\"\u00a0HorizontalAlignment=\"Right\"\u00a0\n          Click=\"OnShare\"/>\n</StackPanel>\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic\u00a0ref\u00a0class\u00a0ShareViewModel\u00a0sealed\u00a0{\npublic:\n  property\u00a0Platform::String^\u00a0Text;\n  property\u00a0Windows::UI::Xaml::Media::ImageSource^\u00a0Source;\n  property\u00a0Platform::String^\u00a0Description;\n};\n```", "```cpp\nvoid\u00a0App::OnShareTargetActivated(ShareTargetActivatedEventArgs^\u00a0e) {\n  auto\u00a0page\u00a0=\u00a0ref\u00a0new\u00a0SharePage();\n  page->Activate(e);\n}\n```", "```cpp\nvoid\u00a0SharePage::Activate(ShareTargetActivatedEventArgs^\u00a0e)\u00a0{\n  _operation\u00a0=\u00a0e->ShareOperation;\n  auto\u00a0data\u00a0=\u00a0_operation->Data;\n  auto\u00a0share\u00a0=\u00a0ref\u00a0new\u00a0ShareViewModel();\n  share->Text\u00a0=\u00a0data->Properties->Title;\n  share->Description\u00a0=\u00a0data->Properties->Description;\n  auto\u00a0ref\u00a0=\u00a0data->Properties->Thumbnail;\n  if(ref\u00a0!=\u00a0nullptr)\u00a0{\n    create_task(ref->OpenReadAsync()).then(\n         [share,\u00a0this](IRandomAccessStream^\u00a0stm)\u00a0{\n      auto\u00a0bmp\u00a0=\u00a0ref\u00a0new\u00a0BitmapImage();\n      bmp->SetSource(stm);\n      share->Source\u00a0=\u00a0bmp;\n      DataContext\u00a0=\u00a0nullptr;\n    //\u00a0INotifyPropertyChanged\u00a0is\u00a0not\u00a0implemented\n      DataContext\u00a0=\u00a0share;\n    });\n  }\n  DataContext\u00a0=\u00a0share;\n  Window::Current->Content\u00a0=\u00a0this;\n  Window::Current->Activate();\n}\n```", "```cpp\nvoid\u00a0SharePage::OnShare(Object^\u00a0sender,\u00a0RoutedEventArgs^\u00a0e)\u00a0{\n  if(_operation->Data->Contains(StandardDataFormats::Bitmap))\u00a0{\n    auto\u00a0op\u00a0=\u00a0_operation;\n    create_task(_operation->Data->GetBitmapAsync()).then(\n            [op](RandomAccessStreamReference^\u00a0sref)\u00a0{\n      return\u00a0sref->OpenReadAsync();\n    }).then([op](IRandomAccessStream^\u00a0stm)\u00a0{\n      return\u00a0BitmapDecoder::CreateAsync(stm);\n    }).then([op](BitmapDecoder^\u00a0decoder)\u00a0{\n  create_task(KnownFolders::PicturesLibrary->CreateFileAsync(\n\"SharedImage.jpg\",\u00a0CreationCollisionOption::GenerateUniqueName))\n  .then([decoder](StorageFile^\u00a0file)\u00a0{\n    return\u00a0file->OpenAsync(\n             FileAccessMode::ReadWrite);}).then(\n             [decoder](IRandomAccessStream^\u00a0stm)\u00a0{\n    return\u00a0BitmapEncoder::CreateForTranscodingAsync(\n             stm,\u00a0decoder);\n    }).then([](BitmapEncoder^\u00a0encoder)\u00a0{\n      return\u00a0encoder->FlushAsync();\n    }).then([op]()\u00a0{\n      op->ReportCompleted();\n    });\n     });\n  }\n}\n```", "```cpp\n<GridView\u00a0ItemsSource=\"{Binding}\"\u00a0SelectionMode=\"Single\"\u00a0\n  x:Name=\"_gridFlags\"\u00a0Margin=\"10\"\u00a0\n     SelectionChanged=\"OnFlagSelected\">\n\u00a0\u00a0\u00a0\u00a0<GridView.ItemTemplate>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<DataTemplate>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Grid>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Grid.ColumnDefinitions>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ColumnDefinition\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ColumnDefinition\u00a0Width=\"350\"\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Grid.ColumnDefinitions>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Image\u00a0Margin=\"10,0\"\u00a0Height=\"60\"\u00a0Width=\"100\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Image.Source>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BitmapImage\u00a0UriSource=\"{Binding\u00a0FlagUri}\"\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Image.Source>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Image>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<TextBlock\u00a0Text=\"{Binding\u00a0CountryName}\"\u00a0FontSize=\"25\"\u00a0\n                Grid.Column=\"1\"\u00a0Margin=\"2\"\u00a0/>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Grid>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</DataTemplate>\n\u00a0\u00a0\u00a0\u00a0</GridView.ItemTemplate>\n</GridView>\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic\u00a0ref\u00a0class\u00a0CountryInfo\u00a0sealed\u00a0{\npublic:\n  property\u00a0Platform::String^\u00a0CountryName;\n  property\u00a0Windows::Foundation::Uri^\u00a0FlagUri;\n};\n```", "```cpp\nvoid\u00a0App::OnFileOpenPickerActivated(\n   FileOpenPickerActivatedEventArgs^\u00a0e)\u00a0{\n  auto\u00a0picker\u00a0=\u00a0ref\u00a0new\u00a0FileOpenPickerPage();\n  picker->Activate(e);\n}\n```", "```cpp\nvoid\u00a0FileOpenPickerPage::Activate(\n   FileOpenPickerActivatedEventArgs^\u00a0e)\u00a0{\n  _filePickerArgs\u00a0=\u00a0e;\n  OnNavigatedTo(nullptr);\n  Window::Current->Content\u00a0=\u00a0this;\n  Window::Current->Activate();\n}\n```", "```cpp\nvoid\u00a0FileOpenPickerPage::OnNavigatedTo(NavigationEventArgs^\u00a0e) {\n  auto\u00a0countries\u00a0=\u00a0ref\u00a0new\u00a0Vector<CountryInfo^>;\n\n  create_task(Package::Current\n      ->InstalledLocation->GetFolderAsync(\"Assets\\\\Flags\")).then(\n   [](StorageFolder^\u00a0folder)\u00a0{\n    return\u00a0folder->GetFilesAsync(\n             CommonFileQuery::DefaultQuery);\n  }).then([this,\u00a0countries](IVectorView<StorageFile^>^\u00a0files)\u00a0{\n    std::for_each(begin(files),\u00a0end(files),\u00a0\n                               [countries](StorageFile^\u00a0file)\u00a0{\n      auto\u00a0info\u00a0=\u00a0ref\u00a0new\u00a0CountryInfo;\n      info->FlagUri\u00a0=\u00a0ref\u00a0new\u00a0Uri(\n               L\"ms-appx:///Assets/Flags/\"\u00a0+\u00a0file->Name);\n      info->CountryName\u00a0=\u00a0MainPage::FlagUriToName(\n               file->Name->Data());\n      countries->Append(info);\n    });\n    DataContext\u00a0=\u00a0countries;\n  });\n}\n```", "```cpp\nvoid\u00a0FileOpenPickerPage::OnFlagSelected(Object^\u00a0sender,\u00a0\n   SelectionChangedEventArgs^\u00a0e) {\n  if(_gridFlags->SelectedIndex\u00a0<\u00a00\u00a0&&\u00a0_currentFile\u00a0!=\u00a0nullptr)\u00a0{\n     _filePickerArgs->FileOpenPickerUI->RemoveFile(\n        _currentFile);\n     _currentFile\u00a0=\u00a0nullptr;\n  }\n  else\u00a0{\n     auto\u00a0flag\u00a0=\u00a0(CountryInfo^)_gridFlags->SelectedItem;\n     create_task(StorageFile::GetFileFromApplicationUriAsync(\n         flag->FlagUri)).then([this,\u00a0flag](\n         StorageFile^\u00a0file)\u00a0{\n        AddFileResult\u00a0result\u00a0=\u00a0\n_filePickerArgs->FileOpenPickerUI->AddFile(\n         _currentFile\u00a0=\u00a0flag->CountryName,\u00a0file);\n       //\u00a0can\u00a0check\u00a0result\u00a0of\u00a0adding\u00a0the\u00a0file\n     });\n  }\n}\n```", "```cpp\nSettingsPane::GetForCurrentView()->CommandsRequested\u00a0+=\u00a0\n   ref\u00a0new\u00a0TypedEventHandler<SettingsPane^,\u00a0\n   SettingsPaneCommandsRequestedEventArgs^>(\n      this,\u00a0&MainPage::OnCommandRequested);\n```", "```cpp\nvoid\u00a0MainPage::OnCommandRequested(SettingsPane^\u00a0pane,\u00a0\nSettingsPaneCommandsRequestedEventArgs^\u00a0e)\u00a0{\n  auto\u00a0commands\u00a0=\u00a0e->Request->ApplicationCommands;\n  commands->Append(\n      ref\u00a0new\u00a0SettingsCommand(\"small\",\u00a0\"Small\u00a0Flag\u00a0Size\",\u00a0\n      ref\u00a0new\u00a0UICommandInvokedHandler(\n      this,\u00a0&MainPage::OnFlagSize)));\n  commands->Append(\n      ref\u00a0new\u00a0SettingsCommand(\"medium\",\u00a0\"Medium\u00a0Flag\u00a0Size\",\u00a0\n      ref\u00a0new\u00a0UICommandInvokedHandler(\n       this,\u00a0&MainPage::OnFlagSize)));\n  commands->Append(\n      ref\u00a0new\u00a0SettingsCommand(\"large\",\u00a0\"Large\u00a0Flag\u00a0Size\",\u00a0\n      ref\u00a0new\u00a0UICommandInvokedHandler(\n         this,\u00a0&MainPage::OnFlagSize)));\n}\n```", "```cpp\nvoid\u00a0MainPage::OnFlagSize(IUICommand^\u00a0command)\u00a0{\n  auto\u00a0id\u00a0=\u00a0safe_cast<String^>(command->Id);\n  if(id\u00a0==\u00a0\"small\")\u00a0{\n    ImageWidth\u00a0=\u00a060;\u00a0ImageHeight\u00a0=\u00a040;\n  }\n  else\u00a0if(id\u00a0==\u00a0\"medium\")\u00a0{\n    ImageWidth\u00a0=\u00a0100;\u00a0ImageHeight\u00a0=\u00a060;\n  }\n  else\u00a0{\n    ImageWidth\u00a0=\u00a0150;\u00a0ImageHeight\u00a0=\u00a0100;\n  }\n}\n```"]