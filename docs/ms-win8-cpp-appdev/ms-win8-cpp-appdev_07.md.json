["```cpp\nApplication::Current->Suspending += ref new SuspendingEventHandler(this, &MainPage::OnSuspending);\n```", "```cpp\nMainPage::MainPage() {\n  InitializeComponent();\n\n  DataContext = _review = ref new MovieReview;\n\n  Application::Current->Suspending += \n    ref new SuspendingEventHandler(\n    this, &MainPage::OnSuspending);\n}\n```", "```cpp\nvoid MainPage::OnSuspending(Object^ sender, SuspendingEventArgs^ e) {\n  ApplicationData::Current->LocalSettings->Values->\n    Insert(\"MovieName\", _review->MovieName);\n  ApplicationData::Current->LocalSettings->Values->\n    Insert(\"ReviewerName\", _review->ReviewerName);\n  ApplicationData::Current->LocalSettings->Values->\n    Insert(\"Review\", _review->Review);\n}\n```", "```cpp\nvoid MainPage::OnNavigatedTo(NavigationEventArgs^ e) {\n  auto settings = ApplicationData::Current->LocalSettings->Values;\n  if(settings->HasKey(\"MovieName\"))\n    _review->MovieName = safe_cast<String^>(\n    settings->Lookup(\"MovieName\"));\n  if(settings->HasKey(\"ReviewerName\"))\n    _review->ReviewerName = safe_cast<String^>(\n    settings->Lookup(\"ReviewerName\"));\n  if(settings->HasKey(\"Review\"))\n    _review->Review = safe_cast<String^>(\n    settings->Lookup(\"Review\"));\n}\n```", "```cpp\nApplicationData::Current->LocalSettings->Values\n    ->Insert(\"state\", (int)args->PreviousExecutionState);\n\nif (args->PreviousExecutionState == \n  ApplicationExecutionState::Terminated) {\n    // restore state\n  }\nelse if(args->PreviousExecutionState == \n  ApplicationExecutionState::ClosedByUser) {\n    // clear state\n  }\n```", "```cpp\nauto settings = ApplicationData::Current->LocalSettings->Values;\nauto state = safe_cast<ApplicationExecutionState>(\n  safe_cast<int>(settings->Lookup(\"state\")));\n  if(state == ApplicationExecutionState::Terminated) {\n    // restore state...\n```", "```cpp\n<tile>\n  <visual>\n    <binding template=\"TileWideImageAndText01\">\n      <image id=\"1\" src=\"img/image1.png\" alt=\"alt text\"/>\n      <text id=\"1\">Text Field 1</text>\n    </binding>  \n  </visual>\n</tile>\n```", "```cpp\nauto xml = TileUpdateManager::GetTemplateContent(\n    TileTemplateType::TileWideImageAndText01);\n```", "```cpp\n((XmlElement^)xml->GetElementsByTagName(\"image\")->GetAt(0))\n  ->SetAttribute(\"src\", \"assets\\\\bug.png\");\nxml->GetElementsByTagName(\"text\")->GetAt(0)->AppendChild(\n  xml->CreateTextNode(\"You have a bug!!!\"));\n```", "```cpp\nauto update = TileUpdateManager::CreateTileUpdaterForApplication();\nauto tile = ref new TileNotification(xml);\nupdate->Update(tile);\n```", "```cpp\nauto update = TileUpdateManager::CreateTileUpdaterForApplication();\nupdate->EnableNotificationQueue(true);\n```", "```cpp\nauto xml = BadgeUpdateManager::GetTemplateContent(\n  BadgeTemplateType::BadgeNumber);\nauto element = (XmlElement^)xml->SelectSingleNode(\"/badge\");\nelement->SetAttribute(\"value\", (++count).ToString());\n\nauto badge = ref new BadgeNotification(xml);\nBadgeUpdateManager::CreateBadgeUpdaterForApplication()\n  ->Update(badge);\n```", "```cpp\nusing namespace Windows::UI::StartScreen;\nauto tile = ref new SecondaryTile(\"123\", \"Sample tile\", \n  \"This is a sample tile\", \"123\", \n  TileOptions::ShowNameOnLogo, ref new Uri(\n    \"ms-appx:///assets/apple.png\"));\ncreate_task(tile->RequestCreateAsync()).then([](bool ok) {\n  // do more stuff\n});\n```", "```cpp\nif(args->Arguments != nullptr) {\n  // assume arguments are from secondary tiles only\n  rootFrame->Navigate(TypeName(DeepPage::typeid), \n    args->Arguments);\n}\n```", "```cpp\ncreate_task(PushNotificationChannelManager::\n  CreatePushNotificationChannelForApplicationAsync()).then(\n  [this](PushNotificationChannel^ channel) {\n  _channel = channel;\n```", "```cpp\n[DataContract(Namespace=\"\")]\npublic class ClientInfo {\n  [DataMember]\n  public string Uri { get; set; }\n  [DataMember]\n  public string ClientID { get; set; }\n}\n\n[ServiceContract]\npublic interface IMovieService {\n  [OperationContract, WebInvoke(UriTemplate=\"add\")]\n  void AddNewMovie(Movie movie);\n\n  [OperationContract, WebInvoke(UriTemplate=\"register\")]\n  void RegisterForPushNotification(ClientInfo info);\n}\n```", "```cpp\nprivate static void GetToken() {\n  var body = string.Format\n  (\"grant_type=client_credentials&client_id={0}&client_secret={1}\n  &scope=notify.windows.com\",\n  HttpUtility.UrlEncode(SID), HttpUtility.UrlEncode(Secret));\n\n  var client = new WebClient();\n  client.Headers.Add(\"Content-Type\", \n     \"application/x-www-form-urlencoded\");\n  string response = client.UploadString(new Uri(AuthUri), body);\n\n  dynamic data = JsonConvert.DeserializeObject(response);\n  _token = data.access_token; \n}\n```", "```cpp\n<%@ ServiceHost Language=\"C#\" Debug=\"true\" \n  Service=\"MoviesWorld.MovieService\" \n  CodeBehind=\"MovieService.svc.cs\" \n Factory= \"System.ServiceModel.Activation.WebServiceHostFactory\" %>\n```", "```cpp\nWeb::HttpRequest request;\nwstring body = wstring(L\"<ClientInfo><ClientID>123</ClientID><Uri>\") + channel->Uri->Data() + L\"</Uri></ClientInfo>\";\n\nreturn request.PostAsync(ref new Uri(\n  \"http://localhost:36595/MovieService.svc/register\"), \n  L\"text/xml\", body);\n```", "```cpp\npublic void AddNewMovie(Movie movie) {\n  _movies.Add(movie);\n  foreach(var uri in _pushData.Values) {\n    // push new movie to registered clients\n    SendPushTileNotification(uri, movie);\n  }\n}\n```", "```cpp\nprivate async Task SendPushTileNotification(string uri, Movie movie) {\n  string body =\n    \"<tile>\" +\n    \"<visual>\" +\n    \"<binding template=\\\"TileSquareText01\\\">\" +\n    \"<text id=\\\"1\\\">\" + movie.Year + \"</text>\" +\n    \"<text id=\\\"2\\\">\" + movie.Name + \"</text>\" +\n    \"</binding>\" +\n    \"</visual>\" +\n    \"</tile>\";\n\n  var client = new HttpClient();\n  var content = new StringContent(body);\n  content.Headers.ContentType = new  MediaTypeHeaderValue(\n      \"text/xml\");\n  client.DefaultRequestHeaders.Add(\"X-WNS-Type\", \"wns/tile\");\n  client.DefaultRequestHeaders.Add(\"Authorization\", \n    string.Format(\"Bearer {0}\", _token));\n  await client.PostAsync(uri, content);\n}\n```", "```cpp\nnamespace Tasks {\n  using namespace Windows::ApplicationModel::Background;\n\n  [Windows::Foundation::Metadata::WebHostHidden]\n  public ref class SimpleTask sealed : IBackgroundTask {\n  public:\n    virtual void Run(IBackgroundTaskInstance^ taskInstance);\n  };\n}\n```", "```cpp\n<Extensions>\n  <Extension Category=\"windows.backgroundTasks\" \n    EntryPoint=\"Tasks.SimpleTask\">\n    <BackgroundTasks>\n      <Task Type=\"systemEvent\" />\n    </BackgroundTasks>\n  </Extension>\n</Extensions>\n```", "```cpp\nauto trigger = ref new SystemTrigger(\n  SystemTriggerType::InternetAvailable, false);\nauto condition = ref new SystemCondition(\n  SystemConditionType::InternetAvailable);\n\nauto builder = ref new BackgroundTaskBuilder();\nbuilder->Name = \"Simple\";\nbuilder->TaskEntryPoint = \"Tasks.SimpleTask\";\nbuilder->SetTrigger(trigger);\nbuilder->AddCondition(condition);\nauto task = builder->Register();\n```", "```cpp\nauto root = ApplicationData::Current->LocalFolder;\n\ncreate_task(root->CreateFolderAsync(\"Movies\", \n  CreationCollisionOption::OpenIfExists)).then([](\n  StorageFolder^ folder) {\n    return folder->CreateFileAsync(\"movie\", \n    CreationCollisionOption::GenerateUniqueName);\n  }).then([](StorageFile^ file) {\n    // build data to write\n    return file->OpenAsync(FileAccessMode::ReadWrite);\n  }).then([this](IRandomAccessStream^ stm) {\n    wstring data = wstring(L\"<Movie><Name>\") + \n    _movieName->Text->Data() + L\"</Name><Year>\" + \n    _year->Text->Data() + L\"</Year></Movie>\";\n    auto writer = ref new DataWriter(stm);\n    writer->WriteString(ref new String(data.c_str()));\n    return writer->StoreAsync();\n  }).then([this](size_t) {\n  _movieName->Text = \"\";\n  _year->Text = \"\";\n});\n```", "```cpp\nvoid SimpleTask::Run(IBackgroundTaskInstance^ taskInstance) {\n  auto root = ApplicationData::Current->LocalFolder;\n  Platform::Agile<BackgroundTaskDeferral^> deferral(\n  taskInstance->GetDeferral());\n  create_task(root->GetFolderAsync(\"Movies\")).\n    then([](StorageFolder^ folder) {\n    return folder->GetFilesAsync(\n    CommonFileQuery::DefaultQuery);\n    }).then([](IVectorView<StorageFile^>^ files) {\n    int count = files->Size;\n    for(int i = 0; i < count; i++) {\n      auto file = files->GetAt(i);\n      // process each file...\n      file->DeleteAsync();\n    }\n  }).then([deferral](task<void> t) {\n    t.get();\n    // error handling omitted\n    deferral->Complete();\n  });\n}\n```", "```cpp\nvoid SimpleTask::Run(IBackgroundTaskInstance^ taskInstance) {\n  if(_hCancelEvent == nullptr) {\n    _hCancelEvent = ::CreateEventEx(nullptr, nullptr, 0, \n    EVENT_ALL_ACCESS);\n    taskInstance->Canceled += \n    ref new BackgroundTaskCanceledEventHandler(\n    this, &SimpleTask::OnCancelled);\n  }\n```", "```cpp\nvoid SimpleTask::OnCancelled(IBackgroundTaskInstance^ instance, \n  BackgroundTaskCancellationReason reason) {\n  ::SetEvent(_hCancelEvent);\n}\n```", "```cpp\nfor(int i = 0; i < count; i++) {\n  auto file = files->GetAt(i);\n  if(::WaitForSingleObjectEx(_hCancelEvent, 0, FALSE) == \n    WAIT_OBJECT_0)\n   // cancelled\n    break;\n    // process each file...\n    file->DeleteAsync();\n}\n```", "```cpp\n<Grid>\n  <Grid.RowDefinitions>\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition Height=\"Auto\" />\n  </Grid.RowDefinitions>\n  <MediaElement x:Name=\"_media\" />\n  <Button Content=\"Select Audio File...\" FontSize=\"30\" Margin=\"10\" \n    Click=\"OnSelectMediaFile\" />\n    <StackPanel Orientation=\"Horizontal\" Grid.Row=\"2\" \n    Margin=\"10,30\">\n    <Button Content=\"Play\" FontSize=\"40\" Click=\"OnPlay\" \n    Margin=\"8\"/>\n    <Button Content=\"Pause\" FontSize=\"40\" Click=\"OnPause\" \n    Margin=\"8\"/>\n    <Button Content=\"Stop\" FontSize=\"40\" Click=\"OnStop\" \n    Margin=\"8\"/>\n  </StackPanel>\n</Grid>\n```", "```cpp\nauto picker = ref new FileOpenPicker();\npicker->FileTypeFilter->Append(\".mp3\");\ncreate_task(picker->PickSingleFileAsync()).\n  then([this](StorageFile^ file) {\n    if(file == nullptr)\n      throw ref new OperationCanceledException();\n      return file->OpenReadAsync();\n  }).then([this](IRandomAccessStreamWithContentType^ stm) {\n  _media->SetSource(stm, \"\");\n  }).then([](task<void> t) {\n  try {\n    t.get();\n  }\n  catch(Exception^ ex) {\n  }\n});\n```", "```cpp\nvoid MainPage::OnPlay(Object^ sender, RoutedEventArgs^ e) {\n  _media->Play();\n}\n```", "```cpp\n<MediaElement x:Name=\"_media\" AudioCategory=\"BackgroundCapableMedia\"/>\n```", "```cpp\nMediaControl::PlayPressed += ref new EventHandler<Object^>(\n  this, &MainPage::OnPlayPressed);\nMediaControl::PausePressed += ref new EventHandler<Object^>(\n  this, &MainPage::OnPausePressed);\nMediaControl::StopPressed += ref new EventHandler<Object^>(\n  this, &MainPage::OnStopPressed);\nMediaControl::PlayPauseTogglePressed += \n  ref new EventHandler<Object^>(\n  this, &MainPage::OnPlayPauseTogglePressed);\n```", "```cpp\nvoid MainPage::OnPlayPressed(Object^ sender, Object^ e) {\n  Dispatcher->RunAsync(CoreDispatcherPriority::Normal, \n    ref new DispatchedHandler([this]() {\n    MediaControl::IsPlaying = true;\n    _media->Play();\n  }));\n}\n\nvoid MainPage::OnPlayPauseTogglePressed(Object^ sender, Object^ e) {\n  Dispatcher->RunAsync(CoreDispatcherPriority::Normal, \n  ref new DispatchedHandler([this]() {\n    if(_media->CurrentState == MediaElementState::Playing) {\n      MediaControl::IsPlaying = false;\n      _media->Pause();\n    }\n    else {\n      MediaControl::IsPlaying = true;\n      _media->Play();\n    }\n  }));\n}\n```", "```cpp\nwstring filename(_url->Text->Data());\nauto index = filename.rfind(L'/');\nfilename = filename.substr(index + 1);\ncreate_task(\nKnownFolders::DocumentsLibrary->CreateFileAsync(\n  ref new String(filename.c_str()), \nCreationCollisionOption::GenerateUniqueName)).then([this](\nStorageFile^ file) {\n  auto downloader = ref new BackgroundDownloader();\n  auto operation = downloader->CreateDownload(\n  ref new Uri(_url->Text), file);\n  return operation->StartAsync();\n});\n```", "```cpp\nauto async = operation->StartAsync();\nasync->Progress = \n  ref new AsyncOperationProgressHandler<DownloadOperation^, \n  DownloadOperation^>(this, &MainPage::OnDownloadProgress);\nreturn async;\n```", "```cpp\nvoid \nMainPage::OnDownloadProgress(IAsyncOperationWithProgress<DownloadOperation^, DownloadOperation^>^ operation, \n  DownloadOperation^ download) {\n  auto progress = download->Progress;\n  Dispatcher->RunAsync(CoreDispatcherPriority::Normal, \n    ref new DispatchedHandler([progress, this]() {\n    _progress->Maximum = \n  double(progress.TotalBytesToReceive >> 10);\n    _progress->Value = double(progress.BytesReceived >> 10);\n    _status->Text = progress.Status.ToString();\n  }));\n}\n```"]