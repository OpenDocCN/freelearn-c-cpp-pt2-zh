["```cpp\n<StackPanel Orientation=\"Horizontal\" >\n    <TextBlock Text=\"Name:\" FontSize=\"30\" Margin=\"0,0,10,0\"/>\n    <TextBox Width=\"130\" FontSize=\"30\"/>\n</StackPanel>\n```", "```cpp\n<Border HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"\n    BorderThickness=\"1\" BorderBrush=\"Blue\" Padding=\"10\">\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition />\n            <ColumnDefinition />\n        </Grid.ColumnDefinitions>\n        <TextBlock Text=\"Enter credentials:\" Grid.ColumnSpan=\"2\"\n            TextAlignment=\"Center\" FontSize=\"40\" Margin=\"20\"/>\n        <TextBlock Text=\"Username:\" TextAlignment=\"Right\"\n            Margin=\"10\" Grid.Row=\"1\" FontSize=\"40\"\n            VerticalAlignment=\"Bottom\"/>\n        <TextBox HorizontalAlignment=\"Left\" Width=\"250\"\n            Grid.Row=\"1\" Grid.Column=\"1\" Margin=\"10\" \n            FontSize=\"30\" />\n        <TextBlock Text=\"Password:\" TextAlignment=\"Right\"\n            Margin=\"10\" Grid.Row=\"2\" FontSize=\"40\"\n            VerticalAlignment=\"Bottom\" />\n        <PasswordBox HorizontalAlignment=\"Left\" Width=\"250\"\n            Grid.Row=\"2\" Grid.Column=\"1\" Margin=\"10\" \n            FontSize=\"30\" />\n        <Button Content=\"Login\" HorizontalAlignment=\"Stretch\"\n            Grid.Row=\"3\" FontSize=\"30\" Margin=\"10,30,10,10\"\n            Background=\"Green\" />\n        <Button Content=\"Cancel\" HorizontalAlignment=\"Center\" \n            Grid.Row=\"3\" Grid.Column=\"1\" FontSize=\"30\" \n            Margin=\"10,30,10,10\" Background=\"Red\" />\n    </Grid>\n</Border>\n```", "```cpp\n<RowDefinition\u00a0Height=\"2*\"\u00a0/>\n<RowDefinition\u00a0/>\n<RowDefinition\u00a0Height=\"3*\"\u00a0/>\n```", "```cpp\n<Canvas x:Name=\"_canvas\" >\n    <Ellipse Stroke=\"White\" StrokeThickness=\"2\" Fill=\"Red\" \n        Width=\"100\" Height=\"100\" Canvas.Left=\"50\"/>\n    <Rectangle Stroke=\"White\" StrokeThickness=\"2\" Fill=\"Green\" \n        Canvas.Left=\"100\" Canvas.Top=\"120\" Width=\"120\" \n        Height=\"120\"/>\n    <Polygon Points=\"0,0 150,60 50,-70\" Canvas.Left=\"250\" \n        Canvas.Top=\"200\" Fill=\"Blue\" Stroke=\"White\" \n        StrokeThickness=\"2\" />\n</Canvas>\n```", "```cpp\n<Canvas x:Name=\"_canvas\" PointerPressed=\"OnPointerPressed\" PointerReleased=\"OnPointerReleased\" PointerMoved=\"OnPointerMoved\">\n```", "```cpp\nvoid MainPage::OnPointerPressed(Platform::Object^ sender,\n   PointerRoutedEventArgs^ e) {\n  _element = (FrameworkElement^)e->OriginalSource;\n  if(_element == _canvas) return;\n  _lastPoint = e->GetCurrentPoint(_canvas)->Position;\n  _lastPoint.X -= (float)Canvas::GetLeft(_element);\n  _lastPoint.Y -= (float)Canvas::GetTop(_element);\n  _canvas->CapturePointer(e->Pointer);\n  e->Handled = true;\n  _isMoving = true;\n}\n```", "```cpp\nvoid MainPage::OnPointerMoved(Platform::Object^ sender,\n   PointerRoutedEventArgs^ e) {\n  if(_isMoving) {\n    auto pos = e->GetCurrentPoint(_canvas)->Position;\n    Canvas::SetLeft(_element, pos.X - _lastPoint.X);\n    Canvas::SetTop(_element, pos.Y - _lastPoint.Y);\n    e->Handled = true;\n  }\n}\n```", "```cpp\nvoid MainPage::OnPointerReleased(Platform::Object^ sender,\n   PointerRoutedEventArgs^ e) {\n  _isMoving = false;\n  _canvas->ReleasePointerCapture(e->Pointer);\n  e->Handled = true;\n}\n```", "```cpp\nvoid MainPage::OnPointerMoved(Object^ sender, \n   PointerRoutedEventArgs^ e) {\n  if(_isDrawing) {\n    auto pt = e->GetCurrentPoint(_canvas);\n    auto line = ref new Line();\n    line->X1 = _lastPoint->Position.X;\n    line->Y1 = _lastPoint->Position.Y;\n    line->X2 = pt->Position.X;\n    line->Y2 = pt->Position.Y;\n    line->StrokeThickness = 2;\n    line->Stroke = _paintBrush;\n    _canvas->Children->Append(line);\n    _lastPoint = pt;\n  }\n}\n```", "```cpp\n<Grid Background=\n    \"{StaticResource ApplicationPageBackgroundThemeBrush}\">\n    <Grid.Resources>\n        <Style TargetType=\"Rectangle\">\n            <Setter Property=\"Stroke\" Value=\"White\" />\n            <Setter Property=\"StrokeThickness\" Value=\"2\" />\n            <Setter Property=\"Margin\" Value=\"8\" />\n            <Setter Property=\"Width\" Value=\"100\" />\n            <Setter Property=\"Height\" Value=\"100\" />\n            <Setter Property=\"Fill\" Value=\"Red\" />\n        </Style>\n    </Grid.Resources>\n    <VariableSizedWrapGrid x:Name=\"_grid\"     \n        Orientation=\"Horizontal\" \n        MaximumRowsOrColumns=\"6\">\n        <Rectangle />\n        <Rectangle Fill=\"Yellow\" />\n        <Rectangle Fill=\"Purple\"/>\n        <Rectangle />\n        <Rectangle Fill=\"Blue\" VariableSizedWrapGrid.RowSpan=\"2\" \n           Height=\"200\"/>\n        <Rectangle />\n        <Rectangle Fill=\"Brown\"/>\n        <Rectangle VariableSizedWrapGrid.ColumnSpan=\"2\" \n           Width=\"200\" Fill=\"Aqua\"/>\n        <Rectangle Fill=\"LightBlue\"/>\n        <Rectangle Fill=\"Green\"/>\n        <Rectangle VariableSizedWrapGrid.ColumnSpan=\"2\"\n           VariableSizedWrapGrid.RowSpan=\"2\" Width=\"150\" \n           Height=\"150\" Fill=\"BlueViolet\"/>\n        <Rectangle Fill=\"AntiqueWhite\"/>\n        <Rectangle Fill=\"Azure\"/>\n        <Rectangle />\n        <Rectangle Fill=\"BlanchedAlmond\"/>\n        <Rectangle Fill=\"Orange\"/>\n        <Rectangle Fill=\"Crimson\"/>\n        <Rectangle Fill=\"DarkGoldenrod\"/>\n    </VariableSizedWrapGrid>\n</Grid>\n```", "```cpp\n<Button Content=\"Login\" FontSize=\"30\" />\n```", "```cpp\n<Button>\n    <StackPanel Orientation=\"Horizontal\">\n        <Image Source=\"assets/upload.png\" Stretch=\"None\" />\n        <TextBlock Text=\"Upload\" FontSize=\"35\"\n            VerticalAlignment=\"Center\" Margin=\"10,0,0,0\" />\n    </StackPanel>\n</Button>\n```", "```cpp\nnamespace ContentControlsDemo {\n  public ref class Book sealed {\n  public:\n    property Platform::String^ BookName;\n    property Platform::String^ AuthorName;\n    property double Price;\n  };\n}\n```", "```cpp\n<Page.Resources>\n    <local:Book x:Key=\"book1\" BookName=\"Windows Internals\"\n       AuthorName=\"Mark Russinovich\" Price=\"50.0\" />\n</Page.Resources>\n```", "```cpp\n<Button Content=\"{StaticResource book1}\" FontSize=\"30\"/>\n```", "```cpp\n<Button Margin=\"12\" Content=\"{StaticResource book1}\" >\n    <Button.ContentTemplate>\n        <DataTemplate>\n            <Grid>\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"Auto\" />\n                    <RowDefinition Height=\"Auto\" />\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition />\n                    <ColumnDefinition Width=\"15\" />\n                    <ColumnDefinition Width=\"Auto\" />\n                </Grid.ColumnDefinitions>\n                <TextBlock FontSize=\"35\" Foreground=\"Yellow\"\n                    Text=\"{Binding BookName}\" />\n                <TextBlock Grid.Row=\"1\" FontSize=\"25\"\n                    Foreground=\"Orange\" \n                    Text=\"{Binding AuthorName}\" />\n                <TextBlock FontSize=\"40\" Grid.Column=\"2\"\n                    Grid.RowSpan=\"2\" TextAlignment=\"Center\"\n                    VerticalAlignment=\"Center\">\n                <Span FontSize=\"25\">Just</Span><LineBreak />\n                <Span FontSize=\"40\">$</Span>\n                <Run Text=\"{Binding Price}\" FontSize=\"40\" />\n                </TextBlock>\n            </Grid>\n        </DataTemplate>\n    </Button.ContentTemplate>\n</Button>\n```", "```cpp\n    [Windows::UI::Xaml::Data::Bindable]\n    public ref class Book sealed {\n    ```", "```cpp\n<StackPanel>\n    <TextBlock Text=\"What kind of tea would you like?\"\n       FontSize=\"25\" Margin=\"4,12\"/>\n    <RadioButton Content=\"Earl Grey\" IsChecked=\"True\" Margin=\"4\" \n       FontSize=\"20\" />\n    <RadioButton Content=\"Mint\" Margin=\"4\" FontSize=\"20\"/>\n    <RadioButton Content=\"Chinese Green\" Margin=\"4\" \n       FontSize=\"20\"/>\n    <RadioButton Content=\"Japanese Green\" Margin=\"4\" \n       FontSize=\"20\"/>\n\n    <TextBlock Text=\"Select tea supplements:\" FontSize=\"25\" \n       Margin=\"4,20,4,4\" />\n    <CheckBox Content=\"Sugar\" Margin=\"4\" FontSize=\"20\" />\n    <CheckBox Content=\"Milk\" Margin=\"4\" FontSize=\"20\" />\n    <CheckBox Content=\"Lemon\" Margin=\"4\" FontSize=\"20\" />\n</StackPanel>\n```", "```cpp\n<ListBox\u00a0ScrollViewer.HorizontalScrollBarVisibility=\"Hidden\">\n```", "```cpp\nrootFrame->Navigate(TypeName(MainPage::typeid), args->Arguments)\n```", "```cpp\n<ListView.ItemsPanel>\n    <ItemsPanelTemplate>\n        <WrapGrid Orientation=\"Horizontal\"/>\n    </ItemsPanelTemplate>\n</ListView.ItemsPanel>\n```", "```cpp\n[Bindable]\npublic ref class Book sealed {\npublic:\n  property Platform::String^ BookName;\n  property Platform::String^ AuthorName;\n  property double Price;\n  };\n```", "```cpp\n<StackPanel>\n    <TextBlock Text=\"This text is in a built in font\"\n        FontFamily=\"Arial\" FontSize=\"30\" Margin=\"20\"/>\n    <TextBlock Text=\"This text is in old Star Trek style\" \n       FontFamily=\"Finalold.ttf#Final Frontier Old Style\" \n       FontSize=\"30\" Margin=\"20\" />\n</StackPanel>\n```", "```cpp\n<TextBlock>\n    <Run FontSize=\"30\" Foreground=\"Red\" Text=\"This is a run\" />\n    <LineBreak />\n    <Span Foreground=\"Yellow\" FontSize=\"20\">\n        <Run Text=\"This text is in yellow\" />\n        <LineBreak />\n        <Run Text=\"And so is this\" />\n    </Span>\n</TextBlock>\n```", "```cpp\n<Image Source=\"penguins.jpg\" />\n```", "```cpp\n_bitmap = ref new WriteableBitmap(600, 600);\n```", "```cpp\n_image->Source = _bitmap;\n```", "```cpp\n#include <robuffer.h>\n#include <wrl.h>\n\nusing namespace Microsoft::WRL;\n```", "```cpp\nComPtr<IUnknown> buffer((IUnknown*)_bitmap->PixelBuffer);\nComPtr<IBufferByteAccess> byteBuffer;\nbuffer.As(&byteBuffer);\nbyte* bits;\nbyteBuffer->Buffer(&bits);\n```", "```cpp\nRGBQUAD* bits2 = (RGBQUAD*)bits;\nRGBQUAD color = { \n   ::rand() & 0xff, ::rand() & 0xff, ::rand() & 0xff \n};\nfor(int x = 0; x < 600; x++)\n  bits2[x] = color;\n_bitmap->Invalidate();\n```"]