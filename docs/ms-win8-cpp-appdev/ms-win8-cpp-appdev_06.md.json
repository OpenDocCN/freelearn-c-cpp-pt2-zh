["```cpp\n#include <string>\n#include <vector>\n\nclass book_review {\npublic:\n  book_review(const std::wstring& name, \n  const std::wstring& content,\n    int rating);\n\n  int rating() const { return _rating; }\n  void set_rating(int rating) { _rating = rating; }\n  const std::wstring& name() const { return _name; }\n  const std::wstring& content() const { return _content; }\n\nprivate:\n  std::wstring _name;\n  std::wstring _content;\n  int _rating;\n};\n\nclass book {\npublic:\n  book(const std::wstring& name, const std::wstring& author);\n  void add_review(const book_review& review);\n  size_t reviews_count() const { return _reviews.size(); }\n  const book_review& get_review(size_t index) const { \n    return _reviews[index]; \n  }\n  const std::wstring& name() const { return _name; }\n  const std::wstring& author() const { return _author; }\n\nprivate:\n  std::wstring _name;\n  std::wstring _author;\n  std::vector<book_review> _reviews;\n};\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic ref class BookReview sealed {\npublic:\n  BookReview(Platform::String^ name, Platform::String^ content,\n    int rating);\n\n  property Platform::String^ Name { Platform::String^ get(); }\n  property Platform::String^ Content { Platform::String^ get(); }\n  property int Rating {\n    int get() { return _review.rating(); }\n    void set(int rating) { _review.set_rating(rating); }\n  }\nprivate:\n  book_review _review;\n};\n```", "```cpp\nBookReview::BookReview(String^ name, \nString^ content, int rating) : \n  _review(name->Data(), content->Data(), rating) { }\n```", "```cpp\nString^ BookReview::Name::get() {\n  return ref new String(_review.name().c_str());\n}\n\nString^ BookReview::Content::get() {\n  return ref new String(_review.content().c_str());\n}\n```", "```cpp\n[Windows::UI::Xaml::Data::BindableAttribute]\npublic ref class Book sealed {\npublic:\n  Book(Platform::String^ name, Platform::String^ author);\n  void AddReview(BookReview^ review);\n\n  property Platform::String^ Name {\n    Platform::String^ get() { \n      return ref new Platform::String(_book.name().c_str()); \n    }\n  }\n\n  property Platform::String^ Author {\n    Platform::String^ get() { \n      return ref new Platform::String(_book.author().c_str()); \n    }\n  }\n\n  property Windows::Foundation::Collections::\n    IVectorView<BookReview^>^ Reviews {\n      Windows::Foundation::Collections::\n      IVectorView<BookReview^>^ get();\n    }\n\nprivate:\n  book _book;\n  Windows::Foundation::Collections::\n    IVectorView<BookReview^>^ _reviews;\n};\n```", "```cpp\nIVectorView<BookReview^>^ Book::Reviews::get() {\n  if(_reviews == nullptr) {\n    auto reviews = ref new Vector<BookReview^>();\n    for(size_t i = 0; i < _book.reviews_count(); i++) {\n      auto review = _book.get_review(i);\n      reviews->Append(\n        ref new BookReview(\n          ref new String(review.name().c_str()), \n          ref new String(review.content().c_str()), \n      review.rating()));\n    }\n    _reviews = reviews->GetView();\n  }\n  return _reviews;\n}\n```", "```cpp\nvoid Book::AddReview(BookReview^ review) {\n  book_review br(review->Name->Data(), \n  review->Content->Data(), review->Rating);\n  _book.add_review(br);\n  _reviews = nullptr;\n}\n```", "```cpp\nusing namespace BookLibrary;\n\nauto book = ref new Book(\"Windows Internals\", \"Mark Russinovich\");\nbook->AddReview(\n    ref new BookReview(\"John Doe\", \n    \"Great book! Lots of pages!\", 4));\nbook->AddReview(\n    ref new BookReview(\"Mickey Mouse\", \n      \"Why two parts? This makes my ears spin!\", 3));\nbook->AddReview(\n    ref new BookReview(\"Clark Kent\", \n    \"Big book. Finally something to stretch the muscles!\", 5));\n```", "```cpp\n<ControlTemplate TargetType=\"ProgressBar\" x:Key=\"progTemp1\">\n  <Grid>\n    <Rectangle Fill=\"DarkBlue\" />\n    <Rectangle RadiusX=\"10\" RadiusY=\"4\" HorizontalAlignment=\"Left\" \n    Fill=\"Yellow\" Margin=\"2\" />\n  </Grid>\n</ControlTemplate>\n```", "```cpp\n<ProgressBar Value=\"30\" Height=\"40\" Margin=\"10\" \n  Template=\"{StaticResource progTemp1}\" />\n```", "```cpp\nWidth=\"{TemplateBinding Value}\"\n```", "```cpp\n<Rectangle RadiusX=\"10\" RadiusY=\"4\" x:Name=\"ProgressBarIndicator\" \n  HorizontalAlignment=\"Left\" Fill=\"Yellow\" Margin=\"2\" />\n```", "```cpp\n<ControlTemplate TargetType=\"ProgressBar\" x:Key=\"progTemp2\">\n  <Grid>\n    <Rectangle Fill=\"{TemplateBinding Background}\" />\n    <Rectangle RadiusX=\"10\" RadiusY=\"4\" \n    x:Name=\"ProgressBarIndicator\" \n    HorizontalAlignment=\"Left\" Fill=\n    \"{TemplateBinding Foreground}\" \n    Margin=\"2\"/>\n    <TextBlock HorizontalAlignment=\"Center\" Foreground=\"White\" \n      VerticalAlignment=\"Center\" >\n      <Run Text=\"{Binding Value, RelativeSource=\n      {RelativeSource TemplatedParent}}\" />\n      <Span>%</Span>\n    </TextBlock>\n  </Grid>\n</ControlTemplate>\n```", "```cpp\n<ProgressBar Value=\"30\" Height=\"40\" Margin=\"10\" FontSize=\"20\" \n  Template=\"{StaticResource progTemp2}\"  \n  Background=\"Brown\">\n  <ProgressBar.Foreground>\n    <LinearGradientBrush EndPoint=\"0,1\">\n      <GradientStop Offset=\"0\" Color=\"DarkBlue\" />\n      <GradientStop Offset=\"1\" Color=\"LightBlue\" />\n    </LinearGradientBrush>\n  </ProgressBar.Foreground>\n</ProgressBar>\n```", "```cpp\n<ControlTemplate TargetType=\"ProgressBar\" x:Key=\"progTemp4\">\n  <Grid>\n    <VisualStateManager.VisualStateGroups>\n      <VisualStateGroup x:Name=\"CommonStates\">\n        <VisualState x:Name=\"Indeterminate\">\n          <Storyboard>\n            <DoubleAnimation Storyboard.TargetProperty=\"Opacity\" \n            Storyboard.TargetName=\"IndetRect\" To=\"1\" \n              Duration=\"0:0:1\" \n            AutoReverse=\"True\" RepeatBehavior=\"Forever\"/>\n          </Storyboard>\n        </VisualState>\n        <VisualState x:Name=\"Determinate\">\n        </VisualState>\n      </VisualStateGroup>\n    </VisualStateManager.VisualStateGroups>\n    <Rectangle Fill=\"{TemplateBinding Background}\" />\n      <Rectangle RadiusX=\"10\" RadiusY=\"4\" \n      x:Name=\"ProgressBarIndicator\" HorizontalAlignment=\"Left\" \n      Fill=\"{TemplateBinding Foreground}\" Margin=\"2\"/>\n      <Rectangle x:Name=\"IndetRect\" Opacity=\"0\">\n      <Rectangle.Fill>\n        <LinearGradientBrush EndPoint=\n        \".1,.3\" SpreadMethod=\"Repeat\">\n          <GradientStop Offset=\"0\" Color=\"Yellow\" />\n          <GradientStop Offset=\"1\" Color=\"Red\" />\n        </LinearGradientBrush>\n      </Rectangle.Fill>\n    </Rectangle>\n  </Grid>\n</ControlTemplate>\n```", "```cpp\npublic ref class ProgressBarProperties sealed {\npublic:\n  static bool GetShowText(DependencyObject^ obj) {\n    return (bool)obj->GetValue(ShowTextProperty);\n  }\n\n  static void SetShowText(DependencyObject^ obj, bool value) {\n    obj->SetValue(ShowTextProperty, value);\n  }\n\n  static property DependencyProperty^ ShowTextProperty { \n    DependencyProperty^ get() { return _showTextProperty; }\n  }\n\nprivate:\n  static DependencyProperty^ _showTextProperty;\n};\n```", "```cpp\nDependencyProperty^ ProgressBarProperties::_showTextProperty = \n  DependencyProperty::RegisterAttached(L\"ShowText\", \n  TypeName(bool::typeid), \n  TypeName(ProgressBarProperties::typeid), \n  ref new PropertyMetadata(false));\n```", "```cpp\n<TextBlock HorizontalAlignment=\"Center\" Foreground=\"White\" \n  VerticalAlignment=\"Center\" \n Visibility=\"{Binding (local:ProgressBarProperties.ShowText), \n RelativeSource={RelativeSource TemplatedParent}, \n Converter={StaticResource bool2vis}}\">\n  <Run Text=\"{Binding Value, RelativeSource=\n    {RelativeSource TemplatedParent}}\" />\n  <Span>%</Span>\n</TextBlock>\n```", "```cpp\nDECLARE_AP(TextForeground, Windows::UI::Xaml::Media::Brush^);\n```", "```cpp\nDEFINE_AP(TextForeground, Brush, ProgressBarProperties, nullptr);\n```", "```cpp\nForeground=\"{TemplateBinding \n  local:ProgressBarProperties.TextForeground}\"\n```", "```cpp\npublic ref class ColorPicker sealed {\npublic:\n//\u2026\n  property Windows::UI::Color SelectedColor {\n    Windows::UI::Color get() {\n   \t   return (Windows::UI::Color)GetValue(SelectedColorProperty); \n    }\n    void set(Windows::UI::Color value) {\n      SetValue(SelectedColorProperty, value); }\n  }\n\n  property DependencyProperty^ SelectedColorProperty { \n    DependencyProperty^ get() { return _selectedColorProperty; }\n  }\n\nprivate:\n  static DependencyProperty^ _selectedColorProperty;\n};\n```", "```cpp\nDependencyProperty^ ColorPicker::_selectedColorProperty = \n  DependencyProperty::Register(\n  \"SelectedColor\", TypeName(Color::typeid), \n  TypeName(ColorPicker::typeid),\n  ref new PropertyMetadata(Colors::Black, \n  ref new PropertyChangedCallback(\n  &ColorPicker::OnSelectedColorChanged)));\n```", "```cpp\nDECLARE_DP(Red, int);\nDECLARE_DP(Green, int);\nDECLARE_DP(Blue, int);\n```", "```cpp\nDEFINE_DP_EX(Red, int, ColorPicker, 0, OnRGBChanged);\nDEFINE_DP_EX(Green, int, ColorPicker, 0, OnRGBChanged);\nDEFINE_DP_EX(Blue, int, ColorPicker, 0, OnRGBChanged);\n```", "```cpp\nvoid ColorPicker::OnRGBChanged(DependencyObject^ obj, \n  DependencyPropertyChangedEventArgs^ e) {\n  ((ColorPicker^)obj)->OnRGBChangedInternal(e);\n}\n\nvoid ColorPicker::OnRGBChangedInternal(\n  DependencyPropertyChangedEventArgs^ e) {\n  auto color = SelectedColor;\n  auto value = safe_cast<int>(e->NewValue);\n  if(e->Property == RedProperty)\n    color.R = value;\n  else if(e->Property == GreenProperty)\n    color.G = value;\n  else\n    color.B = value;\n  SelectedColor = color;\n}\n```", "```cpp\nvoid ColorPicker::OnSelectedColorChanged(DependencyObject^ obj, \nDependencyPropertyChangedEventArgs^ e) {\n  ((ColorPicker^)obj)->OnSelectedColorChangedInternal(\n  safe_cast<Color>(e->NewValue));\n}\n\nvoid ColorPicker::OnSelectedColorChangedInternal(Color newColor) {\n  Red = newColor.R;\n  Green = newColor.G;\n  Blue = newColor.B;\n}\n```", "```cpp\n<UserControl\n  x:Class=\"UserControlLibrary.ColorPicker\"\n  x:Name=\"uc\">\n  <UserControl.Resources>\n  </UserControl.Resources>\n  <Grid>\n    <Grid.RowDefinitions>\n      <RowDefinition Height=\"Auto\" />\n      <RowDefinition Height=\"Auto\" />\n      <RowDefinition Height=\"Auto\" />\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition />\n      <ColumnDefinition Width=\"150\" />\n    </Grid.ColumnDefinitions>\n    <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      Value=\"{Binding Red, ElementName=uc, Mode=TwoWay}\"/>\n      <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      Value=\"{Binding Green, ElementName=uc, Mode=TwoWay}\" \n      Grid.Row=\"1\"/>\n    <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      Value=\"{Binding Blue, ElementName=uc, Mode=TwoWay}\" \n      Grid.Row=\"2\"/>\n    <Rectangle Grid.Column=\"1\" Grid.RowSpan=\"3\" Margin=\"10\" \n      Stroke=\"Black\" StrokeThickness=\"1\">\n      <Rectangle.Fill>\n        <SolidColorBrush Color=\"{Binding SelectedColor, \n        ElementName=uc}\" />\n      </Rectangle.Fill>\n    </Rectangle>\n  </Grid>\n</UserControl>\n```", "```cpp\nevent EventHandler<Windows::UI::Color>^ SelectedColorChanged;\n```", "```cpp\nvoid ColorPicker::OnSelectedColorChangedInternal(Color newColor) {\n  Red = newColor.R;\n  Green = newColor.G;\n  Blue = newColor.B;\n\n SelectedColorChanged(this, newColor);\n}\n```", "```cpp\n<StackPanel VerticalAlignment=\"Center\">\n  <Border Margin=\"10\" Padding=\"6\" Width=\"500\" BorderBrush=\"White\" \n    BorderThickness=\"2\" >\n  <controls:ColorPicker SelectedColorChanged=\"OnColorChanged\" />\n  </Border>\n  <TextBlock FontSize=\"30\" HorizontalAlignment=\"Center\">\n    <Span>Color: #</Span>\n    <Run x:Name=\"_color\" />\n  </TextBlock>\n</StackPanel>\n```", "```cpp\nvoid MainPage::OnColorChanged(Object^ sender, Color color) {\n  wstringstream ss;\n  ss.fill(L'0');\n  ss << hex << uppercase << setw(2) << color.R << setw(2) << \n  color.G << setw(2) << color.B;\n  _color->Text = ref new String(ss.str().c_str());\n}\n```", "```cpp\n<Style TargetType=\"local:ColorPicker\">\n  <Setter Property=\"Template\">\n    <Setter.Value>\n      <ControlTemplate TargetType=\"local:ColorPicker\">\n        <Border\n          Background=\"{TemplateBinding Background}\"\n          BorderBrush=\"{TemplateBinding BorderBrush}\"\n          BorderThickness=\"{TemplateBinding BorderThickness}\">\n        </Border>\n      </ControlTemplate>\n    </Setter.Value>\n  </Setter>\n</Style>\n```", "```cpp\n<ControlTemplate TargetType=\"local:ColorPicker\">\n  <Border\n    Background=\"{TemplateBinding Background}\"\n    BorderBrush=\"{TemplateBinding BorderBrush}\"\n    BorderThickness=\"{TemplateBinding BorderThickness}\">\n    <Grid>\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n      </Grid.RowDefinitions>\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition />\n        <ColumnDefinition Width=\"150\" />\n      </Grid.ColumnDefinitions>\n      <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      x:Name=\"PART_Red\"/>\n      <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      x:Name=\"PART_Green\" Grid.Row=\"1\"/>\n      <Slider Maximum=\"255\" Margin=\"4\" TickFrequency=\"20\" \n      x:Name=\"PART_Blue\" Grid.Row=\"2\"/>\n      <Rectangle Grid.Column=\"1\" Grid.RowSpan=\"3\" Margin=\"10\" \n      Stroke=\"Black\" StrokeThickness=\"1\">\n        <Rectangle.Fill>\n          <SolidColorBrush x:Name=\"PART_Color\" />\n        </Rectangle.Fill>\n      </Rectangle>\n    </Grid>\n  </Border>\n</ControlTemplate>\n```", "```cpp\nvoid ColorPicker::BindSlider(String^ name, String^ propertyName) {\n  auto slider = (RangeBase^)GetTemplateChild(name);\n  if(slider != nullptr) {\n    auto binding = ref new Binding;\n    binding->Source = this;\n    binding->Path = ref new PropertyPath(propertyName);\n    binding->Mode = BindingMode::TwoWay;\n    BindingOperations::SetBinding(slider, \n    RangeBase::ValueProperty, binding);\n  }\n}\n```", "```cpp\nvoid ColorPicker::OnApplyTemplate() {\n  BindSlider(\"PART_Red\", \"Red\");\n  BindSlider(\"PART_Green\", \"Green\");\n  BindSlider(\"PART_Blue\", \"Blue\");\n  auto color = (SolidColorBrush^)GetTemplateChild(\"PART_Color\");\n  if(color != nullptr) {\n    auto binding = ref new Binding;\n    binding->Source = this;\n    binding->Path = ref new PropertyPath(L\"SelectedColor\");\n    BindingOperations::SetBinding(color, \n    SolidColorBrush::ColorProperty, binding);\n  }\n}\n```"]