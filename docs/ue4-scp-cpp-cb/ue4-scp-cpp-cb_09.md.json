["```cpp\n    PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \"SlateCore\" });\n    ```", "```cpp\n    ACustomHUDGameMode();\n    ```", "```cpp\n    ACustomHUDGameMode::ACustomHUDGameMode()\n    :AGameMode()\n    {\n      HUDClass = ACustomHUD::StaticClass();\n    }\n    ```", "```cpp\n    public:\n    virtual void DrawHUD() override;\n    ```", "```cpp\n    voidACustomHUD::DrawHUD()\n    {\n      Super::DrawHUD();\n      Canvas->DrawText(GEngine->GetSmallFont(), TEXT(\"Test string to be printed to screen\"), 10, 10);\n      FCanvasBoxItemProgressBar(FVector2D(5, 25), FVector2D(100, 5));\n      Canvas->DrawItem(ProgressBar);\n      DrawRect(FLinearColor::Blue, 5, 25, 100, 5);\n    }\n    ```", "```cpp\n    floatDrawText(constUFont* InFont, constFString&InText, float X, float Y, float XScale = 1.f, float YScale = 1.f, constFFontRenderInfo&RenderInfo = FFontRenderInfo());\n    ```", "```cpp\n    public:\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    void ACustomHUDPlayerController::BeginPlay()\n    {\n      Super::BeginPlay();\n      TSharedRef<SVerticalBox> widget = SNew(SVerticalBox)\n      + SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(SButton)\n        .Content()\n        [\n          SNew(STextBlock)\n          .Text(FText::FromString(TEXT(\"Test button\")))\n        ]\n      ];\n      GEngine->GameViewport->AddViewportWidgetForPlayer(GetLocalPlayer(),widget, 1);\n    }\n    ```", "```cpp\n    #include \"SlateBasics.h\"\n    #include \"SButton.h\"\n    #include \"STextBlock.h\"\n    ```", "```cpp\n    ASlateHUDGameMode();\n    ```", "```cpp\n    ASlateHUDGameMode::ASlateHUDGameMode()\n    :Super()\n    {\n      PlayerControllerClass = ACustomHUDPlayerController::StaticClass();\n    }\n    ```", "```cpp\n    #include \"CustomHudPlayerController.h\"\n    ```", "```cpp\n    virtual void BeginPlay() override;\n    ```", "```cpp\n    Super::BeginPlay();\n    TSharedRef<SVerticalBox> widget = SNew(SVerticalBox)\n    + SVerticalBox::Slot()\n    .HAlign(HAlign_Center)\n    .VAlign(VAlign_Center)\n    [\n      SNew(SButton)\n      .Content()\n      [\n        SNew(STextBlock)\n        .Text(FText::FromString(TEXT(\"Test button\")))\n      ]\n    ];\n    GEngine->GameViewport->AddViewportWidgetForPlayer(GetLocalPlayer(), widget, 1);\n    ```", "```cpp\n    ScalingUIGameMode();\n    ```", "```cpp\n    AScalingUIGameMode::AScalingUIGameMode()\n    :AGameMode()\n    {\n      PlayerControllerClass = ACustomHUDPlayerController::StaticClass();\n    }\n    ```", "```cpp\n    [/Script/Engine.UserInterfaceSettings]\n    RenderFocusRule=NavigationOnly\n    DefaultCursor=None\n    TextEditBeamCursor=None\n    CrosshairsCursor=None\n    GrabHandCursor=None\n    GrabHandClosedCursor=None\n    SlashedCircleCursor=None\n    ApplicationScale=1.000000\n    UIScaleRule=ShortestSide\n    CustomScalingRuleClass=None\n    UIScaleCurve=(EditorCurveData=(PreInfinityExtrap=RCCE_Constant,PostInfinityExtrap=RCCE_Constant,Keys=((Time=480.000000,Value=0.444000),(Time=720.000000,Value=1.000000),(Time=1080.000000,Value=1.000000),(Time=8640.000000,Value=8.000000)),DefaultValue=340282346638528859811704183484516925440.000000),ExternalCurve=None)\n    ```", "```cpp\n    [Section Name]\n    Key=Value\n    ```", "```cpp\n    UPROPERTY()\n    FTimerHandle HUDToggleTimer;\n    ```", "```cpp\n    TSharedPtr<SVerticalBox> widget;\n    ```", "```cpp\n    void AToggleHUDGameMode::BeginPlay()\n    {\n      Super::BeginPlay();\n      widget = SNew(SVerticalBox)\n      + SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(SButton)\n        .Content()\n        [\n          SNew(STextBlock)\n          .Text(FText::FromString(TEXT(\"Test button\")))\n        ]\n      ];\n      GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), widget.ToSharedRef(), 1);\n\n      GetWorld()->GetTimerManager().SetTimer(HUDToggleTimer, FTimerDelegate::CreateLambda\n      ([this] \n      {\n        if (this->widget->GetVisibility().IsVisible())\n        {\n          this->widget->SetVisibility(EVisibility::Hidden);\n        }\n        else\n        {\n          this->widget->SetVisibility(EVisibility::Visible);\n        }\n      }), 5, true);\n    }\n    ```", "```cpp\n    void AToggleHUDGameMode::EndPlay(constEEndPlayReason::Type EndPlayReason)\n    {\n      Super::EndPlay(EndPlayReason);\n      GetWorld->GetTimerManager().ClearTimer(HUDToggleTimer);\n    }\n    ```", "```cpp\n    private:\n    TSharedPtr<SVerticalBox> Widget;\n    TSharedPtr<STextBlock> ButtonLabel;\n    ```", "```cpp\n    public:\n    virtual void BeginPlay() override;\n    FReplyButtonClicked();\n    ```", "```cpp\n    void AClickEventGameMode::BeginPlay()\n    {\n      Super::BeginPlay();\n      Widget = SNew(SVerticalBox)\n      + SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(SButton)\n        .OnClicked(FOnClicked::CreateUObject(this, &AClickEventGameMode::ButtonClicked))\n        .Content()\n        [\n          SAssignNew(ButtonLabel, STextBlock)\n          .Text(FText::FromString(TEXT(\"Click me!\")))\n        ]\n      ];\n      GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), Widget.ToSharedRef(), 1);\n      GetWorld()->GetFirstPlayerController()->bShowMouseCursor = true;\n      GEngine->GetFirstLocalPlayerController(GetWorld())->\n      SetInputMode(FInputModeUIOnly().SetLockMouseToViewport(false).SetWidgetToFocus(Widget));\n    }\n    ```", "```cpp\n    FReplyAClickEventGameMode::ButtonClicked()\n    {\n      ButtonLabel->SetText(FString(TEXT(\"Clicked!\")));\n      returnFReply::Handled();\n    }\n    ```", "```cpp\n    /** The delegate to execute when the button is clicked */\n    FOnClickedOnClicked;\n    ```", "```cpp\n    private:\n    TSharedPtr<SVerticalBox> Widget;\n    ```", "```cpp\n    public:\n    virtual void BeginPlay() override;\n    FTextGetButtonLabel() const ;\n    ```", "```cpp\n    voidAClickEventGameMode::BeginPlay()\n    {\n      Super::BeginPlay();\n      Widget = SNew(SVerticalBox)\n      + SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(SButton)\n        .Content()\n        [\n          SNew(STextBlock)\n          .Text( TAttribute<FText>::Create(TAttribute<FText>::FGetter::CreateUObject(this, &AAttributeGameMode::GetButtonLabel)))\n        ]\n      ];\n      GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), Widget.ToSharedRef(), 1);\n    }\n    ```", "```cpp\n    FTextAAttributeGameMode::GetButtonLabel() const\n    {\n      FVectorActorLocation = GetWorld()->GetFirstPlayerController()->GetPawn()->GetActorLocation();\n      returnFText::FromString(FString::Printf(TEXT(\"%f, %f, %f\"), ActorLocation.X, ActorLocation.Y, ActorLocation.Z));\n    }\n    ```", "```cpp\n    .Text( TAttribute<FText>::Create(TAttribute<FText>::FGetter::CreateUObject(this, &AAttributeGameMode::GetButtonLabel)))\n    ```", "```cpp\n    template<typenameObjectType>\n    classTAttribute\n    {\n      public:\n      /**\n       * Attribute 'getter' delegate\n       *\n       * ObjectTypeGetValue() const\n       *\n       * @return The attribute's value\n       */\n      DECLARE_DELEGATE_RetVal(ObjectType, FGetter);\n      (\u2026)\n    }\n    ```", "```cpp\n    #pragma once\n    #include \"SlateBasics.h\"\n    #include \"SlateExtras.h\"\n    classFCookbookStyle\n    {\n      public:\n      static void Initialize();\n      static void Shutdown();\n      static void ReloadTextures();\n      staticconstISlateStyle& Get();\n      staticFNameGetStyleSetName();\n      private:\n      staticTSharedRef<class FSlateStyleSet> Create();\n      private:\n      staticTSharedPtr<class FSlateStyleSet>CookbookStyleInstance;\n    };\n    ```", "```cpp\n    #include \"UE4Cookbook.h\"\n    #include \"CookbookStyle.h\"\n    #include \"SlateGameResources.h\"\n    TSharedPtr<FSlateStyleSet>FCookbookStyle::CookbookStyleInstance = NULL;\n    voidFCookbookStyle::Initialize()\n    {\n      if (!CookbookStyleInstance.IsValid())\n      {\n        CookbookStyleInstance = Create();\n        FSlateStyleRegistry::RegisterSlateStyle(*CookbookStyleInstance);\n      }\n    }\n\n    voidFCookbookStyle::Shutdown()\n    {\n      FSlateStyleRegistry::UnRegisterSlateStyle(*CookbookStyleInstance);\n      ensure(CookbookStyleInstance.IsUnique());\n      CookbookStyleInstance.Reset();\n    }\n    FNameFCookbookStyle::GetStyleSetName()\n    {\n      staticFNameStyleSetName(TEXT(\"CookbookStyle\"));\n      returnStyleSetName;\n    }\n    #define IMAGE_BRUSH(RelativePath, ... ) FSlateImageBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define BOX_BRUSH(RelativePath, ... ) FSlateBoxBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define BORDER_BRUSH(RelativePath, ... ) FSlateBorderBrush( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".png\"), __VA_ARGS__ )\n    #define TTF_FONT(RelativePath, ... ) FSlateFontInfo( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".ttf\"), __VA_ARGS__ )\n    #define OTF_FONT(RelativePath, ... ) FSlateFontInfo( FPaths::GameContentDir() / \"Slate\"/ RelativePath + TEXT(\".otf\"), __VA_ARGS__ )\n\n    TSharedRef<FSlateStyleSet>FCookbookStyle::Create()\n    {\n      TSharedRef<FSlateStyleSet>StyleRef = FSlateGameResources::New(FCookbookStyle::GetStyleSetName(), \"/Game/Slate\", \"/Game/Slate\");\n      FSlateStyleSet& Style = StyleRef.Get();\n      Style.Set(\"NormalButtonBrush\", \n      FButtonStyle().\n      SetNormal(BOX_BRUSH(\"Button\", FVector2D(54,54),FMargin(14.0f/54.0f))));\n      Style.Set(\"NormalButtonText\",\n      FTextBlockStyle(FTextBlockStyle::GetDefault())\n      .SetColorAndOpacity(FSlateColor(FLinearColor(1,1,1,1))));\n      returnStyleRef;\n    }\n    #undef IMAGE_BRUSH\n    #undef BOX_BRUSH\n    #undef BORDER_BRUSH\n    #undef TTF_FONT\n    #undef OTF_FONT\n\n    voidFCookbookStyle::ReloadTextures()\n    {\n      FSlateApplication::Get().GetRenderer()->ReloadTextureResources();\n    }\n    constISlateStyle&FCookbookStyle::Get()\n    {\n      return *CookbookStyleInstance;\n    }\n    ```", "```cpp\n    #pragma once\n    #include \"GameFramework/GameMode.h\"\n    #include \"StyledHUDGameMode.generated.h\"\n    /**\n     * \n     */\n    UCLASS()\n    class UE4COOKBOOK_API AStyledHUDGameMode : public AGameMode\n    {\n      GENERATED_BODY()\n      TSharedPtr<SVerticalBox> Widget;\n      public:\n      virtual void BeginPlay() override;\n    };\n    ```", "```cpp\n    #include \"UE4Cookbook.h\"\n    #include \"CookbookStyle.h\"\n    #include \"StyledHUDGameMode.h\"\n    voidAStyledHUDGameMode::BeginPlay()\n    {\n      Super::BeginPlay();\n      Widget = SNew(SVerticalBox)\n      + SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(SButton)\n        .ButtonStyle(FCookbookStyle::Get(), \"NormalButtonBrush\")\n        .ContentPadding(FMargin(16))\n        .Content()\n        [\n          SNew(STextBlock)\n          .TextStyle(FCookbookStyle::Get(), \"NormalButtonText\")\n          .Text(FText::FromString(\"Styled Button\"))\n        ]\n      ];\n      GEngine->GameViewport->AddViewportWidgetForPlayer(GetWorld()->GetFirstLocalPlayerFromController(), Widget.ToSharedRef(), 1);\n    }\n    ```", "```cpp\n    class UE4CookbookGameModule : public FDefaultGameModuleImpl\n    {\n      virtual void StartupModule() override\n      {\n        FCookbookStyle::Initialize();\n      };\n      virtual void ShutdownModule() override\n      {\n        FCookbookStyle::Shutdown();\n      };\n    };\n    ```", "```cpp\n    .ButtonStyle(FCookbookStyle::Get(), \"NormalButtonBrush\")\n    .TextStyle(FCookbookStyle::Get(), \"NormalButtonText\")\n    ```", "```cpp\n    PrivateDependencyModuleNames.AddRange(new string[] { \"Slate\", \"SlateCore\", \"UMG\" });\n    ```", "```cpp\n    #pragma once\n    #include \"SCompoundWidget.h\"\n    class UE4COOKBOOK_API SCustomButton : public SCompoundWidget\n    {\n      SLATE_BEGIN_ARGS(SCustomButton)\n      : _Label(TEXT(\"Default Value\"))\n      , _ButtonClicked()\n      {}\n      SLATE_ATTRIBUTE(FString, Label)\n      SLATE_EVENT(FOnClicked, ButtonClicked)\n      SLATE_END_ARGS()\n      public:\n      void Construct(constFArguments&InArgs);\n      TAttribute<FString> Label;\n      FOnClickedButtonClicked;\n    };\n    ```", "```cpp\n    #include \"UE4Cookbook.h\"\n    #include \"CustomButton.h\"\n    voidSCustomButton::Construct(constFArguments&InArgs)\n    {\n      Label = InArgs._Label;\n      ButtonClicked = InArgs._ButtonClicked;\n      ChildSlot.VAlign(VAlign_Center)\n      .HAlign(HAlign_Center)\n      [SNew(SButton)\n      .OnClicked(ButtonClicked)\n      .Content()\n      [\n      SNew(STextBlock)\n      .Text_Lambda([this] {return FText::FromString(Label.Get()); })\n      ]\n      ];\n    }\n    ```", "```cpp\n    #include \"Components/Widget.h\"\n    #include \"CustomButton.h\"\n    #include \"SlateDelegates.h\"\n    ```", "```cpp\n    DECLARE_DYNAMIC_DELEGATE_RetVal(FString, FGetString);\n    DECLARE_DYNAMIC_MULTICAST_DELEGATE(FButtonClicked);\n    ```", "```cpp\n    protected:\n    TSharedPtr<SCustomButton>MyButton;\n    virtualTSharedRef<SWidget>RebuildWidget() override;\n    ```", "```cpp\n    public:\n    UCustomButtonWidget();\n    UPROPERTY(BlueprintAssignable)\n    FButtonClickedButtonClicked;\n    FReplyOnButtonClicked();\n    UPROPERTY(BlueprintReadWrite, EditAnywhere)\n    FString Label;\n    UPROPERTY()\n    FGetStringLabelDelegate;\n    virtual void SynchronizeProperties() override;\n    ```", "```cpp\n    #include \"UE4Cookbook.h\"\n    #include \"CustomButtonWidget.h\"\n    TSharedRef<SWidget>UCustomButtonWidget::RebuildWidget()\n    {\n      MyButton = SNew(SCustomButton)\n      .ButtonClicked(BIND_UOBJECT_DELEGATE(FOnClicked, OnButtonClicked));\n      returnMyButton.ToSharedRef();\n    }\n    UCustomButtonWidget::UCustomButtonWidget()\n    :Label(TEXT(\"Default Value\"))\n    {\n    }\n\n    FReplyUCustomButtonWidget::OnButtonClicked()\n    {\n      ButtonClicked.Broadcast();\n      returnFReply::Handled();\n    }\n    voidUCustomButtonWidget::SynchronizeProperties()\n    {\n      Super::SynchronizeProperties();\n      TAttribute<FString>LabelBinding = OPTIONAL_BINDING(FString, Label);\n      MyButton->Label = LabelBinding;\n    }\n    ```"]