["```cpp\n    UCLASS()\n    class CH6_API AWarrior : public ACharacter\n    {\n      GENERATED_BODY()\n    };\n    ```", "```cpp\n    void AWarrior::SetupPlayerInputComponent(UInputComponent* Input)\n    {\n      check(Input);\n      Input->BindAxis( \"Forward\", this, &AWarrior::Forward );\n    }\n    ```", "```cpp\n    void AWarrior::Forward( float amount )\n    {\n      if( Controller && amount )\n      {\n        // Moves the player forward by an amount in forward direction\n        AddMovementInput(GetActorForwardVector(), amount );\n      }\n    }\n    ```", "```cpp\n    void AWarrior::SetupPlayerInputComponent( UInputComponent* Input )\n    {\n      Input->BindAxis( \"Forward\", this, &AWarrior::Forward );\n      Input->BindAxis( \"Back\", this, &AWarrior::Back );\n      Input->BindAxis( \"Right\", this, &AWarrior::Right );\n      Input->BindAxis( \"Left\", this, &AWarrior::Left );\n    }\n    ```", "```cpp\n    void AWarrior::Forward( float amount ) {\n      // We use a += of the amount added so that\n      // when the other function modifying .Y\n      // (::Back()) affects lastInput, it won't\n      // overwrite with 0's\n      lastInput.Y += amount;\n    }\n    void AWarrior::Back( float amount ) {\n      lastInput.Y += -amount;\n    }\n    void AWarrior::Right( float amount ) {\n      lastInput.X += amount;\n    }\n    void AWarrior::Left( float amount ) {\n      lastInput.X += -amount;\n    }\n    ```", "```cpp\n    void AWarrior::Tick( float DeltaTime ) {\n      Super::Tick( DeltaTime );\n      if( Controller )\n      {\n        float len = lastInput.Size();\n        if( len > 1.f )\n          lastInput /= len;\n        AddMovementInput(\n        GetActorForwardVector(), lastInput.Y );\n        AddMovementInput(GetActorRightVector(), lastInput.X);\n        // Zero off last input values\n        lastInput = FVector2D( 0.f, 0.f );\n      }\n    }\n    ```", "```cpp\n    voidAWarrior::SetupPlayerInputComponent(UInputComponent* Input)\n    {\n      check(Input );\n      // Connect the Jump action to the C++ Jump function\n      Input->BindAction(\"Jump\", IE_Pressed, this, &AWarrior::Jump );\n    }\n    ```", "```cpp\nGetWorld()->GetFirstPlayerController()->PlayerInput\n```", "```cpp\nUPlayerInput::AddEngineDefinedAxisMapping()\nUPlayerInput::AddEngineDefinedActionMapping()\n```", "```cpp\n        FInputAxisKeyMapping backKey( \"Back\", EKeys::S, 1.f );\n        ```", "```cpp\n        FInputActionKeyMapping jump(\"Jump\", EKeys::SpaceBar, 0, 0, 0, 0);\n        ```", "```cpp\n        GetWorld()->GetFirstPlayerController()->PlayerInput->AddAxisMapping( backKey ); // specific to a controller\n        ```", "```cpp\n        UPlayerInput::AddEngineDefinedActionMapping(jump );\n        ```", "```cpp\n    Input->BindAxis(\"Back\", this, &AWarrior::Back);\n    Input->BindAction(\"Jump\", IE_Pressed, this, &AWarrior::Jump );\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable, Category = UIFuncs)\n    void ButtonClicked()\n    {\n      UE_LOG(LogTemp, Warning, TEXT( \"UI Button Clicked\" ) );\n    }\n    ```", "```cpp\n        UFUNCTION(BlueprintNativeEvent, Category = Collision)\n        void OnOverlapsBegin( UPrimitiveComponent* Comp, AActor* OtherActor,\n        UPrimitiveComponent* OtherComp, int32 OtherBodyIndex,\n        bool bFromSweep, const FHitResult& SweepResult );\n        ```", "```cpp\n        OnOverlapsBegin( UPrimitiveComponent* Comp, AActor* OtherActor,UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitREsult& SweepResult );\n        ```", "```cpp\n        void AWarrior::OnOverlapsBegin_Implementation( AActor*\n        OtherActor, UPrimitiveComponent* OtherComp,\n        int32 OtherBodyIndex,\n        bool bFromSweep, const FHitResult& SweepResult )\n        {\n          UE_LOG(LogTemp, Warning, TEXT( \"Overlaps began\" ) );\n        }\n        ```", "```cpp\n        void AWarrior::PostInitializeComponents()\n        {\n          Super::PostInitializeComponents();\n          if(RootComponent )\n          {\n            // Attach contact function to all bounding components.\n            GetCapsuleComponent()->OnComponentBeginOverlap.AddDynamic( this, &AWarrior::OnOverlapsBegin );\n            GetCapsuleComponent()->OnComponentEndOverlap.AddDynamic( this, &AWarrior::OnOverlapsEnd );\n          }\n        }\n        ```"]