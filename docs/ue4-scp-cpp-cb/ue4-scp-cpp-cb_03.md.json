["```cpp\n// CREATING AND ALLOCATING MEMORY FOR AN INT VARIABLE i\nint* i; // Declare a pointer variable i\ni = ( int* )malloc( sizeof( int ) ); // Allocates system memory\n*i = 0; // Assign the value 0 into variable i\nprintf( \"i contains %d\", *i ); // Use the variable i, ensuring to \n// use dereferencing operator * during use\n// RELEASING MEMORY OCCUPIED BY i TO THE SYSTEM\nfree( i ); // When we're done using i, we free the memory \n// allocated for it back to the system.\ni = 0;// Set the pointer's reference to address 0\n```", "```cpp\nclass Object\n{\n  Object()\n  {\n    puts( \"Object constructed\" );\n  }\n  ~Object()\n  {\n    puts( \"Object destructed\" );\n  }\n};\nObject* object= new Object(); // Invokes ctor\ndelete object; // Invokes dtor\nobject = 0; // resets object to a null pointer\n```", "```cpp\nfor( int i = 0; i < 100; i++ )\nint** leak = new int[500]; // generates memory leaks galore!\n```", "```cpp\nUCLASS(BlueprintType, Blueprintable, meta=(ShortTooltip=\"Base class for any Action type\") )\nClass WRYV_API UAction : public UObject\n{\n  GENERATED_UCLASS_BODY()\n  public:\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Properties)\n  FString Text;\n  UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Properties)\n  FKey ShortcutKey;\n};\n```", "```cpp\nUAction* action = NewObject<UAction>( GetTransientPackage(),\nUAction::StaticClass() /* RF_* flags */ );\n```", "```cpp\nUObject *o = NewObject< UObject >( ... );\no->ConditionalBeginDestroy();\n```", "```cpp\n// C++ Class NOT deriving from UObject\nclass MyClass { };\nTSharedPtr<MyClass>sharedPtr( new MyClass() );\n```", "```cpp\nif( ptr.IsValid() ) // Check to see if the pointer is valid\n{\n}\n```", "```cpp\n{\n  int x;\n  {\n    int y;\n  } // scope of y ends\n} // scope of x ends\n```", "```cpp\nTScopedPointer<AWarrior> warrior(this );\n```", "```cpp\nUCLASS()\nclass MYPROJECT_API AWarrior : public AActor\n{\n  //TArray< FSoundEffect > Greets; // Incorrect\n  UPROPERTY() TArray< FSoundEffect > Greets; // Correct\n};\n```", "```cpp\nGetWorld()->ForceGarbageCollection( true );\n```", "```cpp\nvoid f()\n{\n  // F11 pauses here\n  UE_LOG( LogTemp, Warning, TEXT( \"Log message\" ) );\n}\nint main()\n{\n  f(); // Breakpoint here: F10 runs and skips to next line\n}\n```", "```cpp\n    UObject *o = 0; // Initialize to an illegal null pointer\n    o->GetName(); // Try and get the name of the object (has bug)\n    ```"]