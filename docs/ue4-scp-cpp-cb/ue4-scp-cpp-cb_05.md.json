["```cpp\n    UPROPERTY()\n    UBoxComponent* TriggerZone;\n\n    UFUNCTION()\n    virtual void NotifyActorBeginOverlap(AActor* OtherActor) override;\n    UFUNCTION()\n    virtual void NotifyActorEndOverlap(AActor* OtherActor) override;\n    ```", "```cpp\n    void AMyTriggerVolume::NotifyActorBeginOverlap(AActor* OtherActor)\n    {\n      GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, FString::Printf(TEXT(\"%s entered me\"),*(OtherActor->GetName())));\n    }\n\n    void AMyTriggerVolume::NotifyActorEndOverlap(AActor* OtherActor)\n    {\n      GEngine->AddOnScreenDebugMessage(-1, 1, FColor::Red, FString::Printf(TEXT(\"%s left me\"), *(OtherActor->GetName())));\n    }\n    ```", "```cpp\n    DECLARE_DELEGATE(FStandardDelegateSignature)\n    UCLASS()\n    class UE4COOKBOOK_API AUE4CookbookGameMode : public AGameMode\n    ```", "```cpp\n    FStandardDelegateSignature MyStandardDelegate;\n    ```", "```cpp\n    UFUNCTION()\n    void EnableLight();\n\n    UPROPERTY()\n    UPointLightComponent* PointLight;\n    ```", "```cpp\n    PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n    RootComponent = PointLight;\n    PointLight->SetVisibility(false);\n    ```", "```cpp\n    Super::BeginPlay();\n    if (TheWorld != nullptr)\n    {\n      AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n      AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n      if (MyGameMode != nullptr)\n      {\n        MyGameMode->MyStandardDelegate.BindUObject(this, &ADelegateListener::EnableLight);\n      }\n    }\n    ```", "```cpp\n    void ADelegateListener::EnableLight()\n    {\n      PointLight->SetVisibility(true);\n    }\n    ```", "```cpp\n    UWorld* TheWorld = GetWorld();\n    if (TheWorld != nullptr)\n    {\n      AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n      AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n      MyGameMode->MyStandardDelegate.ExecuteIfBound();\n    }\n    ```", "```cpp\n    UFUNCTION()\n    virtual void EndPlay(constEEndPlayReason::Type EndPlayReason) override;\n    ```", "```cpp\n    void ADelegateListener::EndPlay(constEEndPlayReason::Type EndPlayReason)\n    {\n      Super::EndPlay(EndPlayReason);\n      UWorld* TheWorld = GetWorld();\n      if (TheWorld != nullptr)\n      {\n        AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n        AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n        if (MyGameMode != nullptr)\n        {\n          MyGameMode->MyStandardDelegate.Unbind();\n        }\n      }\n    }\n    ```", "```cpp\n    DECLARE_DELEGATE_OneParam(FParamDelegateSignature, FLinearColor)\n    ```", "```cpp\n    FParamDelegateSignatureMyParameterDelegate;\n    ```", "```cpp\n    UFUNCTION()\n    void SetLightColor(FLinearColorLightColor);\n    UPROPERTY()\n    UPointLightComponent* PointLight;\n    ```", "```cpp\n    PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n    RootComponent = PointLight;\n    ```", "```cpp\n    Super::BeginPlay();\n    UWorld* TheWorld = GetWorld();\n    if (TheWorld != nullptr)\n    {\n      AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n      AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n      if (MyGameMode != nullptr)\n      {\n        MyGameMode->MyParameterDelegate.BindUObject(this, &AParamDelegateListener::SetLightColor);\n      }\n    }\n    ```", "```cpp\n    void AParamDelegateListener::SetLightColor(FLinearColorLightColor)\n    {\n      PointLight->SetLightColor(LightColor);\n    }\n    ```", "```cpp\n    MyGameMode->MyParameterDelegate.ExecuteIfBound(FLinearColor(1, 0, 0, 1));\n    ```", "```cpp\n    MyGameMode->MyParameterDelegate.BindUObject(this, &AParamDelegateListener::SetLightColor, false);\n    ```", "```cpp\n    void SetLightColor(FLinearColorLightColor, bool EnableLight);\n    ```", "```cpp\n    void AParamDelegateListener::SetLightColor(FLinearColorLightColor, bool EnableLight)\n    {\n      PointLight->SetLightColor(LightColor);\n      PointLight->SetVisibility(EnableLight);\n    }\n    ```", "```cpp\n    DECLARE_MULTICAST_DELEGATE(FMulticastDelegateSignature)\n    ```", "```cpp\n    UFUNCTION()\n    void ToggleLight();\n    UFUNCTION()\n    virtual void EndPlay(constEEndPlayReason::Type EndPlayReason) override;\n\n    UPROPERTY()\n    UPointLightComponent* PointLight;\n\n    FDelegateHandleMyDelegateHandle;\n    ```", "```cpp\n    PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n    RootComponent = PointLight;\n    ```", "```cpp\n    Super::BeginPlay();\n    UWorld* TheWorld = GetWorld();\n    if (TheWorld != nullptr)\n    {\n      AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n      AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n      if (MyGameMode != nullptr)\n      {\n        MyDelegateHandle  = MyGameMode->MyMulticastDelegate.AddUObject(this, &AMulticastDelegateListener::ToggleLight);\n      }\n    }\n    ```", "```cpp\n    void AMulticastDelegateListener::ToggleLight()\n    {\n      PointLight->ToggleVisibility();\n    }\n    ```", "```cpp\n    void AMulticastDelegateListener::EndPlay(constEEndPlayReason::Type EndPlayReason)\n    {\n      Super::EndPlay(EndPlayReason);\n      UWorld* TheWorld = GetWorld();\n      if (TheWorld != nullptr)\n      {\n        AGameMode* GameMode = UGameplayStatics::GetGameMode(TheWorld);\n        AUE4CookbookGameMode * MyGameMode = Cast<AUE4CookbookGameMode>(GameMode);\n        if (MyGameMode != nullptr)\n        {\n          MyGameMode->MyMulticastDelegate.Remove(MyDelegateHandle);\n        }\n      }\n    }\n    ```", "```cpp\n    MyGameMode->MyMulticastDelegate.Broadcast();\n    ```", "```cpp\n    DECLARE_EVENT(AMyTriggerVolume, FPlayerEntered)\n    ```", "```cpp\n    FPlayerEnteredOnPlayerEntered;\n    ```", "```cpp\n    OnPlayerEntered.Broadcast();\n    ```", "```cpp\n    UPROPERTY()\n    UPointLightComponent* PointLight;\n\n    UPROPERTY(EditAnywhere)\n    AMyTriggerVolume* TriggerEventSource;\n    UFUNCTION()\n    void OnTriggerEvent();\n    ```", "```cpp\n    PointLight = CreateDefaultSubobject<UPointLightComponent>(\"PointLight\");\n    RootComponent = PointLight;\n    ```", "```cpp\n    if (TriggerEventSource != nullptr)\n    {\n      TriggerEventSource->OnPlayerEntered.AddUObject(this, &ATriggerVolEventListener::OnTriggerEvent);\n    }\n    ```", "```cpp\n    void ATriggerVolEventListener::OnTriggerEvent()\n    {\n      PointLight->SetLightColor(FLinearColor(0, 1, 0, 1));\n    }\n    ```", "```cpp\n    DECLARE_MULTICAST_DELEGATE_TwoParams(FOnTimeChangedSignature, int32, int32)\n    ```", "```cpp\n    FOnTimeChangedSignatureOnTimeChanged;\n    ```", "```cpp\n    UPROPERTY()\n    int32 TimeScale;\n\n    UPROPERTY()\n    int32 Hours;\n    UPROPERTY()\n    int32 Minutes;\n\n    UPROPERTY()\n    float ElapsedSeconds;\n    ```", "```cpp\n    TimeScale = 60;\n    Hours = 0;\n    Minutes = 0;\n    ElapsedSeconds = 0;\n    ```", "```cpp\n    ElapsedSeconds += (DeltaTime * TimeScale);\n    if (ElapsedSeconds> 60)\n    {\n      ElapsedSeconds -= 60;\n      Minutes++;\n      if (Minutes > 60)\n      {\n        Minutes -= 60;\n        Hours++;\n      }\n\n      OnTimeChanged.Broadcast(Hours, Minutes);\n    }\n    ```", "```cpp\n    UPROPERTY()\n    USceneComponent* RootSceneComponent;\n\n    UPROPERTY()\n    UStaticMeshComponent* ClockFace;\n    UPROPERTY()\n    USceneComponent* HourHandle;\n    UPROPERTY()\n    UStaticMeshComponent* HourHand;\n    UPROPERTY()\n    USceneComponent* MinuteHandle;\n    UPROPERTY()\n    UStaticMeshComponent* MinuteHand;\n\n    UFUNCTION()\n    void TimeChanged(int32 Hours, int32 Minutes);\n    FDelegateHandleMyDelegateHandle;\n    ```", "```cpp\n    RootSceneComponent = CreateDefaultSubobject<USceneComponent>(\"RootSceneComponent\");\n    ClockFace = CreateDefaultSubobject<UStaticMeshComponent>(\"ClockFace\");\n    HourHand = CreateDefaultSubobject<UStaticMeshComponent>(\"HourHand\");\n    MinuteHand = CreateDefaultSubobject<UStaticMeshComponent>(\"MinuteHand\");\n    HourHandle = CreateDefaultSubobject<USceneComponent>(\"HourHandle\");\n    MinuteHandle = CreateDefaultSubobject<USceneComponent>(\"MinuteHandle\");\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cylinder.Cylinder'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      ClockFace->SetStaticMesh(MeshAsset.Object);\n      HourHand->SetStaticMesh(MeshAsset.Object);\n      MinuteHand->SetStaticMesh(MeshAsset.Object);\n    }\n    RootComponent = RootSceneComponent;\n    HourHand->AttachTo(HourHandle);\n    MinuteHand->AttachTo(MinuteHandle);\n    HourHandle->AttachTo(RootSceneComponent);\n    MinuteHandle->AttachTo(RootSceneComponent);\n    ClockFace->AttachTo(RootSceneComponent);\n    ClockFace->SetRelativeTransform(FTransform(FRotator(90, 0, 0), FVector(10, 0, 0), FVector(2, 2, 0.1)));\n    HourHand->SetRelativeTransform(FTransform(FRotator(0, 0, 0), FVector(0, 0, 25), FVector(0.1, 0.1, 0.5)));\n    MinuteHand->SetRelativeTransform(FTransform(FRotator(0, 0, 0), FVector(0, 0, 50), FVector(0.1, 0.1, 1)));\n    ```", "```cpp\n    TArray<AActor*>TimeOfDayHandlers;\n    UGameplayStatics::GetAllActorsOfClass(GetWorld(), ATimeOfDayHandler::StaticClass(), TimeOfDayHandlers);\n    if (TimeOfDayHandlers.Num() != 0)\n    {\n      auto TimeOfDayHandler = Cast<ATimeOfDayHandler>(TimeOfDayHandlers[0]);\n      MyDelegateHandle = TimeOfDayHandler->OnTimeChanged.AddUObject(this, &AClock::TimeChanged);\n    }\n    ```", "```cpp\n    void AClock::TimeChanged(int32 Hours, int32 Minutes)\n    {\n      HourHandle->SetRelativeRotation(FRotator( 0, 0,30 * Hours));\n      MinuteHandle->SetRelativeRotation(FRotator(0,0,6 * Minutes));\n    }\n    ```", "```cpp\n    DECLARE_DELEGATE(FPickedupEventSignature)\n    ```", "```cpp\n    virtual void NotifyActorBeginOverlap(AActor* OtherActor) override;\n    UPROPERTY()\n    UStaticMeshComponent* MyMesh;\n\n    UPROPERTY()\n    URotatingMovementComponent* RotatingComponent;\n\n    FPickedupEventSignatureOnPickedUp;\n    ```", "```cpp\n    MyMesh = CreateDefaultSubobject<UStaticMeshComponent>(\"MyMesh\");\n    RotatingComponent = CreateDefaultSubobject<URotatingMovementComponent>(\"RotatingComponent\");\n    RootComponent = MyMesh;\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      MyMesh->SetStaticMesh(MeshAsset.Object);\n    }\n    MyMesh->SetCollisionProfileName(TEXT(\"OverlapAllDynamic\"));\n    RotatingComponent->RotationRate = FRotator(10, 0, 10);\n    ```", "```cpp\n    void APickup::NotifyActorBeginOverlap(AActor* OtherActor)\n    {\n      OnPickedUp.ExecuteIfBound();\n    }\n    ```", "```cpp\n    UPROPERTY()\n    USceneComponent* SpawnLocation;\n\n    UFUNCTION()\n    void PickupCollected();\n    UFUNCTION()\n    void SpawnPickup();\n    UPROPERTY()\n    APickup* CurrentPickup;\n    FTimerHandleMyTimer;\n    ```", "```cpp\n    SpawnLocation = CreateDefaultSubobject<USceneComponent>(\"SpawnLocation\");\n    ```", "```cpp\n    SpawnPickup();\n    ```", "```cpp\n    void APickupSpawner::PickupCollected()\n    {\n      GetWorld()->GetTimerManager().SetTimer(MyTimer, this, &APickupSpawner::SpawnPickup, 10, false);\n      CurrentPickup->OnPickedUp.Unbind();\n      CurrentPickup->Destroy();\n    }\n    ```", "```cpp\n    void APickupSpawner::SpawnPickup()\n    {\n      UWorld* MyWorld = GetWorld();\n      if (MyWorld != nullptr){\n        CurrentPickup = MyWorld->SpawnActor<APickup>(APickup::StaticClass(), GetTransform());\n        CurrentPickup->OnPickedUp.BindUObject(this, &APickupSpawner::PickupCollected);\n      }\n    }\n    ```"]