["```cpp and type `r.ForwardLighting 1` in the Stats console window.\n\n# Shader code via Custom node\n\nIf you prefer code to diagrammatic blocks, you're in luck. You can write your own HLSL code to deploy to the GPU for the shading of some vertices in your project. We can construct **Custom** nodes that simply contain math code working on named variables to perform some generic computation. In this recipe, we'll write a custom math function to work with.\n\n## Getting ready\n\nYou need a material shader, and a general mathematical function to implement. As an example, we'll write a **Custom** node that returns the square of all inputs.\n\n## How to do it...\n\n1.  In order to create a custom material expression, simply right-click anywhere on the canvas, and select **Custom**.![How to do it...](img/00271.jpeg)\n2.  With your new **Custom** block selected, go to the **Details** panel on the left side of your Material Editor window (choose **Window** | **Details** if your **Details** panel is not displayed).\n3.  Under **Description**, name your **Custom** block. For example, `Square3`, because we plan to square three float inputs and return a `float3`.\n4.  Click the **+** icon as many times you need to generate as many inputs as you need to serve. In this case, we're going to serve three float inputs.\n5.  Name each input. We've named ours *x*, *y,* and *z* in the diagram that follows. To use each input in the calculation, you must name it.\n6.  Select the output type. Here we chose to output a `float3`.\n7.  Enter the computation in the **Code** section at the top using the named variables you have created. The code we return here is as follows:\n\n    ```"]