["```cpp\n    UPROPERTY()\n    int32 MovementCost;\n    UPROPERTY()\n    bool CanBeBuiltOn;\n\n    UPROPERTY()\n    FString TileName;\n    ```", "```cpp\n    UCLASS(BlueprintType)\n    class UE4COOKBOOK_API UTileType : public UObject\n    {\n    }\n    ```", "```cpp\n    UPROPERTY()\n    FString WeaponName;\n    UPROPERTY()\n    int32 MaximumHealth;\n    ```", "```cpp\n    UCLASS(Blueprintable)\n    class UE4COOKBOOK_API ABaseEnemy : public AActor\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable, Category = Door)\n    void Open();\n    UPROPERTY()\n    bool IsOpen;\n\n    UPROPERTY()\n    FVector TargetLocation;\n    ```", "```cpp\n    ASlidingDoor::ASlidingDoor()\n    :Super()\n    {\n      auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n      if (MeshAsset.Object != nullptr)\n      {\n        GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n        GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n      }\n      GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n      GetStaticMeshComponent()->SetWorldScale3D(FVector(0.3, 2, 3));\n      SetActorEnableCollision(true);\n      IsOpen = false;\n      PrimaryActorTick.bStartWithTickEnabled = true;\n      PrimaryActorTick.bCanEverTick = true;\n    }\n    void ASlidingDoor::Open()\n    {\n      TargetLocation = ActorToWorld().TransformPositionNoScale(FVector(0, 0, 200));\n      IsOpen = true;\n    }\n\n    void ASlidingDoor::Tick(float DeltaSeconds)\n    {\n      if (IsOpen)\n      {\n        SetActorLocation(FMath::Lerp(GetActorLocation(), TargetLocation, 0.05));\n      }\n    }\n    ```", "```cpp\n    virtual void Tick( float DeltaSeconds ) override;\n    UFUNCTION(BlueprintImplementableEvent)\n    void OnPlayerSpotted(APawn* Player);\n    ```", "```cpp\n    PrimaryActorTick.bCanEverTick = true;\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    GetStaticMeshComponent()->SetRelativeRotation(FRotator(90, 0, 0));\n    ```", "```cpp\n    Super::Tick( DeltaTime );\n\n    auto EndLocation = GetActorLocation() + ActorToWorld().TransformVector(FVector(0,0,-200));\n    FHitResult HitResult;\n    GetWorld()->SweepSingleByChannel(HitResult, GetActorLocation(), EndLocation, FQuat::Identity, ECC_Camera, FCollisionShape::MakeSphere(25), FCollisionQueryParams(\"Spot\", true, this));\n    APawn* SpottedPlayer = Cast<APawn>(HitResult.Actor.Get());\n\n    if (SpottedPlayer!= nullptr)\n    {\n      OnPlayerSpotted(SpottedPlayer);\n    }\n    DrawDebugLine(GetWorld(), GetActorLocation(), EndLocation, FColor::Red);\n    ```", "```cpp\n    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnKingDeathSignature, AKing*, DeadKing);\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable, Category = King)\n    void Die();\n    ```", "```cpp\n    UPROPERTY(BlueprintAssignable)\n    FOnKingDeathSignature OnKingDeath;\n    ```", "```cpp\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    ```", "```cpp\n    void AKing::Die()\n    {\n      OnKingDeath.Broadcast(this);\n    }\n    ```", "```cpp\n    APeasant();\n    ```", "```cpp\n    UFUNCTION(BlueprintCallable, category = Peasant)\n    void Flee(AKing* DeadKing);\n    ```", "```cpp\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cube.Cube'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    ```", "```cpp\n    void APeasant::Flee(AKing* DeadKing)\n    {\n      GEngine->AddOnScreenDebugMessage(-1, 2, FColor::Red, TEXT(\"Waily Waily!\"));\n      FVector FleeVector = GetActorLocation() \u2013 DeadKing->GetActorLocation();\n      FleeVector.Normalize();\n      FleeVector *= 500;\n      SetActorLocation(GetActorLocation() + FleeVector);\n    }\n    ```", "```cpp\n    UENUM(BlueprintType)\n    enum TreeType\n    {\n      Tree_Poplar,\n      Tree_Spruce,\n      Tree_Eucalyptus,\n      Tree_Redwood\n    };\n    ```", "```cpp\n    UPROPERTY(BlueprintReadWrite)\n    TEnumAsByte<TreeType> Type;\n    ```", "```cpp\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cylinder.Cylinder'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    ```", "```cpp\n    UPROPERTY(EditDefaultsOnly)\n    bool EditDefaultsOnly;\n    UPROPERTY(EditInstanceOnly)\n    bool EditInstanceOnly;\n    UPROPERTY(EditAnywhere)\n    bool EditAnywhere;\n    UPROPERTY(VisibleDefaultsOnly)\n    bool VisibleDefaultsOnly;\n    UPROPERTY(VisibleInstanceOnly)\n    bool VisibleInstanceOnly;\n    UPROPERTY(VisibleAnywhere)\n    bool VisibleAnywhere;\n    ```", "```cpp\n    UPROPERTY(BlueprintReadWrite, Category = Cookbook)\n    bool ReadWriteProperty;\n    UPROPERTY(BlueprintReadOnly, Category = Cookbook)\n    bool ReadOnlyProperty;\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    bool ShowStaticMesh;\n    ```", "```cpp\n    virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;\n    ```", "```cpp\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    ShowStaticMesh = true;\n    ```", "```cpp\n    void APostEditChangePropertyActor::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)\n    {\n      if (PropertyChangedEvent.Property != nullptr)\n      {\n        const FName PropertyName(PropertyChangedEvent.Property->GetFName());\n        if (PropertyName == GET_MEMBER_NAME_CHECKED(APostEditChangePropertyActor, ShowStaticMesh))\n        {\n          if (GetStaticMeshComponent() != nullptr)\n          {\n            GetStaticMeshComponent()->SetVisibility(ShowStaticMesh);\n          }\n        }\n      }\n      Super::PostEditChangeProperty(PropertyChangedEvent);\n    }\n    ```", "```cpp\n    UPROPERTY(EditAnywhere)\n    bool ShowStaticMesh;\n    ```", "```cpp\n    virtual void OnConstruction(const FTransform& Transform) override;\n    ```", "```cpp\n    auto MeshAsset = ConstructorHelpers::FObjectFinder<UStaticMesh>(TEXT(\"StaticMesh'/Engine/BasicShapes/Cone.Cone'\"));\n    if (MeshAsset.Object != nullptr)\n    {\n      GetStaticMeshComponent()->SetStaticMesh(MeshAsset.Object);\n      GetStaticMeshComponent()->bGenerateOverlapEvents = true;\n    }\n    GetStaticMeshComponent()->SetMobility(EComponentMobility::Movable);\n    ShowStaticMesh = true;\n    ```", "```cpp\n    void AOnConstructionActor::OnConstruction(const FTransform& Transform)\n    {\n      GetStaticMeshComponent()->SetVisibility(ShowStaticMesh);\n    }\n    ```", "```cpp\n    UBlueprint* Blueprint = Cast<UBlueprint>(GetClass()->ClassGeneratedBy);\n    if(Blueprint && (Blueprint->bRunConstructionScriptOnDrag || bFinished) && !FLevelUtils::IsMovingLevel() )\n    {\n      FNavigationLockContext NavLock(GetWorld(), ENavigationLockReason::AllowUnregister);\n      RerunConstructionScripts();\n    }\n    ```", "```cpp\n    {\n      \"FileVersion\": 3,\n      \"EngineAssociation\": \"4.11\",\n      \"Category\": \"\",\n      \"Description\": \"\",\n      \"Modules\": [\n        {\n          \"Name\": \"UE4Cookbook\",\n          \"Type\": \"Runtime\",\n          \"LoadingPhase\": \"Default\",\n          \"AdditionalDependencies\": [\n            \"Engine\",\n            \"CoreUObject\"\n          ]\n        },\n     {\n     \"Name\": \"UE4CookbookEditor\",\n     \"Type\": \"Editor\",\n     \"LoadingPhase\": \"PostEngineInit\",\n     \"AdditionalDependencies\": [\n     \"Engine\",\n     \"CoreUObject\"\n     ]\n     }\n      ]\n    }\n    ```", "```cpp\n    using UnrealBuildTool;\n\n    public class UE4CookbookEditor : ModuleRules\n    {\n      public UE4CookbookEditor(TargetInfo Target)\n      {\n        PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"RHI\", \"RenderCore\", \"ShaderCore\" });\n        PublicDependencyModuleNames.Add(\"UE4Cookbook\");\n        PrivateDependencyModuleNames.AddRange(new string[] { \"UnrealEd\" });\n      }\n    }\n    ```", "```cpp\n    #pragma once\n    #include \"Engine.h\"\n    #include \"ModuleManager.h\"\n    #include \"UnrealEd.h\"\n\n    class FUE4CookbookEditorModule: public IModuleInterface\n    {\n    };\n    ```", "```cpp\n    #include \"UE4CookbookEditor.h\"\n    IMPLEMENT_GAME_MODULE(FUE4CookbookEditorModule, UE4CookbookEditor)\n    ```", "```cpp\n    #pragma once\n    #include \"Commands.h\"\n    #include \"EditorStyleSet.h\"\n    /**\n     * \n     */\n    class FCookbookCommands : public TCommands<FCookbookCommands>\n    {\n      public:\n      FCookbookCommands()\n      :TCommands<FCookbookCommands>(FName(TEXT(\"UE4_Cookbook\")), FText::FromString(\"Cookbook Commands\"), NAME_None, FEditorStyle::GetStyleSetName()) \n      {\n      };\n      virtual void RegisterCommands() override;\n\n      TSharedPtr<FUICommandInfo> MyButton;\n    };\n    ```", "```cpp\n    #include \"UE4CookbookEditor.h\"\n    #include \"Commands.h\"\n    #include \"CookbookCommands.h\"\n\n    void FCookbookCommands::RegisterCommands()\n    {\n      #define LOCTEXT_NAMESPACE \"\"\n      UI_COMMAND(MyButton, \"Cookbook\", \"Demo Cookbook Toolbar Command\", EUserInterfaceActionType::Button, FInputGesture());\n      #undef LOCTEXT_NAMESPACE\n    }\n    ```", "```cpp\n    virtual void StartupModule() override;\n    virtual void ShutdownModule() override;\n    TSharedPtr<FExtender> ToolbarExtender;\n    TSharedPtr<const FExtensionBase> Extension;\n    void MyButton_Clicked()\n    {\n      TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n      .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n      .ClientSize(FVector2D(800, 400))\n      .SupportsMaximize(false)\n      .SupportsMinimize(false);\n\n      IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT(\"MainFrame\"));\n\n      if (MainFrameModule.GetParentWindow().IsValid())\n      {\n        FSlateApplication::Get().AddWindowAsNativeChild(CookbookWindow,MainFrameModule.GetParentWindow().ToSharedRef());\n      }\n      else\n      {\n        FSlateApplication::Get().AddWindow(CookbookWindow);\n      }\n    };\n    void AddToolbarExtension(FToolBarBuilder &builder)\n    {\n      FSlateIcon IconBrush = FSlateIcon(FEditorStyle::GetStyleSetName(), \"LevelEditor.ViewOptions\", \"LevelEditor.ViewOptions.Small\");\n\n      builder.AddToolBarButton(FCookbookCommands::Get().MyButton, NAME_None, FText::FromString(\"My Button\"), FText::FromString(\"Click me to display a message\"), IconBrush, NAME_None);\n    };\n    ```", "```cpp\n    void FUE4CookbookEditorModule::StartupModule()\n    {\n      FCookbookCommands::Register();\n      TSharedPtr<FUICommandList> CommandList = MakeShareable(new FUICommandList());\n      CommandList->MapAction(FCookbookCommands::Get().MyButton, FExecuteAction::CreateRaw(this, &FUE4CookbookEditorModule::MyButton_Clicked), FCanExecuteAction());\n      ToolbarExtender = MakeShareable(new FExtender());\n      Extension = ToolbarExtender->AddToolBarExtension(\"Compile\", EExtensionHook::Before, CommandList, FToolBarExtensionDelegate::CreateRaw(this, &FUE4CookbookEditorModule::AddToolbarExtension));\n\n      FLevelEditorModule& LevelEditorModule = FModuleManager::LoadModuleChecked<FLevelEditorModule>(\"LevelEditor\");\n      LevelEditorModule.GetToolBarExtensibilityManager()->AddExtender(ToolbarExtender);\n    }\n\n    void FUE4CookbookEditorModule::ShutdownModule()\n    {\n      ToolbarExtender->RemoveExtension(Extension.ToSharedRef());\n      Extension.Reset();\n      ToolbarExtender.Reset();\n    }\n    ```", "```cpp\n    #include \"LevelEditor.h\"\n    #include \"SlateBasics.h\"\n    #include \"MultiBoxExtender.h\"\n    #include \"Chapter8/CookbookCommands.h\"\n    ```", "```cpp\n    void AddMenuExtension(FMenuBuilder &builder)\n    {\n      FSlateIcon IconBrush = FSlateIcon(FEditorStyle::GetStyleSetName(), \"LevelEditor.ViewOptions\", \"LevelEditor.ViewOptions.Small\");\n\n      builder.AddMenuEntry(FCookbookCommands::Get().MyButton);\n    };\n    ```", "```cpp\n    Extension = ToolbarExtender->AddToolBarExtension(\"Compile\", EExtensionHook::Before, CommandList, FToolBarExtensionDelegate::CreateRaw(this, &FUE4CookbookEditorModule::AddToolbarExtension));\n    LevelEditorModule.GetToolBarExtensibilityManager()->AddExtender(ToolbarExtender);\n    ```", "```cpp\n    Extension = ToolbarExtender->AddMenuExtension(\"LevelEditor\", EExtensionHook::Before, CommandList, FMenuExtensionDelegate::CreateRaw(this, &FUE4CookbookEditorModule::AddMenuExtension));\n    LevelEditorModule.GetMenuExtensibilityManager()->AddExtender(ToolbarExtender);\n    ```", "```cpp\n    TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n    .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n    .ClientSize(FVector2D(800, 400))\n    .SupportsMaximize(false)\n    .SupportsMinimize(false)\n    [\n      SNew(SVerticalBox)\n      +SVerticalBox::Slot()\n      .HAlign(HAlign_Center)\n      .VAlign(VAlign_Center)\n      [\n        SNew(STextBlock)\n        .Text(FText::FromString(TEXT(\"Hello from Slate\")))\n      ]\n    ];\n    IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT(\"MainFrame\"));\n\n    if (MainFrameModule.GetParentWindow().IsValid())\n    {\n      FSlateApplication::Get().AddWindowAsNativeChild(CookbookWindow, MainFrameModule.GetParentWindow().ToSharedRef());\n    }\n    else\n    {\n      FSlateApplication::Get().AddWindow(CookbookWindow);\n    }\n    ```", "```cpp\n    #pragma once\n\n    #include \"Object.h\"\n    #include \"MyCustomAsset.generated.h\"\n\n    /**\n     * \n     */\n    UCLASS()\n    class UE4COOKBOOK_API UMyCustomAsset : public UObject\n    {\n      GENERATED_BODY()\n      public:\n      UPROPERTY(EditAnywhere, Category = \"Custom Asset\")\n      FString Name;\n    };\n    ```", "```cpp\n    #pragma once\n\n    #include \"Factories/Factory.h\"\n    #include \"CustomAssetFactory.generated.h\"\n\n    /**\n     * \n     */\n    UCLASS()\n    class UE4COOKBOOK_API UCustomAssetFactory : public UFactory\n    {\n      GENERATED_BODY()\n\n      public:\n      UCustomAssetFactory();\n\n      virtual UObject* FactoryCreateNew(UClass* InClass, UObject* InParent, FName InName, EObjectFlags Flags, UObject* Context, FFeedbackContext* Warn, FName CallingContext) override;\n    };\n    ```", "```cpp\n    #include \"UE4Cookbook.h\"\n    #include \"MyCustomAsset.h\"\n    #include \"CustomAssetFactory.h\"\n\n    UCustomAssetFactory::UCustomAssetFactory()\n    :Super()\n    {\n      bCreateNew = true;\n      bEditAfterNew = true;\n      SupportedClass = UMyCustomAsset::StaticClass();\n    }\n\n    UObject* UCustomAssetFactory::FactoryCreateNew(UClass* InClass, UObject* InParent, FName InName, EObjectFlags Flags, UObject* Context, FFeedbackContext* Warn, FName CallingContext)\n    {\n      auto NewObjectAsset = NewObject<UMyCustomAsset>(InParent, InClass, InName, Flags);\n      return NewObjectAsset;\n    }\n    ```", "```cpp\n    UObject* UCameraAnimFactory::FactoryCreateNew(UClass* Class,UObject* InParent,FName Name,EObjectFlags Flags,UObject* Context,FFeedbackContext* Warn)\n    {\n      UCameraAnim* NewCamAnim = NewObject<UCameraAnim>(InParent, Class, Name, Flags);\n      NewCamAnim->CameraInterpGroup = NewObject<UInterpGroupCamera>(NewCamAnim);\n      NewCamAnim->CameraInterpGroup->GroupName = Name;\n      return NewCamAnim;\n    }\n    ```", "```cpp\n    virtual bool HasActions(const TArray<UObject*>& InObjects) const override;\n    virtual void GetActions(const TArray<UObject*>& InObjects, FMenuBuilder& MenuBuilder) override;\n    virtual FText GetName() const override;\n    virtual UClass* GetSupportedClass() const override;\n\n    virtual FColor GetTypeColor() const override;\n    virtual uint32 GetCategories() override;\n    ```", "```cpp\n    void MyCustomAssetContext_Clicked();\n    ```", "```cpp\n    bool FMyCustomAssetActions::HasActions(const TArray<UObject*>& InObjects) const\n    {\n      return true;\n    }\n\n    void FMyCustomAssetActions::GetActions(const TArray<UObject*>& InObjects, FMenuBuilder& MenuBuilder)\n    {\n      MenuBuilder.AddMenuEntry(\n      FText::FromString(\"CustomAssetAction\"),\n      FText::FromString(\"Action from Cookbook Recipe\"),\n      FSlateIcon(FEditorStyle::GetStyleSetName(), \"LevelEditor.ViewOptions\"),\n      FUIAction(\n      FExecuteAction::CreateRaw(this, &FMyCustomAssetActions::MyCustomAssetContext_Clicked),\n      FCanExecuteAction()));\n    }\n\n    uint32 FMyCustomAssetActions::GetCategories()\n    {\n      return EAssetTypeCategories::Misc;\n    }\n    FText FMyCustomAssetActions::GetName() const\n    {\n      return FText::FromString(TEXT(\"My Custom Asset\"));\n    }\n    UClass* FMyCustomAssetActions::GetSupportedClass() const\n    {\n      return UMyCustomAsset::StaticClass();\n    }\n\n    FColor FMyCustomAssetActions::GetTypeColor() const\n    {\n      return FColor::Emerald;\n    }\n    voidFMyCustomAssetActions::MyCustomAssetContext_Clicked()\n    {\n      TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n      .Title(FText::FromString(TEXT(\"Cookbook Window\")))\n      .ClientSize(FVector2D(800, 400))\n      .SupportsMaximize(false)\n      .SupportsMinimize(false);\n\n      IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT(\"MainFrame\"));\n\n      if (MainFrameModule.GetParentWindow().IsValid())\n      {\n        FSlateApplication::Get().AddWindowAsNativeChild(CookbookWindow, MainFrameModule.GetParentWindow().ToSharedRef());\n      }\n      else\n      {\n        FSlateApplication::Get().AddWindow(CookbookWindow);\n      }\n    };\n    ```", "```cpp\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n    auto Actions =MakeShareable(new FMyCustomAssetActions);\n    AssetTools.RegisterAssetTypeActions(Actions);\n    CreatedAssetTypeActions.Add(Actions);\n    ```", "```cpp\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n    for (auto Action : CreatedAssetTypeActions)\n    {\n      AssetTools.UnregisterAssetTypeActions(Action.ToSharedRef());\n    }\n    ```", "```cpp\n    IConsoleCommand* DisplayTestCommand;\n    IConsoleCommand* DisplayUserSpecifiedWindow;\n    ```", "```cpp\n    DisplayTestCommand = IConsoleManager::Get().RegisterConsoleCommand(TEXT(\"DisplayTestCommandWindow\"), TEXT(\"test\"), FConsoleCommandDelegate::CreateRaw(this, &FUE4CookbookEditorModule::DisplayWindow, FString(TEXT(\"Test Command Window\"))), ECVF_Default);\n    DisplayUserSpecifiedWindow= IConsoleManager::Get().RegisterConsoleCommand(TEXT(\"DisplayWindow\"), TEXT(\"test\"), FConsoleCommandWithArgsDelegate::CreateLambda(\n      [&](const TArray< FString >& Args)\n      {\n        FString WindowTitle;\n        for (FString Arg : Args)\n        {\n          WindowTitle +=Arg;\n          WindowTitle.AppendChar(' ');\n        }\n        this->DisplayWindow(WindowTitle);\n      }\n    ), ECVF_Default);\n    ```", "```cpp\n    If (DisplayTestCommand)\n    {\n      IConsoleManager::Get().UnregisterConsoleObject(DisplayTestCommand);\n      DisplayTestCommand = nullptr;\n    }\n    If (DisplayUserSpecifiedWindow)\n    {\n      IConsoleManager::Get().UnregisterConsoleObject(DisplayTestCommand);\n      DisplayTestCommand = nullptr;\n    }\n    ```", "```cpp\n    void DisplayWindow(FString WindowTitle)\n    {\n      TSharedRef<SWindow> CookbookWindow = SNew(SWindow)\n      .Title(FText::FromString(WindowTitle))\n      .ClientSize(FVector2D(800, 400))\n      .SupportsMaximize(false)\n      .SupportsMinimize(false);\n      IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<IMainFrameModule>(TEXT(\"MainFrame\"));\n      if (MainFrameModule.GetParentWindow().IsValid())\n      {\n        FSlateApplication::Get().AddWindowAsNativeChild(CookbookWindow, MainFrameModule.GetParentWindow().ToSharedRef());\n      }\n      else\n      {\n        FSlateApplication::Get().AddWindow(CookbookWindow);\n      }\n    }\n    ```", "```cpp\n    virtual IConsoleCommand* RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandDelegate& Command, uint32 Flags);\n    ```", "```cpp\n    #pragma once\n    #include \"EdGraphUtilities.h\"\n    #include \"MyCustomAsset.h\"\n    #include \"SGraphPinCustomAsset.h\"\n\n    struct UE4COOKBOOKEDITOR_API FMyCustomAssetPinFactory : public FGraphPanelPinFactory\n    {\n      public:\n      virtual TSharedPtr<class SGraphPin> CreatePin(class UEdGraphPin* Pin) const override \n      {\n        if (Pin->PinType.PinSubCategoryObject == UMyCustomAsset::StaticClass())\n        {\n          return SNew(SGraphPinCustomAsset, Pin);\n        }\n        else\n        {\n          return nullptr;\n        }\n      };\n    };\n    ```", "```cpp\n    #pragma once\n    #include \"SGraphPin.h\"\n\n    class UE4COOKBOOKEDITOR_API SGraphPinCustomAsset : public SGraphPin\n    {\n      SLATE_BEGIN_ARGS(SGraphPinCustomAsset) {}\n      SLATE_END_ARGS()\n      void Construct(const FArguments& InArgs, UEdGraphPin* InPin);\n      protected:\n      virtual FSlateColor GetPinColor() const override { return FSlateColor(FColor::Black); };\n      virtual TSharedRef<SWidget> GetDefaultValueWidget() override;\n      void ColorPicked(FLinearColor SelectedColor);\n    };\n    ```", "```cpp\n    #include \"UE4CookbookEditor.h\"\n    #include \"SColorPicker.h\"\n    #include \"SGraphPinCustomAsset.h\"\n\n    void SGraphPinCustomAsset::Construct(const FArguments& InArgs, UEdGraphPin* InPin)\n    {\n      SGraphPin::Construct(SGraphPin::FArguments(), InPin);\n    }\n    TSharedRef<SWidget> SGraphPinCustomAsset::GetDefaultValueWidget()\n    {\n      return SNew(SColorPicker)\n      .OnColorCommitted(this, &SGraphPinCustomAsset::ColorPicked);\n    }\n\n    void SGraphPinCustomAsset::ColorPicked(FLinearColor SelectedColor)\n    {\n      UMyCustomAsset* NewValue = NewObject<UMyCustomAsset>();\n      NewValue->ColorName = SelectedColor.ToFColor(false).ToHex();\n      GraphPinObj->GetSchema()->TrySetDefaultObject(*GraphPinObj, NewValue);\n    }\n    ```", "```cpp\n    TSharedPtr<FMyCustomAssetPinFactory> PinFactory;\n    ```", "```cpp\n    PinFactory = MakeShareable(new FMyCustomAssetPinFactory());\n    FEdGraphUtilities::RegisterVisualPinFactory(PinFactory);\n    ```", "```cpp\n    FEdGraphUtilities::UnregisterVisualPinFactory(PinFactory);\n    PinFactory.Reset();\n    ```", "```cpp\n    virtual TSharedPtr<class SGraphPin> CreatePin(class UEdGraphPin* Pin) const\n    ```", "```cpp\n    #include \"MyCustomAsset.h\"\n    #include \"DetailLayoutBuilder.h\"\n    #include \"IDetailCustomization.h\"\n    #include \"IPropertyTypeCustomization.h\"\n    ```", "```cpp\n    class FMyCustomAssetDetailsCustomization : public IDetailCustomization\n    {\n      public:\n      virtual void CustomizeDetails(IDetailLayoutBuilder& DetailBuilder) override;\n      void ColorPicked(FLinearColor SelectedColor);\n      static TSharedRef<IDetailCustomization> FMyCustomAssetDetailsCustomization::MakeInstance()\n      {\n        return MakeShareable(new FMyCustomAssetDetailsCustomization);\n      }\n      TWeakObjectPtr<class UMyCustomAsset> MyAsset;\n    };\n    ```", "```cpp\n    void FMyCustomAssetDetailsCustomization::CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)\n    {\n      const TArray< TWeakObjectPtr<UObject>>& SelectedObjects = DetailBuilder.GetDetailsView().GetSelectedObjects();\n      for (int32 ObjectIndex = 0; !MyAsset.IsValid() && ObjectIndex < SelectedObjects.Num(); ++ObjectIndex)\n      {\n        const TWeakObjectPtr<UObject>& CurrentObject = SelectedObjects[ObjectIndex];\n        if (CurrentObject.IsValid())\n        {\n          MyAsset = Cast<UMyCustomAsset>(CurrentObject.Get());\n        }\n      }\n      DetailBuilder.EditCategory(\"CustomCategory\", FText::GetEmpty(), ECategoryPriority::Important)\n      .AddCustomRow(FText::GetEmpty())\n      [\n        SNew(SVerticalBox)\n        + SVerticalBox::Slot()\n        .VAlign(VAlign_Center)\n        [\n          SNew(SColorPicker)\n          .OnColorCommitted(this, &FMyCustomAssetDetailsCustomization::ColorPicked)\n        ]\n      ];\n    }\n    ```", "```cpp\n    void FMyCustomAssetDetailsCustomization::ColorPicked(FLinearColor SelectedColor)\n    {\n      if (MyAsset.IsValid())\n      {\n        MyAsset.Get()->ColorName = SelectedColor.ToFColor(false).ToHex();\n      }\n    }\n    ```", "```cpp\n    #include \"UE4CookbookEditor.h\"\n    #include \"IDetailsView.h\"\n    #include \"DetailLayoutBuilder.h\"\n    #include \"DetailCategoryBuilder.h\"\n    #include \"SColorPicker.h\"\n    #include \"SBoxPanel.h\"\n    #include \"DetailWidgetRow.h\"\n    #include \"MyCustomAssetDetailsCustomization.h\"\n    ```", "```cpp\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(UMyCustomAsset::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FMyCustomAssetDetailsCustomization::MakeInstance));\n    ```", "```cpp\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.UnregisterCustomClassLayout(UMyCustomAsset::StaticClass()->GetFName());\n    ```", "```cpp\n    virtual void CustomizeDetails(IDetailLayoutBuilder& DetailBuilder) override;\n    ```", "```cpp\n    void FMyCustomAssetDetailsCustomization::ColorPicked(FLinearColor SelectedColor)\n    ```"]